OBJECT Codeunit 61002 Adv. Purch. - Line Validation
{
  OBJECT-PROPERTIES
  {
    Date=20210211D;
    Time=120000T;
    Modified=true;
    Version List=DCW13.70.00.6.00,ALR;
  }
  PROPERTIES
  {
    TableNo="CDC Temp. Document Line";
    OnRun=VAR
            Document@6085588 : Record "CDC Document";
            Field@6085587 : Record "CDC Template Field";
            DocumentComment@6085673 : Record "CDC Document Comment";
            EmptyField@6085674 : Record "CDC Template Field";
            PurchDocMgt@6085585 : Codeunit "CDC Purch. Doc. - Management";
            CaptureMgt@6085584 : Codeunit "CDC Capture Management";
            DCAppMgt@6085591 : Codeunit "CDC Approval Management";
            Quantity@6085583 : Decimal;
            UnitCost@6085582 : Decimal;
            LineAmount@6085581 : Decimal;
            DiscAmount@6085580 : Decimal;
            DiscPct@6085579 : Decimal;
            LineAmount2@6085578 : Decimal;
            AmountRoundingPrecision@6085577 : Decimal;
            OtherCharges@6085574 : Decimal;
            UnitCharge@6085573 : Decimal;
            LineDescription@6085590 : Text[250];
            CommentText@6085586 : Text[1024];
            LineAccountNo@6085589 : Code[250];
            CurrencyCode@6085576 : Code[10];
            CommentType@6085575 : 'Information,Warning,Error';
            ALRTemplateField@100000000 : Record "CDC Template Field";
          BEGIN
            if not Document.Get("Document No.") then
              exit;

            LineAccountNo := PurchDocMgt.GetLineAccountNo(Document,"Line No.");
            LineDescription := PurchDocMgt.GetLineDescription(Document,"Line No.");
            Quantity := PurchDocMgt.GetLineQuantity(Document,"Line No.");
            UnitCost := PurchDocMgt.GetLineUnitCost(Document,"Line No.");
            DiscPct := PurchDocMgt.GetLineDiscPct(Document,"Line No.");
            DiscAmount := PurchDocMgt.GetLineDiscAmount(Document,"Line No.");
            LineAmount := PurchDocMgt.GetLineAmount(Document,"Line No.");
            OtherCharges := PurchDocMgt.GetLineOtherCharges(Document,"Line No.");
            UnitCharge := PurchDocMgt.GetLineUnitCharge(Document,"Line No.");
            CurrencyCode := PurchDocMgt.GetCurrencyCode(Document);

            //ALR >>>
            //IF (LineAccountNo = '') AND (Quantity = 0) AND (UnitCost = 0) AND (LineAmount = 0) AND (DiscPct = 0) AND
            //  (DiscAmount = 0) AND (LineDescription = '')
            //THEN BEGIN
            //  Skip := TRUE;
            //  EXIT;
            //END;
            ALRTemplateField.SetRange("Template No.",Rec."Template No.");
            ALRTemplateField.SetRange(Type,ALRTemplateField.Type::Line);
            ALRTemplateField.SetRange(Required,true);
            if ALRTemplateField.FindSet then
            repeat
              if StrLen(CaptureMgt.GetValueAsText("Document No.","Line No.",ALRTemplateField)) = 0 then
                Skip := true;
            until ALRTemplateField.Next = 0;
            if Skip then
              exit;
            //ALR <<<

            Field.SetRange("Template No.","Template No.");
            Field.SetRange(Type,Field.Type::Line);
            if Field.FindSet then
              repeat
                if not CaptureMgt.IsValidValue(Field,"Document No.","Line No.") then begin
                  // No need to write an error here as an error written in C6085580 - CDC Doc. - Field Validation
                  OK := false;
                  exit;
                end;
              until Field.Next = 0;

            if not DCAppMgt.GetAmountRoundingPrecision(CurrencyCode,AmountRoundingPrecision) then begin
              OK := false;
              exit;
            end;

            LineAmount2 := Round(Quantity * (UnitCost + UnitCharge),AmountRoundingPrecision);
            LineAmount2 += Round(OtherCharges,AmountRoundingPrecision);

            if DiscAmount <> 0 then
              LineAmount2 := LineAmount2 - Round(DiscAmount,AmountRoundingPrecision)
            else
              if DiscPct <> 0 then begin
                // We are rounding the discount amount before we subtract it from LineAmount as this is how standard NAV behaves on an Invoice
                DiscAmount :=  Round(LineAmount2 * DiscPct / 100,AmountRoundingPrecision);
                LineAmount2 := LineAmount2 - DiscAmount;
              end;

            // We use AmountRoundingPrecision as any roundings should be equal to AmountRoundingPrecision. In this situation,
            // we want the used to be able to register the document.
            // When a document is registered with a rounding difference, the
            OK := (Abs(LineAmount - LineAmount2) <= AmountRoundingPrecision);

            if "Create Comment" then
              if LineAmount <> LineAmount2 then begin
                if OK then begin
                  CommentType := CommentType::Warning;
                  CommentText := WarningTxt;
                end else begin
                  CommentType := CommentType::Error;
                  CommentText := '%1';
                end;

                // LineAmount is Line Amount as captured/keyed in on the document line. We therefore want to show all decimals.
                if (DiscPct = 0) and (DiscAmount = 0) then
                  DocumentComment.Add(Document,EmptyField,"Line No.",DocumentComment.Area::Validation,CommentType,
                    StrSubstNo(CommentText,StrSubstNo(LineAmountDiffTxt,"Line No.",DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                      DCAppMgt.FormatAmount(LineAmount2,CurrencyCode))))
                else
                  if DiscPct <> 0 then
                    DocumentComment.Add(Document,EmptyField,"Line No.",DocumentComment.Area::Validation,CommentType,
                      StrSubstNo(CommentText,StrSubstNo(LineAmountDiffCalcDiscAmtTxt,"Line No.",
                        DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                        DCAppMgt.FormatAmount(LineAmount2,CurrencyCode),DiscPct,DCAppMgt.FormatAmount(DiscAmount,CurrencyCode))))
                  else
                    DocumentComment.Add(Document,EmptyField,"Line No.",DocumentComment.Area::Validation,CommentType,
                      StrSubstNo(CommentText,StrSubstNo(LineAmountDiffCapDiscAmtTxt,"Line No.",
                        DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                        DCAppMgt.FormatAmount(LineAmount2,CurrencyCode),DCAppMgt.FormatAmount(DiscAmount,CurrencyCode))));
              end;
          END;

  }
  CODE
  {
    VAR
      LineAmountDiffCalcDiscAmtTxt@6085576 : TextConst 'DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich in Zeile %1 vom berechneten Zeilenbetrag (%3), der mit dem erfassten Rabatt % (%4) berechnet wurde, um den Rabattbetrag (%5) zu berechnen.;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount % (%4) to calculate Discount Amount (%5) on line %1.';
      LineAmountDiffCapDiscAmtTxt@6085577 : TextConst 'DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich in Zeile %1 von dem berechneten Zeilenbetrag (%3), der mit dem erfassten Rabattbetrag (%4) berechnet wurde.;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount Amount (%4) on line %1.';
      LineAmountDiffTxt@6085573 : TextConst 'DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich vom in Zeile %1 berechneten Zeilenbetrag (%3).;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) on line %1.';
      WarningTxt@6085574 : TextConst 'DEU=WARNUNG: %1;ENU=WARNING: %1';

    BEGIN
    {
      This codeunit validates lines on purchase documents
    }
    END.
  }
}

