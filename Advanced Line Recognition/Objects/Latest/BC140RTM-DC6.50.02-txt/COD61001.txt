OBJECT Codeunit 61001 Adv. Purch/Sales Line Capture
{
  OBJECT-PROPERTIES
  {
    Date=20210211D;
    Time=120000T;
    Modified=true;
    Version List=ALR;
  }
  PROPERTIES
  {
    TableNo="CDC Document";
    OnRun=BEGIN
            Document := Rec;
            Code;
          END;

  }
  CODE
  {
    VAR
      Document@1210050000 : Record "CDC Document";
      CaptureMgt@1160040001 : Codeunit "CDC Capture Management";
      LineManagementSI@100000001 : Codeunit "ALR Line Management SI";
      DocumentComment@1000000000 : Record "CDC Document Comment";
      MandatoryFieldBuffer@1000000002 : TEMPORARY Record "CDC Temp. Document Field";
      UseBufferWordsEvent@100000000 : Boolean;

    [LineStart(4)]
    PROCEDURE Code@1000000000();
    VAR
      TempDocLine@1000000001 : TEMPORARY Record "CDC Temp. Document Line";
      TemplateField@1000000000 : Record "CDC Template Field";
      TempSortedDocumentField@1113400000 : TEMPORARY Record "CDC Temp. Document Field";
      Handled@1160040000 : Boolean;
    BEGIN
      CleanupPrevValues();

      //RUN STANDARD LINE CAPTURING CODEUNIT
      CODEUNIT.Run(CODEUNIT::"CDC Purch./Sales - Line Capt.",Document);

      OnAfterStandardLineRecognition(Document, Handled);
      if Handled then
        exit;

      //BUILD TEMPORARY LINE TABLE AND LOOP LINES
      Document.BuildTempLinesTable(TempDocLine);

      if TempDocLine.FindSet then begin
        FillSortedFieldBuffer(TempSortedDocumentField, MandatoryFieldBuffer, TempDocLine);
        repeat
          TempSortedDocumentField.SetCurrentKey("Document No.","Sort Order");
          if TempSortedDocumentField.FindFirst then
            repeat
              with TemplateField do begin
                Get(TempDocLine."Template No.",TemplateField.Type::Line,TempSortedDocumentField."Field Code");
                case "Advanced Line Recognition Type" of
                  "Advanced Line Recognition Type"::LinkedToAnchorField: FindValueFromOffsetField(TempDocLine,TemplateField);
                  "Advanced Line Recognition Type"::FindFieldByCaptionInPosition: FindValueByCaptionInPosition(TempDocLine,TemplateField);
                  "Advanced Line Recognition Type"::FindFieldByColumnHeading: FindFieldByColumnHeading(TempDocLine,TemplateField);
                end;
              end;
          until TempSortedDocumentField.Next = 0;

          FindSubstitutionFieldValue(TempDocLine);

          GetValueFromPreviousValue(TempDocLine);
        until TempDocLine.Next = 0;

        CleanupTempValues;
      end;
    END;

    [LineStart(41)]
    LOCAL PROCEDURE FindValueFromOffsetField@1210050000(TempDocLine@1210050009 : TEMPORARY Record "CDC Temp. Document Line";VAR OffsetField@1000000001 : Record "CDC Template Field");
    VAR
      OffsetSourceField@1113400000 : Record "CDC Template Field";
      OffsetSourceFieldValue@1113400001 : Record "CDC Document Value";
      DocumentValue@1113400002 : Record "CDC Document Value";
      CurrPage@1210050003 : Record "CDC Document Page";
      CurrTop@1000000002 : Integer;
      CurrLeft@1000000003 : Integer;
      CurrBottom@1000000004 : Integer;
      CurrRight@1000000005 : Integer;
    BEGIN
      //This function will capture the field value based on the offset/distance of a source field value

      //Get Line Identification Field Position
      if not OffsetSourceField.Get(TempDocLine."Template No.",OffsetSourceField.Type::Line,OffsetField."Anchor Field") then
        exit;

      // Get current value record of offset source field
      if not OffsetSourceFieldValue.Get(TempDocLine."Document No.",true,OffsetSourceField.Code,TempDocLine."Line No.") then
        exit;

      CurrPage.Get(Document."No.",OffsetSourceFieldValue."Page No.");

      with OffsetSourceFieldValue do begin
        // Create offset area for value capturing
        CurrTop := Top + OffsetField."Offset Top";
        CurrLeft := Left + OffsetField."Offset Left";
        CurrBottom := CurrTop + OffsetField."Offset Bottom";
        CurrRight := CurrLeft + OffsetField."Offset Right";
        CaptureMgt.CaptureFromPos(CurrPage,OffsetField,TempDocLine."Line No.",true,CurrTop,CurrLeft,CurrBottom,CurrRight,DocumentValue);
        if DocumentValue.Get(TempDocLine."Document No.",true,OffsetField.Code,TempDocLine."Line No.") then
          if ((DocumentValue."Value (Text)" = '') and (DocumentValue."Value (Decimal)" = 0)) or (not DocumentValue."Is Valid" )then
            DocumentValue.Delete;
      end;
    END;

    [LineStart(66)]
    LOCAL PROCEDURE FindValueByCaptionInPosition@1113400000(VAR TempDocLine@1210050009 : TEMPORARY Record "CDC Temp. Document Line";VAR CurrField@1000000001 : Record "CDC Template Field") : Boolean;
    VAR
      DocumentValue@1113400000 : Record "CDC Document Value";
      DocumentValueCopy@1113400004 : Record "CDC Document Value";
      lCurrPage@1113400009 : Record "CDC Document Page";
      NextPos@1113400001 : Integer;
      CaptureEngine@1113400002 : Codeunit "CDC Capture Engine";
      Word@1113400003 : Text[1024];
      lFromTopPos@1113400008 : Integer;
      lFromTopPage@1113400007 : Integer;
      lToBottomPos@1113400006 : Integer;
      lToBottomPage@1113400005 : Integer;
      i@1113400010 : Integer;
    BEGIN
      //This function will capture the field value based on the caption(s) in the area between the previous and next

      //Delete current value
      if DocumentValue.Get(TempDocLine."Document No.",true,CurrField.Code,TempDocLine."Line No.") then
        DocumentValue.Delete;

      Clear(Word);

      // Get Position of caption
      if CurrField."Field Position" = CurrField."Field Position"::StandardLine then
        GetRangeToPrevLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos)
      else
        GetRangeToNextLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos);

      for i := lFromTopPage to lToBottomPage do begin
        lCurrPage.Get(Document."No.",i);

        CurrField."Caption Offset X" := CurrField."ALR Value Caption Offset X";
        CurrField."Caption Offset Y" := CurrField."ALR Value Caption Offset Y";
        CurrField."Typical Field Width" := CurrField."ALR Typical Value Field Width";

        //UseBufferWordsEvent := TRUE;
        if i < lToBottomPage then begin
          LineManagementSI.SetLineRegion(TempDocLine."Document No.",i,lFromTopPos,i,lCurrPage."Bottom Word Pos.")
        end else begin
          if (i > lFromTopPage) and (i < lToBottomPage) then begin
            LineManagementSI.SetLineRegion(TempDocLine."Document No.",i,0,i,lCurrPage."Bottom Word Pos.")
          end else begin
            if lFromTopPos > lToBottomPos then begin
              LineManagementSI.SetLineRegion(TempDocLine."Document No.",i,0,i,lToBottomPos)
            end else begin
              LineManagementSI.SetLineRegion(TempDocLine."Document No.",i,lFromTopPos,i,lToBottomPos);
            end;
          end;
        end;

        Word := CaptureEngine.CaptureField(Document,lCurrPage."Page No.",CurrField,false);

        if Word <> '' then begin
          if (DocumentValue.Get(Document."No.",true,CurrField.Code,0)) then begin
            DocumentValueCopy := DocumentValue;
            DocumentValueCopy."Line No." := TempDocLine."Line No.";
            DocumentValueCopy.Type := DocumentValueCopy.Type::Line;
            DocumentValueCopy.Insert;
            DocumentValue.Delete;
          end;
          CaptureMgt.UpdateFieldValue(Document."No.",TempDocLine."Page No.",TempDocLine."Line No.",CurrField,Word,false,false);

          exit(true);
        end;
      end;
    END;

    [LineStart(119)]
    LOCAL PROCEDURE FindFieldByColumnHeading@1113400001(VAR TempDocLine@1210050009 : TEMPORARY Record "CDC Temp. Document Line";VAR CurrField@1000000001 : Record "CDC Template Field");
    VAR
      Template@1113400021 : Record "CDC Template";
      DocumentValue@1113400000 : Record "CDC Document Value";
      DocumentValueBuffer@1000000002 : TEMPORARY Record "CDC Document Value";
      DocumentValueNew@1113400022 : Record "CDC Document Value";
      CaptionStartWord@1113400004 : ARRAY [100] OF Record "CDC Document Word";
      CaptionEndWord@1113400003 : ARRAY [100] OF Record "CDC Document Word";
      CaptionPage@1113400005 : Record "CDC Document Page";
      CurrPage@1113400017 : Record "CDC Document Page";
      CaptionValue@1113400006 : Record "CDC Document Value";
      CaptionPageNo@1113400001 : Integer;
      CaptionFound@1113400002 : Boolean;
      PageStop@1113400016 : Boolean;
      lFromTopPos@1113400010 : Integer;
      lFromTopPage@1113400009 : Integer;
      lToBottomPos@1113400008 : Integer;
      lToBottomPage@1113400007 : Integer;
      NewBottom@1113400011 : Integer;
      LineNo@1113400012 : Integer;
      LineHeight@1113400013 : Integer;
      Top@1113400014 : Integer;
      Bottom@1113400015 : Integer;
      Right@1113400018 : Integer;
      FieldLeft@1113400019 : Integer;
      FieldWidth@1113400020 : Integer;
      LastFoundLineNo@1000000000 : Integer;
    BEGIN
      //This function will capture the field value based on a column heading, actualy like the default line recognition but filtered on the area between the prev. and next line

      if not Template.Get(TempDocLine."Template No.")then
        exit;

      // Delete old values
      if DocumentValue.Get(TempDocLine."Document No.",true,CurrField.Code,TempDocLine."Line No.") then
        DocumentValue.Delete;

      // Find the Caption position on current or previous pages
      CaptionPageNo := TempDocLine."Page No.";
      repeat
        CaptionFound := GetStartAndEndCaption(CaptionStartWord,CaptionEndWord,CurrField,TempDocLine."Document No.",CaptionPageNo);
        if not CaptionFound then
          CaptionPageNo -= 1;
      until (CaptionPageNo = 0) or CaptionFound;

      if (not CaptionFound) then
        exit;

      CaptionPage.Get(TempDocLine."Document No.",CaptionPageNo);
      GetPositionOfCaption(CaptionPage,CurrField,CaptionStartWord[1],CaptionEndWord[1],CaptionValue,FieldLeft,FieldWidth,Bottom,Top);

      // Get position of next or previous line
      if CurrField."Field Position" = CurrField."Field Position"::StandardLine then begin
        GetRangeToPrevLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos);
        if lFromTopPos > Top then
          Top := lFromTopPos;
      end else begin
        GetRangeToNextLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos);
        Top := lFromTopPos;
      end;

      NewBottom := 0;
      LineNo := 1000 * TempDocLine."Page No.";
      LineHeight := 12;


      Bottom := Top + LineHeight;

      PageStop := false;
      CurrPage.Get(TempDocLine."Document No.",lFromTopPage);
      repeat
        LineNo += 1;
        Right := FieldLeft + FieldWidth;
        NewBottom := CaptureTableCell(Template,Document,CurrPage,CurrField,LineNo,Top,FieldLeft,Bottom,Right);
        if NewBottom > 0 then begin
          if NewBottom > Bottom then
            Bottom := NewBottom;

          if not IsFieldValid(CurrField,Document,LineNo)  then begin
            DocumentValue.Reset;
            DocumentValue.SetRange("Document No.",Document."No.");
            DocumentValue.SetRange("Line No.",LineNo);
            DocumentValue.DeleteAll(true);
          end else begin
            //PageStop := TRUE;
            LastFoundLineNo := LineNo;
            PageStop := CurrField."Field Position" = CurrField."Field Position"::StandardLine;
            if DocumentValue.Get(TempDocLine."Document No.",true,CurrField.Code,LastFoundLineNo) then begin
              DocumentValueBuffer := DocumentValue;
              DocumentValueBuffer.Insert;
              DocumentValue.Delete;
            end;
          end;
        end;

        if not PageStop then begin
          Top := Bottom;
          Bottom := Top + LineHeight;

          if (Bottom > CurrPage."Bottom Word Pos.") and (CurrPage."Page No." < lToBottomPage) then begin
            //New page - some variables must be reset
            CurrPage.Get(CurrPage."Document No.",CurrPage."Page No." + 1);
            CaptionPageNo  := CurrPage."Page No.";
            LineNo := 1000 * CurrPage."Page No.";
            if GetStartAndEndCaption(CaptionStartWord,CaptionEndWord,CurrField,TempDocLine."Document No.",CaptionPageNo) then begin
              CaptionPage.Get(TempDocLine."Document No.",CurrPage."Page No.");
              if GetPositionOfCaption(CaptionPage,CurrField,CaptionStartWord[1],CaptionEndWord[1],CaptionValue,FieldLeft,FieldWidth,Bottom,Top) then begin
                Bottom := Top + LineHeight;
              end;

            end;
          end else
            if (Bottom > CurrPage."Bottom Word Pos.") or ((Bottom > lToBottomPos) and (CurrPage."Page No." = lToBottomPage)) then
              PageStop := true;
        end;
      until PageStop;

      //Zeilennr. speichern
      if DocumentValueBuffer.Get(TempDocLine."Document No.",true,CurrField.Code,LastFoundLineNo) then begin
        DocumentValueNew := DocumentValueBuffer;
        DocumentValueNew."Line No." := TempDocLine."Line No.";
        DocumentValueNew.Insert;
        DocumentValueBuffer.Delete;
        CaptureMgt.UpdateFieldValue(TempDocLine."Document No.",TempDocLine."Page No.",TempDocLine."Line No.",CurrField,DocumentValueNew."Value (Text)",false,false);
      end;
    END;

    [LineStart(218)]
    LOCAL PROCEDURE FindSubstitutionFieldValue@1113400007(VAR TempDocLine@1000000001 : TEMPORARY Record "CDC Temp. Document Line");
    VAR
      TemplateField@1000000000 : Record "CDC Template Field";
      DocumentValue@1113400002 : Record "CDC Document Value";
      SubstitutionDocumentValue@1000000002 : Record "CDC Document Value";
      SubstitutionField@1113400003 : Record "CDC Template Field";
    BEGIN
      // Function goes through all field, setted up with substitution fields.
      // It checks if the value of the current field is empty and updates the value with the value of the substitution field (if exists).
      TemplateField.SetRange("Template No.",TempDocLine."Template No.");
      TemplateField.SetFilter("Substitution Field",'<>%1','');
      if TemplateField.FindSet then
        repeat
          if not DocumentValue.Get(TempDocLine."Document No.",true,TemplateField.Code,TempDocLine."Line No.") then
            if SubstitutionField.Get(TempDocLine."Template No.",SubstitutionField.Type::Line,TemplateField."Substitution Field") then
              if SubstitutionDocumentValue.Get(TempDocLine."Document No.",true,SubstitutionField.Code,TempDocLine."Line No.") then begin
                CaptureMgt.UpdateFieldValue(TempDocLine."Document No.",TempDocLine."Page No.",TempDocLine."Line No.",TemplateField,SubstitutionDocumentValue."Value (Text)",false,false);
                if DocumentValue.Get(TempDocLine."Document No.",true,TemplateField.Code,TempDocLine."Line No.") then begin
                  DocumentValue.Top := SubstitutionDocumentValue.Top;
                  DocumentValue.Bottom := SubstitutionDocumentValue.Bottom;
                  DocumentValue.Left := SubstitutionDocumentValue.Left;
                  DocumentValue.Right := SubstitutionDocumentValue.Right;
                  DocumentValue.Modify;
                end;
              end;
        until TemplateField.Next = 0;
    END;

    [LineStart(239)]
    LOCAL PROCEDURE GetValueFromPreviousValue@1000000004(VAR TempDocLine@1000000001 : TEMPORARY Record "CDC Temp. Document Line");
    VAR
      TemplateField@1000000000 : Record "CDC Template Field";
      DocumentValue@1113400002 : Record "CDC Document Value";
    BEGIN
      // Function goes through all field, setted up with substitution fields.
      // It checks if the value of the current field is empty and updates the value with the value of the substitution field (if exists).
      TemplateField.SetRange("Template No.",TempDocLine."Template No.");
      TemplateField.SetRange("Get Value from Previous Value",true);
      if TemplateField.FindSet then
        repeat
          if not DocumentValue.Get(TempDocLine."Document No.",true,TemplateField.Code,TempDocLine."Line No.") then
            if DocumentValue.Get(TempDocLine."Document No.",true,TemplateField.Code,TempDocLine."Line No."-1) then
              CaptureMgt.UpdateFieldValue(TempDocLine."Document No.",TempDocLine."Page No.",TempDocLine."Line No.",TemplateField,DocumentValue."Value (Text)",false,false);
        until TemplateField.Next = 0;
    END;

    [LineStart(251)]
    LOCAL PROCEDURE GetRangeToNextLine@1113400002(VAR TempDocLine@1000000000 : Record "CDC Temp. Document Line";VAR SearchFromPage@1113400002 : Integer;VAR SearchFromPos@1113400003 : Integer;VAR SearchToPage@1113400000 : Integer;VAR SearchToPos@1113400001 : Integer);
    VAR
      DocumentValue@1000000001 : Record "CDC Document Value";
      CurrPage@1113400004 : Record "CDC Document Page";
      StopPos@1000000002 : ARRAY [100] OF Integer;
    BEGIN
      // This function calculates the range until the next position/line
      Clear(SearchFromPage);
      Clear(SearchFromPos);
      Clear(SearchToPage);
      Clear(SearchToPos);

      with DocumentValue do begin
        SetCurrentKey("Document No.","Is Value",Code,"Line No.");
        SetRange("Document No.",TempDocLine."Document No.");
        SetRange("Is Value",true);
        SetRange(Type,Type::Line);
        SetFilter("Page No.", '>%1',0);

        GetCurrLinePosition(DocumentValue,TempDocLine."Line No.",SearchFromPage, SearchFromPos, SearchToPage, SearchToPos);

        // Filter for next line
        SetRange("Line No.",TempDocLine."Line No." + 1);
        if FindSet then begin
          repeat
            if (SearchToPage < "Page No.") or (SearchToPage = 0)  then begin
              SearchToPage := "Page No.";
              SearchToPos := 0;
            end;

            if SearchToPage = "Page No." then begin
              if (SearchToPos < Bottom) or (SearchToPos = 0) then
                 SearchToPos := Bottom ;
            end;
          until Next = 0;
        end else begin
          // As there is no next line, calculate to next header value or bottom of current page
          SetCurrentKey("Document No.","Is Value",Code,"Line No.");
          SetRange("Document No.",TempDocLine."Document No.");
          SetRange("Is Value",false);
          SetRange(Type,Type::Header);
          SetRange("Page No.",SearchToPage);
          SetFilter(Top,'>%1',SearchToPos);
          SetRange("Line No.", 0);
          if FindSet(false,false) then begin
            if "Page No." > SearchToPage then begin
              SearchToPage := "Page No.";
            end;
            SearchToPos := Top
          end else begin
            SetFilter("Page No.",'>%1',SearchToPage);
            SetRange(Top);
            if FindSet(false,false) then begin
              if "Page No." > SearchToPage then begin
                SearchToPage := "Page No.";
              end;
              SearchToPos := Top
            end else begin
              CurrPage.Get(TempDocLine."Document No.",SearchToPage);
              SearchToPos := CurrPage."Bottom Word Pos.";
            end;
          end;
        end;
      end;

      GetStopLineRecognitionPositions(StopPos,SearchToPage,SearchToPos);
      if (StopPos[SearchToPage]>0) and (StopPos[SearchToPage] <= SearchToPos) then
        SearchToPos := StopPos[SearchToPage];
    END;

    [LineStart(315)]
    LOCAL PROCEDURE GetRangeToPrevLine@1113400009(VAR TempDocLine@1000000000 : Record "CDC Temp. Document Line";VAR RangeTopPage@1113400002 : Integer;VAR RangeTopPos@1113400003 : Integer;VAR RangeBottomPage@1113400000 : Integer;VAR RangeBottomPos@1113400001 : Integer);
    VAR
      DocumentValue@1000000001 : Record "CDC Document Value";
      CurrPage@1113400004 : Record "CDC Document Page";
      CurrLineTopPage@1113400008 : Integer;
      CurrLineTopPos@1113400007 : Integer;
      CurrLineBottomPage@1113400006 : Integer;
      CurrLineBottomPos@1113400005 : Integer;
      PrevLineTopPage@1113400012 : Integer;
      PrevLineTopPos@1113400011 : Integer;
      PrevLineBottomPage@1113400010 : Integer;
      PrevLineBottomPos@1113400009 : Integer;
    BEGIN
      // This function calculates the range until the previous position/line
      Clear(PrevLineTopPage);
      Clear(PrevLineTopPos);
      Clear(PrevLineBottomPage);
      Clear(PrevLineBottomPos);

      with DocumentValue do begin
        SetCurrentKey("Document No.","Is Value",Code,"Line No.");
        SetRange("Document No.",TempDocLine."Document No.");
        SetRange("Is Value",true);
        SetRange(Type,Type::Line);
        SetFilter("Page No.", '>%1',0);

        GetCurrLinePosition(DocumentValue,TempDocLine."Line No.",CurrLineTopPage,CurrLineTopPos,CurrLineBottomPage,CurrLineBottomPos);

        // Filter for Prev line
        SetRange("Line No.",TempDocLine."Line No." - 1);
        if FindSet then begin
          repeat
            if ("Page No." < PrevLineTopPage) or (PrevLineTopPage = 0) then begin
              PrevLineTopPage := "Page No.";
              Clear(PrevLineTopPos);
            end;

            if ("Page No." > PrevLineBottomPage) or (PrevLineBottomPage = 0)  then begin
              PrevLineBottomPage := "Page No.";
              Clear(PrevLineBottomPos);
            end;

            if PrevLineTopPage = "Page No." then
              if (Top < PrevLineTopPos) or (PrevLineTopPos = 0) then
                PrevLineTopPos := Top;

            if PrevLineBottomPage = "Page No." then
              if (Bottom > PrevLineBottomPos) or (PrevLineBottomPos = 0) then
                 PrevLineBottomPos := Bottom ;
          until Next = 0;
        end else begin
          // As there is no Prev line, calculate to Prev header value or bottom of current page
          SetCurrentKey("Document No.","Is Value",Code,"Line No.");
          SetRange("Document No.",TempDocLine."Document No.");
          SetRange("Is Value",false);
          SetRange(Type,Type::Header);
          SetFilter("Page No.",'<=%1',"Page No.");
          SetFilter(Top,'<%1',CurrLineTopPos);
          if FindSet(false,false) then begin
            PrevLineBottomPos := Bottom;
            PrevLineBottomPage := "Page No.";
          end else begin
            PrevLineBottomPos  := 0;
            PrevLineBottomPage := CurrLineTopPage;
          end;
        end;

        RangeTopPage := PrevLineBottomPage;
        RangeBottomPage := CurrLineTopPage;
        RangeTopPos := PrevLineBottomPos + 1;
        //RangeBottomPos := CurrLineTopPos - 1;
        RangeBottomPos := CurrLineBottomPos - 1;
      end;
    END;

    [LineStart(377)]
    LOCAL PROCEDURE GetCurrLinePosition@1000000002(VAR DocumentValue@1000000000 : Record "CDC Document Value";LineNo@1000000001 : Integer;VAR CurrLineTopPage@1000000005 : Integer;VAR CurrLineTopPos@1000000004 : Integer;VAR CurrLineBottomPage@1000000003 : Integer;VAR CurrLineBottomPos@1000000002 : Integer);
    BEGIN
      with DocumentValue do begin
        // Filter for current line
        SetRange("Line No.",LineNo);
        if FindSet then
        repeat
          if MandatoryFieldBuffer.Get(DocumentValue.GetFilter("Document No."),Code) then begin
            if ("Page No." < CurrLineTopPage) or (CurrLineTopPage = 0) then begin
              CurrLineTopPage := "Page No.";
              Clear(CurrLineTopPos);
            end;

            if ("Page No." > CurrLineBottomPage) or (CurrLineBottomPage = 0)  then begin
              CurrLineBottomPage := "Page No.";
              Clear(CurrLineBottomPos);
            end;

            if CurrLineTopPage = "Page No." then
              if (Top < CurrLineTopPos) or (CurrLineTopPos = 0) then
                CurrLineTopPos := Top;

            if CurrLineBottomPage = "Page No." then
              if (Bottom > CurrLineBottomPos) or (CurrLineBottomPos = 0) then
                CurrLineBottomPos := Bottom ;
          end;
        until Next = 0;
      end;
    END;

    [LineStart(405)]
    LOCAL PROCEDURE GetLinePositions@1113400011(DocumentNo@1113400005 : Code[20];LineNo@1113400006 : Integer;VAR CurrLineTopPage@1113400003 : Integer;VAR CurrLineTopPos@1113400002 : Integer;VAR CurrLineBottomPage@1113400001 : Integer;VAR CurrLineBottomPos@1113400000 : Integer;IsValue@1113400007 : Boolean);
    VAR
      DocumentValue@1113400004 : Record "CDC Document Value";
    BEGIN
      //Find next lines top position
      DocumentValue.SetCurrentKey("Document No.","Is Value",Code,"Line No.");
      DocumentValue.SetRange("Document No.",DocumentNo);
      DocumentValue.SetRange("Is Value",IsValue);
      DocumentValue.SetRange(Type,DocumentValue.Type::Line);
      if not IsValue then begin
        DocumentValue.SetRange("Line No.",0);
        DocumentValue.SetRange("Page No.",1);
      end else
        DocumentValue.SetRange("Line No.",LineNo);

      DocumentValue.SetFilter(Top, '>0');

      // Identify current lines outer positions
      if DocumentValue.FindSet then
      repeat
        if (CurrLineTopPage > DocumentValue."Page No.") or (CurrLineTopPage = 0) then
          CurrLineTopPage := DocumentValue."Page No.";
          Clear(CurrLineTopPos);

        if (CurrLineBottomPage < DocumentValue."Page No.") or (CurrLineBottomPage = 0)  then begin
          CurrLineBottomPage := DocumentValue."Page No.";
          Clear(CurrLineBottomPos);
        end;

        if CurrLineTopPage = DocumentValue."Page No." then
          if (CurrLineTopPos > DocumentValue.Top) or (CurrLineTopPos = 0) then
            CurrLineTopPos := DocumentValue.Top;

        if CurrLineBottomPage = DocumentValue."Page No." then
          if (CurrLineBottomPos < DocumentValue.Bottom) or (CurrLineBottomPos = 0) then
             CurrLineBottomPos := DocumentValue.Bottom;
        //END;
      until DocumentValue.Next = 0;
    END;

    [LineStart(441)]
    LOCAL PROCEDURE GetStartAndEndCaption@1160040001(VAR CaptionStartWord@1160040002 : ARRAY [100] OF TEMPORARY Record "CDC Document Word";VAR CaptionEndWord@1160040001 : ARRAY [100] OF TEMPORARY Record "CDC Document Word";Field@1160040000 : Record "CDC Template Field";DocNo@1160040003 : Code[20];PageNo@1160040006 : Integer) : Boolean;
    VAR
      TemplateFieldCaption@1160040005 : Record "CDC Template Field Caption";
      CaptureEngine@1160040004 : Codeunit "CDC Capture Engine";
      PrevCaptionStartWord@1113400000 : Record "CDC Document Word";
    BEGIN
      Clear(CaptionStartWord);
      Clear(CaptionEndWord);

      TemplateFieldCaption.SetRange("Template No.",Field."Template No.");
      TemplateFieldCaption.SetRange(Type,Field.Type);
      TemplateFieldCaption.SetRange(Code,Field.Code);
      if TemplateFieldCaption.FindSet then
        repeat
          if CaptureEngine.FindCaption(DocNo,PageNo,Field,TemplateFieldCaption,CaptionStartWord,CaptionEndWord) then
            exit(true);
        until (TemplateFieldCaption.Next = 0) or ((CaptionStartWord[1].Word <> '') and (CaptionEndWord[1].Word <> ''));
    END;

    [LineStart(454)]
    LOCAL PROCEDURE GetPositionOfCaption@1113400003(CurrPage@1113400004 : Record "CDC Document Page";CaptionTemplateField@1113400001 : Record "CDC Template Field";CaptionStartWord@1113400003 : Record "CDC Document Word";CaptionEndWord@1113400002 : Record "CDC Document Word";DocumentValue@1113400000 : Record "CDC Document Value";VAR FieldLeft@1113400011 : Integer;VAR FieldWidth@1113400010 : Integer;VAR Bottom@1113400009 : Integer;VAR Top@1113400008 : Integer) CaptionValueFound : Boolean;
    VAR
      Template@1113400007 : Record "CDC Template";
      CaptureEngine@1113400006 : Codeunit "CDC Capture Engine";
    BEGIN
      Template.Get(CaptionTemplateField."Template No.");

      //Hole Positionen der caption
        CaptionValueFound := CaptureMgt.CaptureFromPos(CurrPage,CaptionTemplateField,0,false,CaptionStartWord.Top,CaptionStartWord.Left,
          CaptionEndWord.Bottom,CaptionEndWord.Right,DocumentValue) <> '';

        if CaptionValueFound then begin
          FieldLeft := CaptionStartWord.Left +
          Round(CaptionTemplateField."Caption Offset X" * CaptureEngine.GetDPIFactor(CaptionTemplateField."Offset DPI",CurrPage."TIFF Image Resolution"),1);

          if not Template."First Table Line Has Captions" then
            Bottom := CaptionStartWord.Top
          else if CaptionStartWord.Bottom > Bottom then
            Bottom := CaptionStartWord.Bottom;

          if FieldWidth < CaptionEndWord.Right - CaptionStartWord.Left then
            FieldWidth := CaptionEndWord.Right - CaptionStartWord.Left;

          Top := CaptionStartWord.Top;
        end;
    END;

    [LineStart(476)]
    LOCAL PROCEDURE CaptureTableCell@1000000005(VAR Template@161024014 : Record "CDC Template";VAR Document@1000000009 : Record "CDC Document";VAR Page@1000000000 : Record "CDC Document Page";VAR Field@1000000010 : Record "CDC Template Field";LineNo@1000000003 : Integer;Top@1000000007 : Integer;Left@1000000006 : Integer;Bottom@1000000005 : Integer;Right@1000000004 : Integer) : Integer;
    VAR
      Value@1000000008 : Record "CDC Document Value";
    BEGIN
      if (Right - Left <= 0) or (Bottom-Top <= 0) then
        exit;

      CaptureMgt.CaptureFromPos(Page,Field,LineNo,true,Top,Left,Bottom,Right,Value);
      Value.Find('=');

      if (Value.IsBlank) or TableCellAlreadyCaptured(Template,Page,Value) then
        Value.Delete
      else
        exit(Value.Bottom);
    END;

    [LineStart(488)]
    LOCAL PROCEDURE TableCellAlreadyCaptured@1000000007(VAR Template@161024012 : Record "CDC Template";VAR Page@1000000002 : Record "CDC Document Page";VAR Value@1000000000 : Record "CDC Document Value") : Boolean;
    VAR
      Value2@1000000001 : Record "CDC Document Value";
      CaptureEngine@1113400000 : Codeunit "CDC Capture Engine";
    BEGIN
      Value2.SetCurrentKey("Document No.","Is Value",Type,"Page No.");
      if not Template."First Table Line Has Captions" then
        Value2.SetRange("Is Value",true);
      Value2.SetRange("Document No.",Page."Document No.");
      Value2.SetRange(Type,Value2.Type::Line);
      Value2.SetRange("Page No.",Value."Page No.");

      Value.Top := Value.Top + Round((Value.Bottom - Value.Top) / 2,1);
      Value.Left := Value.Left + 3;

      if Value2.FindSet(false,false) then
        repeat
          if (not ((Value2.Code = Value.Code) and (Value2."Line No." = Value."Line No."))) then
            if CaptureEngine.IntersectsWith(Value,Value2) then
              exit(true);
        until Value2.Next = 0;
    END;

    [LineStart(506)]
    LOCAL PROCEDURE IsFieldValid@1113400005(VAR CaptionField@1113400000 : Record "CDC Template Field";Document@1000000001 : Record "CDC Document";LineNo@1000000002 : Integer) : Boolean;
    VAR
      Field@1000000000 : Record "CDC Template Field";
      Value@161024012 : Record "CDC Document Value";
    BEGIN
      case CaptionField."Data Type" of
        Field."Data Type"::Number:
          begin
            if (not CaptionField.Required) then begin
              if Value.Get(Document."No.",true,CaptionField.Code,LineNo) then begin
                if not Value."Is Valid" then begin
                  exit;
                end else begin
                  exit(CaptureMgt.ParseNumber(Field,Value."Value (Text)",Value."Value (Decimal)"));
                end;
              end;
            end;
          end;
        Field."Data Type"::Text:
          if Value.Get(Document."No.",true,CaptionField.Code,LineNo) then begin
            exit(IsValidText(CaptionField, Value."Value (Text)",Document."No."));
          end;
        Field."Data Type"::Date:
          if Value.Get(Document."No.",true,CaptionField.Code,LineNo) then
            exit(IsValidDate(CaptionField, Value."Value (Date)"));
        Field."Data Type"::Lookup:
          if Value.Get(Document."No.",true,CaptionField.Code,LineNo) then
            exit(IsValidLookup(CaptionField, Value."Value (Text)",Document."No."));
      end;
      exit(true);
    END;

    [LineStart(533)]
    LOCAL PROCEDURE FillSortedFieldBuffer@1113400004(VAR TempSortedDocumentField@1113400000 : Record "CDC Temp. Document Field";VAR MandatoryField@1000000000 : Record "CDC Temp. Document Field";TempDocLine@1113400003 : TEMPORARY Record "CDC Temp. Document Line");
    VAR
      TemplateField@1113400001 : Record "CDC Template Field";
    BEGIN
      with TemplateField do begin
        SetRange("Template No.",TempDocLine."Template No.");
        SetRange(Type,Type::Line);
        if FindSet then
          repeat
            if ("Advanced Line Recognition Type" <> "Advanced Line Recognition Type"::Default) and
               (StrLen(Formula)=0) and (StrLen(GetFixedValue)=0)  then
            begin
              TempSortedDocumentField."Document No." := TempDocLine."Document No.";
              TempSortedDocumentField."Sort Order" := Sorting;
              TempSortedDocumentField."Field Code" := Code;
              TempSortedDocumentField.Insert;
            end else begin
              if Required then begin
                MandatoryField."Document No." := TempDocLine."Document No.";
                MandatoryField."Sort Order" := Sorting;
                MandatoryField."Field Code" := Code;
                MandatoryField.Insert;
              end;
            end;
          until Next = 0;
      end;
    END;

    [LineStart(557)]
    LOCAL PROCEDURE GetStopLineRecognitionPositions@1000000001(VAR StopPos@1000000003 : ARRAY [100] OF Integer;CurrPageNo@1000000002 : Integer;Bottom@1000000004 : Integer);
    VAR
      Field@1000000000 : Record "CDC Template Field";
      Value@1000000001 : Record "CDC Document Value";
    BEGIN
      Field.Reset;
      Field.SetCurrentKey("Template No.",Type,"Sort Order");
      Field.SetRange("Template No.",Document."Template No.");
      Field.SetRange(Type,Field.Type::Header);
      Field.SetFilter("Stop Lines Recognition",'>%1',Field."Stop Lines Recognition"::" ");
      if Field.FindSet then
        repeat
          Value.Reset;
          Value.SetRange("Document No.",Document."No.");
          Value.SetRange(Type,Field.Type);
          Value.SetRange(Code,Field.Code);
          Value.SetRange("Page No.",CurrPageNo);

          case Field."Stop Lines Recognition" of
            Field."Stop Lines Recognition"::"If Caption is on same line",
            Field."Stop Lines Recognition"::"If Caption is on same line (continue on next page)":
              Value.SetRange("Is Value",false);
            Field."Stop Lines Recognition"::"If Value is on same line",
            Field."Stop Lines Recognition"::"If Value is on same line (continue on next page)":
              Value.SetRange("Is Value",true);
            Field."Stop Lines Recognition"::"If Caption or Value is on same line",
            Field."Stop Lines Recognition"::"If Caption or Value is on same line (continue on next page)":
              Value.SetRange("Is Value");
          end;

          Value.SetFilter(Top,'>%1',0);
          if Value.FindFirst then begin
            if (StopPos[Value."Page No."] = 0) or (StopPos[Value."Page No."] > Value.Top) then
              if (not (Value.Left = Value.Right) and (Value.Bottom = Value.Top)) then
                StopPos[Value."Page No."] := Value.Top;
          end;
        until Field.Next = 0;
    END;

    [LineStart(591)]
    LOCAL PROCEDURE CleanupPrevValues@100000000();
    VAR
      DocumentValue@100000000 : Record "CDC Document Value";
    BEGIN
      DocumentValue.SetRange("Document No.",Document."No.");
      DocumentValue.SetRange(Type,DocumentValue.Type::Line);
      DocumentValue.DeleteAll;
    END;

    [LineStart(596)]
    LOCAL PROCEDURE CleanupTempValues@1160040000();
    VAR
      DocumentValue@1160040000 : Record "CDC Document Value";
    BEGIN
      // Clean up temporary created values
      DocumentValue.SetRange("Document No.",Document."No.");
      DocumentValue.SetRange(Type,DocumentValue.Type::Line);
      DocumentValue.SetFilter("Line No.",'1000..');
      DocumentValue.DeleteAll;
    END;

    [LineStart(603)]
    LOCAL PROCEDURE "--CopiesFromCaptureManagement--"@1160040009();
    BEGIN
      // The following functions are a copy of the same functions in the Capture Management Codeunit, where they are defined as "local"
    END;

    [LineStart(606)]
    LOCAL PROCEDURE IsValidNumber@6085574(VAR Field@6085575 : Record "CDC Template Field";Number@6085574 : Decimal) : Boolean;
    VAR
      FieldRule@6085576 : Record "CDC Template Field Rule";
      TempTemplateField@6085573 : TEMPORARY Record "CDC Template Field";
    BEGIN
      if Field."Codeunit ID: Capture Value" <> 0 then
        exit(TestCaptureValue(Field,FieldRule,Format(Number)));

      if (Number = 0) and Field.Required then
        exit(false);

      CaptureMgt.FilterRule(Field,FieldRule);

      TempTemplateField."Fixed Value (Decimal)" := Number;
      TempTemplateField.Insert;

      if FieldRule.FindSet then
        repeat
          if FieldRule.Rule <> '' then begin
            TempTemplateField.SetFilter("Fixed Value (Decimal)",FieldRule.Rule);
            if TempTemplateField.IsEmpty then
              exit(false);
          end;
        until FieldRule.Next = 0;

      exit(true);
    END;

    [LineStart(629)]
    LOCAL PROCEDURE IsValidDate@1000000014(VAR Field@1000000001 : Record "CDC Template Field";Date@1000000000 : Date) : Boolean;
    VAR
      FieldRule@161024012 : Record "CDC Template Field Rule";
    BEGIN
      if Field."Codeunit ID: Capture Value" <> 0 then
        exit(TestCaptureValue(Field,FieldRule,Format(Date)));

      if (Date = 0D) then
        exit(not Field.Required);

      if Format(Field."Validation Dateformula From") <> '' then
        if Date < CalcDate(Field."Validation Dateformula From",Today) then
          exit(false);

      if Format(Field."Validation Dateformula To") <> '' then
        if Date > CalcDate(Field."Validation Dateformula To",Today) then
          exit(false);

      if Date < 17540101D then
        exit(false);

      exit(true);
    END;

    [LineStart(649)]
    LOCAL PROCEDURE IsValidText@1000000015(VAR Field@1000000001 : Record "CDC Template Field";Text@1000000000 : Text[250];DocumentNo@6085573 : Code[20]) : Boolean;
    VAR
      FieldRule@1000000004 : Record "CDC Template Field Rule";
      TempValue@161024012 : TEMPORARY Record "CDC Document Value";
      RegEx@1000000003 : Codeunit "CDC RegEx Management";
      IsValid@1000000002 : Boolean;
    BEGIN
      Text := UpperCase(Text);

      if Field."Codeunit ID: Capture Value" <> 0 then
        if TestCaptureValue(Field,FieldRule,Text) then
          exit(true);

      CaptureMgt.FilterRule(Field,FieldRule);
      if not FieldRule.FindFirst then
        exit((Text <> '') or (not Field.Required));

      if Text = '' then
        exit(not Field.Required);

      TempValue."Value (Text)" := Text;
      TempValue.Insert;

      repeat
        FieldRule.Rule := UpperCase(FieldRule.Rule);
        if (StrPos(FieldRule.Rule,'<') <> 0) or
          (StrPos(FieldRule.Rule,'>') <> 0) or
          (StrPos(FieldRule.Rule,'|') <> 0) or
          (StrPos(FieldRule.Rule,'*') <> 0) or
          (StrPos(FieldRule.Rule,'&') <> 0)
        then begin
          TempValue.SetFilter("Value (Text)",FieldRule.Rule);
          IsValid := not TempValue.IsEmpty;
        end else begin
          if RegEx.IsMatch(Text,FieldRule.Rule) then begin
            if Field."Codeunit ID: Capture Value" <> 0 then
              IsValid := TestCaptureValue(Field,FieldRule,Text)
            else
              IsValid := true;

            if IsValid and Field."Enable Rule Generation" then begin
              ClearFldRuleCreatedFromMaster(FieldRule,DocumentNo);

              // Several rules could have been copied from the master template. Delete these when a rule matches the found value
              DelFldRulesCreatedFromMaster(FieldRule."Entry No.");
            end;
          end;
        end;
      until (FieldRule.Next = 0) or (IsValid);

      exit(IsValid);
    END;

    [LineStart(695)]
    LOCAL PROCEDURE IsValidLookup@1000000031(Field@1000000001 : Record "CDC Template Field";Value@1160040000 : Text[250];DocumentNo@6085573 : Code[20]) : Boolean;
    VAR
      RecIDMgt@1160040001 : Codeunit "CDC Record ID Mgt.";
    BEGIN
      exit(IsValidText(Field,Value,DocumentNo));
    END;

    [LineStart(698)]
    PROCEDURE IsValidValue@1000000019(VAR Field@1000000001 : Record "CDC Template Field";DocumentNo@1000000000 : Code[20];LineNo@1000000004 : Integer) : Boolean;
    VAR
      Value@1000000002 : Record "CDC Document Value";
      DocComment@6085290 : Record "CDC Document Comment";
    BEGIN
      if not Value.Get(DocumentNo,true,Field.Code,LineNo) then begin
        if Field.Code = 'GLACCOUNTNO' then begin
          DocComment.Reset;
          DocComment.SetRange("Field Code",Field.Code);
          DocComment.SetRange("Document No.",DocumentNo);
          DocComment.SetRange("Line No.",LineNo);
          DocComment.SetRange("Template No.",Field."Template No.");
          DocComment.SetRange(Area,DocComment.Area::Validation);
          DocComment.SetRange("Comment Type",DocComment."Comment Type"::Error);
          if not DocComment.IsEmpty then
            exit(false);
        end;
        exit(not Field.Required);
      end;

      exit(Value."Is Valid");
    END;

    [LineStart(716)]
    LOCAL PROCEDURE IsValidBoolean@1160040016(VAR Field@1000000001 : Record "CDC Template Field";Boolean@1000000000 : Boolean) : Boolean;
    BEGIN
      exit(true);
    END;

    [LineStart(719)]
    LOCAL PROCEDURE TestCaptureValue@161024017(Field@161024012 : Record "CDC Template Field";Rule@161024013 : Record "CDC Template Field Rule";Value@161024014 : Text[1024]) : Boolean;
    VAR
      TempCaptureFieldVal@161024015 : Record "CDC Temp. Capture Field Valid.";
    BEGIN
      TempCaptureFieldVal."Field Type" := Field.Type;
      TempCaptureFieldVal."Field Code" := Field.Code;
      TempCaptureFieldVal."File Rule Entry No." := Rule."Entry No.";
      TempCaptureFieldVal.Rule := Rule.Rule;
      TempCaptureFieldVal.Value := Value;
      CODEUNIT.Run(Field."Codeunit ID: Capture Value",TempCaptureFieldVal);
      exit(TempCaptureFieldVal."Is Valid");
    END;

    [LineStart(728)]
    LOCAL PROCEDURE ClearFldRuleCreatedFromMaster@6085577(VAR FieldRule@6085573 : Record "CDC Template Field Rule";DocumentNo@6085574 : Code[20]);
    BEGIN
      if FieldRule."Created from Master Template" then begin
        FieldRule."Created from Master Template" := false;
        FieldRule."Document No." := DocumentNo;
        FieldRule.Modify(true);
      end;
    END;

    [LineStart(735)]
    LOCAL PROCEDURE DelFldRulesCreatedFromMaster@6085579(SkipEntryNo@6085574 : Integer);
    VAR
      FieldRule@6085573 : Record "CDC Template Field Rule";
    BEGIN
      FieldRule.SetRange("Created from Master Template",true);
      FieldRule.SetFilter("Entry No.",'<>%1',SkipEntryNo);
      if not FieldRule.IsEmpty then
        FieldRule.DeleteAll(true);
    END;

    [Integration(TRUE)]
    [LineStart(741)]
    LOCAL PROCEDURE OnAfterStandardLineRecognition@1160040002(VAR Document@1160040000 : Record "CDC Document";VAR Handled@1160040001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

