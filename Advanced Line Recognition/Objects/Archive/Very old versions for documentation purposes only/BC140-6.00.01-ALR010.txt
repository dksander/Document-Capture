OBJECT Table 6085580 CDC Template Field
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=DCW13.70.00.6.00,ALR010;
  }
  PROPERTIES
  {
    DataCaptionFields=Type,Code,Field Name;
    OnInsert=VAR
               Template@1000000000 : Record 6085579;
             BEGIN
               IF "Language Code" = '' THEN BEGIN
                 Template.GET("Template No.");
                 "Language Code" := Template."Language Code";
               END;

               "Source Table Filter GUID" := CREATEGUID;
               SetOrderRecords;
             END;

    OnDelete=VAR
               TemplField@161024012 : Record 6085580;
               Rule@1000000002 : Record 6085583;
               Caption@1000000000 : Record 6085581;
               Translation@1000000001 : Record 6085582;
               DataTransl@1160040001 : Record 6085584;
               RecIDMgt@1160040000 : Codeunit 6085604;
             BEGIN
               IF ("G/L Account Field Code" <> '') AND ("G/L Account Field Code" <> Code) THEN BEGIN
                 TemplField.SETRANGE("Template No.","Template No.");
                 TemplField.SETRANGE(Type,Type);
                 TemplField.SETRANGE("G/L Account Field Code","G/L Account Field Code");
                 IF TemplField.COUNT = 1 THEN
                   IF TemplField.GET("Template No.",Type,"G/L Account Field Code") THEN
                     TemplField.DELETE(TRUE);
               END;

               Rule.SETRANGE("Template No.","Template No.");
               Rule.SETRANGE(Type,Type);
               Rule.SETRANGE(Code,Code);
               Rule.DELETEALL(TRUE);

               Caption.SETRANGE("Template No.","Template No.");
               Caption.SETRANGE(Type,Type);
               Caption.SETRANGE(Code,Code);
               Caption.DELETEALL(TRUE);

               Translation.SETRANGE("Template No.","Template No.");
               Translation.SETRANGE(Type,Type);
               Translation.SETRANGE(Code,Code);
               Translation.DELETEALL(TRUE);

               DataTransl.SETRANGE("Template No.","Template No.");
               DataTransl.SETRANGE(Type,Type);
               DataTransl.SETRANGE("Field Code",Code);
               DataTransl.DELETEALL(TRUE);

               RecIDMgt.DeleteTableFilter("Source Table Filter GUID");
             END;

    CaptionML=[DEU=Vorlagenfeld;
               ENU=Template Field];
    LookupPageID=Page6085602;
    DrillDownPageID=Page6085602;
  }
  FIELDS
  {
    { 1   ;   ;Template No.        ;Code20        ;TableRelation="CDC Template";
                                                   CaptionML=[DEU=Vorlagennr.;
                                                              ENU=Template No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Type                ;Option        ;CaptionML=[DEU=Art;
                                                              ENU=Type];
                                                   OptionCaptionML=[DEU=Kopf,Zeile;
                                                                    ENU=Header,Line];
                                                   OptionString=Header,Line }
    { 3   ;   ;Code                ;Code20        ;CaptionML=[DEU=Code;
                                                              ENU=Code];
                                                   NotBlank=Yes }
    { 4   ;   ;Data Type           ;Option        ;OnValidate=VAR
                                                                GLSetup@161024012 : Record 98;
                                                                Template@161024013 : Record 6085579;
                                                              BEGIN
                                                                SetFixedValue('');

                                                                IF "Data Type" <> "Data Type"::Lookup THEN
                                                                  VALIDATE("Source Table No.",0);

                                                                IF "Data Type" = "Data Type"::Number THEN BEGIN
                                                                  GLSetup.GET;
                                                                  VALIDATE("Decimal Places",GLSetup."Amount Decimal Places");
                                                                  VALIDATE("Blank Zero",TRUE);
                                                                END;

                                                                IF "Data Type" = "Data Type"::Date THEN BEGIN
                                                                  Template.GET("Template No.");
                                                                  "Date Format" := Template."Date Format" + 1;
                                                                END;

                                                                IF NOT ("Data Type" IN ["Data Type"::Text,"Data Type"::Date]) THEN
                                                                  "Enable Rule Generation" := FALSE;
                                                              END;

                                                   CaptionML=[DEU=Datentyp;
                                                              ENU=Data Type];
                                                   OptionCaptionML=[DEU=Text,Nummer,Datum,Boolesch,,,,,Lookup;
                                                                    ENU=Text,Number,Date,Boolean,,,,,Lookup];
                                                   OptionString=Text,Number,Date,Boolean,,,,,Lookup }
    { 5   ;   ;Required            ;Boolean       ;CaptionML=[DEU=Erforderlich;
                                                              ENU=Required] }
    { 6   ;   ;Search for Value    ;Boolean       ;CaptionML=[DEU=Nach Wert suchen;
                                                              ENU=Search for Value] }
    { 7   ;   ;Caption Is Part Of Value;Boolean   ;CaptionML=[DEU=Suchtext ist Teil des Wertes;
                                                              ENU=Caption Is Part Of Value] }
    { 8   ;   ;Insert on new Templates;Boolean    ;InitValue=Yes;
                                                   CaptionML=[DEU=In neue Vorlage einfÅgen;
                                                              ENU=Insert on new Templates] }
    { 9   ;   ;Number Has Decimals ;Boolean       ;CaptionML=[DEU=Zahl enthÑlt Dezimalstellen;
                                                              ENU=Number Has Decimals] }
    { 10  ;   ;Caption Offset X    ;Integer       ;CaptionML=[DEU=Suchtext Offset X;
                                                              ENU=Caption Offset X] }
    { 11  ;   ;Caption Offset Y    ;Integer       ;CaptionML=[DEU=Suchtext Offset Y;
                                                              ENU=Caption Offset Y] }
    { 12  ;   ;Fixed Value (Text)  ;Text250       ;CaptionML=[DEU=Fester Wert (Text);
                                                              ENU=Fixed Value (Text)] }
    { 13  ;   ;Fixed Value (Decimal);Decimal      ;CaptionML=[DEU=Fester Wert (Dezimal);
                                                              ENU=Fixed Value (Decimal)] }
    { 14  ;   ;Fixed Value (Date)  ;Date          ;CaptionML=[DEU=Fester Wert (Datum);
                                                              ENU=Fixed Value (Date)] }
    { 15  ;   ;Fixed Value (Lookup);Code20        ;TableRelation=IF (Lookup Table=CONST(Vendor)) Vendor
                                                                 ELSE IF (Lookup Table=CONST(Contact)) Contact
                                                                 ELSE IF (Lookup Table=CONST(Customer)) Customer
                                                                 ELSE IF (Lookup Table=CONST(Job)) Job
                                                                 ELSE IF (Lookup Table=CONST(Item)) Item
                                                                 ELSE IF (Lookup Table=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Lookup Table=CONST(Employee)) Employee
                                                                 ELSE IF (Lookup Table=CONST(Dimension Value)) "Dimension Value".Code WHERE (Dimension Code=FIELD(Lookup Rel. Code));
                                                   CaptionML=[DEU=Fester Wert (Lookup);
                                                              ENU=Fixed Value (Lookup)] }
    { 17  ;   ;Validation Dateformula From;DateFormula;
                                                   CaptionML=[DEU=Validierung Datumsformel von;
                                                              ENU=Validation Dateformula From] }
    { 18  ;   ;Validation Dateformula To;DateFormula;
                                                   CaptionML=[DEU=Validierung Datumsformel bis;
                                                              ENU=Validation Dateformula To] }
    { 19  ;   ;Never use Global Captions;Boolean  ;InitValue=Yes;
                                                   CaptionML=[DEU=Globale Suchtexte nie benutzen;
                                                              ENU=Never use Global Captions];
                                                   Description=Deprecated NAV }
    { 20  ;   ;Decimal Places      ;Code10        ;CaptionML=[DEU=Dezimalstellen;
                                                              ENU=Decimal Places] }
    { 21  ;   ;Blank Zero          ;Boolean       ;CaptionML=[DEU=Blank Zero;
                                                              ENU=Blank Zero] }
    { 22  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[DEU=Sprachcode;
                                                              ENU=Language Code] }
    { 23  ;   ;Enable Rule Generation;Boolean     ;OnValidate=BEGIN
                                                                IF "Enable Rule Generation" THEN
                                                                  IF NOT ("Data Type" IN ["Data Type"::Text,"Data Type"::Date]) THEN
                                                                    ERROR(EnableRuleActivateErr,FIELDCAPTION("Enable Rule Generation"),"Data Type"::Text,"Data Type"::Date);
                                                              END;

                                                   CaptionML=[DEU=Regelerzeugung aktivieren;
                                                              ENU=Enable Rule Generation] }
    { 24  ;   ;Multiline           ;Boolean       ;CaptionML=[DEU=Mehrzeilig;
                                                              ENU=Multiline] }
    { 25  ;   ;Default Page Source ;Option        ;CaptionML=[DEU=Vorgabe Seitenherkunft;
                                                              ENU=Default Page Source];
                                                   OptionCaptionML=[DEU=Erste Seite,Letzte Seite;
                                                                    ENU=First Page,Last Page];
                                                   OptionString=First Page,Last Page }
    { 26  ;   ;Auto Update Caption ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[DEU=Suchtext autom. aktualisieren;
                                                              ENU=Auto Update Caption] }
    { 27  ;   ;Typical Field Width ;Decimal       ;CaptionML=[DEU=Typische Feldbreite;
                                                              ENU=Field Width];
                                                   DecimalPlaces=0:5 }
    { 28  ;   ;Auto Update Field Width;Boolean    ;InitValue=Yes;
                                                   CaptionML=[DEU=Feldbreite automatisch aktualisieren;
                                                              ENU=Auto Update Field Width];
                                                   Description=Deprecated NAV }
    { 29  ;   ;Typical Field Height;Decimal       ;CaptionML=[DEU=Typische Feldhîhe;
                                                              ENU=Field Height];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Auto Update Field Height;Boolean   ;InitValue=Yes;
                                                   CaptionML=[DEU=Feldhîhe automatisch aktualisieren;
                                                              ENU=Auto Update Field Height];
                                                   Description=Deprecated NAV }
    { 31  ;   ;Sort Order          ;Integer       ;CaptionML=[DEU=Sortierung;
                                                              ENU=Sort Order] }
    { 32  ;   ;Field Name          ;Text50        ;CaptionML=[DEU=Feldname;
                                                              ENU=Field Name] }
    { 33  ;   ;Stop Lines Recognition;Option      ;CaptionML=[DEU=Zeilenerkennung stoppen;
                                                              ENU=Stop Lines Recognition];
                                                   OptionCaptionML=[DEU=" ,Falls die Caption in der gleichen Zeile ist,Falls der Wert in der gleichen Zeile ist,Falls die Caption oder der Wert in der gleichen Zeile ist,Falls die Caption in der gleichen Zeile ist (weiter auf nÑchster Seite),Falls der Wert in der gleichen Zeile ist (weiter auf nÑchster Seite),Falls die Caption oder der Wert in der gleichen Zeile ist (weiter auf nÑchster Seite)";
                                                                    ENU=" ,If Caption is on same line,If Value is on same line,If Caption or Value is on same line,If Caption is on same line (continue on next page),If Value is on same line (continue on next page),If Caption or Value is on same line (continue on next page)"];
                                                   OptionString=[ ,If Caption is on same line,If Value is on same line,If Caption or Value is on same line,If Caption is on same line (continue on next page),If Value is on same line (continue on next page),If Caption or Value is on same line (continue on next page)] }
    { 34  ;   ;Make Absolute Number;Boolean       ;CaptionML=[DEU=Absolutbetrag erzeugen;
                                                              ENU=Make Absolute Number] }
    { 37  ;   ;Lookup Table        ;Option        ;CaptionML=[DEU=Lookup Tabelle;
                                                              ENU=Lookup Table];
                                                   OptionCaptionML=[DEU=" ,Kreditor,Kontakt,Debitor,Projekt,Artikel,Anlage,Mitarbeiter,Dimensionswert";
                                                                    ENU=" ,Vendor,Contact,Customer,Job,Item,Fixed Asset,Employee,Dimension Value"];
                                                   OptionString=[ ,Vendor,Contact,Customer,Job,Item,Fixed Asset,Employee,Dimension Value] }
    { 38  ;   ;Lookup Rel. Code    ;Code20        ;TableRelation=IF (Lookup Table=CONST(Dimension Value)) Dimension;
                                                   CaptionML=[DEU=Relation Code;
                                                              ENU=Relation Code] }
    { 39  ;   ;Codeunit ID: Is OK  ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[DEU=Codeunit ID: Ist OK;
                                                              ENU=Codeunit ID: Is OK];
                                                   BlankZero=Yes }
    { 41  ;   ;Codeunit ID: Lookup ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[DEU=Codeunit ID: Lookup;
                                                              ENU=Codeunit ID: Lookup];
                                                   BlankZero=Yes }
    { 43  ;   ;Codeunit ID: Validate;Integer      ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[DEU=Codeunit ID: Validate;
                                                              ENU=Codeunit ID: Validate];
                                                   BlankZero=Yes }
    { 45  ;   ;Formula             ;Code250       ;OnValidate=VAR
                                                                CaptureMgt@1160040000 : Codeunit 6085576;
                                                                WebClientManagement@6085574 : Codeunit 6085662;
                                                                TempDec@6085573 : Decimal;
                                                              BEGIN
                                                                IF Formula = '' THEN BEGIN
                                                                  SetFixedValue(Formula);
                                                                  EXIT;
                                                                END;

                                                                IF ("Data Type" = "Data Type"::Number) AND NOT WebClientManagement.IsWebClient THEN BEGIN
                                                                  CaptureMgt.ValidateNumberFormula("Template No.",Formula);
                                                                  IF EVALUATE(TempDec,Formula) THEN BEGIN
                                                                    SetFixedValue(Formula);
                                                                    Formula := '';
                                                                  END ELSE
                                                                    SetFixedValue('');
                                                                END ELSE
                                                                  IF CaptureMgt.ValidateTextFormula("Template No.",Formula) THEN BEGIN
                                                                    SetFixedValue(Formula);
                                                                    Formula := '';
                                                                  END ELSE
                                                                    SetFixedValue('');

                                                                "Search for Value" := FALSE;
                                                              END;

                                                   CaptionML=[DEU=Formel;
                                                              ENU=Formula] }
    { 46  ;   ;G/L Account Field Code;Code20      ;TableRelation="CDC Template Field".Code WHERE (Template No.=FIELD(Template No.),
                                                                                                  Type=CONST(Header),
                                                                                                  Data Type=CONST(Text));
                                                   OnLookup=VAR
                                                              TemplateField@6085573 : Record 6085580;
                                                            BEGIN
                                                              TemplateField.FILTERGROUP(4);
                                                              TemplateField.SETRANGE("Template No.","Template No.");
                                                              TemplateField.SETRANGE(Type,TemplateField.Type::Header);
                                                              TemplateField.SETRANGE("Data Type",TemplateField."Data Type"::Text);
                                                              TemplateField.FILTERGROUP(0);
                                                              IF TemplateField.GET("Template No.",TemplateField.Type::Header,"G/L Account Field Code") THEN;
                                                              IF PAGE.RUNMODAL(0,TemplateField) = ACTION::LookupOK THEN
                                                                "G/L Account Field Code" := TemplateField.Code;
                                                            END;

                                                   CaptionML=[DEU=Konto Feldcode;
                                                              ENU=G/L Account Field Code] }
    { 47  ;   ;Transfer Amount to Document;Option ;CaptionML=[DEU=Betrag an Beleg Åbertragen;
                                                              ENU=Transfer Amount to Document];
                                                   OptionCaptionML=[DEU=" ,falls Zeilen nicht erkannt wurden,Immer";
                                                                    ENU=" ,If lines are not recognised,Always"];
                                                   OptionString=[ ,If lines are not recognised,Always] }
    { 48  ;   ;Subtract from Amount Field;Code20  ;TableRelation="CDC Template Field".Code WHERE (Template No.=FIELD(Template No.),
                                                                                                  Type=FIELD(Type),
                                                                                                  Transfer Amount to Document=FILTER(<>' '));
                                                   OnValidate=BEGIN
                                                                IF "Subtract from Amount Field" = Code THEN
                                                                  ERROR(Text003);
                                                              END;

                                                   CaptionML=[DEU=Betrag bei Registrierung abziehen von;
                                                              ENU=Subtract from Amount Field (on registration)] }
    { 49  ;   ;Codeunit ID: Capture Value;Integer ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[DEU=Codeunit ID: Capture Wert;
                                                              ENU=Codeunit ID: Capture Value];
                                                   BlankZero=Yes }
    { 51  ;   ;Purch. Alloc. G/L Account No.;Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=[DEU=Eink. Zuordnungssachkonto;
                                                              ENU=Purch. Alloc. G/L Account No.] }
    { 52  ;   ;Date Format         ;Option        ;CaptionML=[DEU=Datumsformat;
                                                              ENU=Date Format];
                                                   OptionCaptionML=[DEU=" ,Tag / Monat / Jahr,Monat / Tag / Jahr,Jahr / Tag / Monat,Jahr / Monat / Tag,Tag / Jahr / Monat,Monat / Jahr / Tag";
                                                                    ENU=" ,Day / Month / Year,Month / Day / Year,Year / Day / Month,Year / Month / Day,Day / Year / Month,Month / Year / Day"];
                                                   OptionString=[ ,Day / Month / Year,Month / Day / Year,Year / Day / Month,Year / Month / Day,Day / Year / Month,Month / Year / Day] }
    { 53  ;   ;Source Table No.    ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=VAR
                                                                RecIDMgt@1160040000 : Codeunit 6085604;
                                                                DCLogMgt@1000 : Codeunit 6085658;
                                                              BEGIN
                                                                IF "Source Table No." <> 0 THEN
                                                                  TESTFIELD("Data Type","Data Type"::Lookup);

                                                                DCLogMgt.IsLogActive2("Source Table No.",TRUE);

                                                                IF "Source Table No." = xRec."Source Table No." THEN
                                                                  EXIT;

                                                                RecIDMgt.CheckDocValue(Type = Type::Line,Code,"Template No.",FIELDCAPTION("Source Table No."));
                                                                RecIDMgt.DeleteTableFilter("Source Table Filter GUID");
                                                                CLEAR("Source Table Filter GUID");
                                                                "Fixed Value (Rec. ID Tree ID)" := 0;
                                                                "Source Field No." := RecIDMgt.GetFirstKeyField("Source Table No.");
                                                              END;

                                                   CaptionML=[DEU=Herkunftstabellennr.;
                                                              ENU=Source Table No.];
                                                   BlankZero=Yes }
    { 55  ;   ;Source Table Filter GUID;GUID      ;CaptionML=[DEU=Herkunftsfeldfilter GUID;
                                                              ENU=Source Table Filter GUID] }
    { 56  ;   ;Source Field No.    ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Source Table No.));
                                                   OnValidate=VAR
                                                                RecIDMgt@1160040000 : Codeunit 6085604;
                                                              BEGIN
                                                                IF "Source Field No." = xRec."Source Field No." THEN
                                                                  EXIT;

                                                                IF xRec."Source Field No." > 0 THEN
                                                                  RecIDMgt.CheckDocValue(Type = Type::Line,Code,"Template No.",FIELDCAPTION("Source Field No."));

                                                                IF NOT RecIDMgt.PartOfKey("Source Table No.","Source Field No.") THEN
                                                                  ERROR(Text005,FIELDCAPTION("Source Field No."),FIELDCAPTION("Source Table No."));
                                                              END;

                                                   CaptionML=[DEU=Herkunftsfeldnr.;
                                                              ENU=Source Field No.];
                                                   BlankZero=Yes }
    { 57  ;   ;Destination Header Field No.;Integer;
                                                   TableRelation=Field.No.;
                                                   OnValidate=VAR
                                                                Template@1160040001 : Record 6085579;
                                                                Field@161024013 : Record 2000000041;
                                                                DocCat@161024012 : Record 6085575;
                                                                RecIDMgt@1160040000 : Codeunit 6085604;
                                                              BEGIN
                                                                IF ("Destination Header Field No." = xRec."Destination Header Field No.") OR ("Destination Header Field No." = 0) THEN
                                                                  EXIT;

                                                                Template.GET("Template No.");
                                                                DocCat.GET(Template."Category Code");
                                                                DocCat.TESTFIELD("Destination Header Table No.");

                                                                Field.GET(DocCat."Destination Header Table No.","Destination Header Field No.");
                                                                Field.TESTFIELD(Enabled);
                                                                Field.TESTFIELD(Class,Field.Class::Normal);
                                                              END;

                                                   CaptionML=[DEU=Feldnr.  Zielkopf;
                                                              ENU=Destination Header Field No.];
                                                   BlankZero=Yes }
    { 58  ;   ;No. of Source Table Filters;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("CDC Table Filter Field" WHERE (Table Filter GUID=FIELD(Source Table Filter GUID)));
                                                   CaptionML=[DEU=Anzahl von Herkunftstabellenfiltern;
                                                              ENU=No. of Source Table Filters];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 59  ;   ;Fixed Value (Rec. ID Tree ID);Integer;
                                                   TableRelation="CDC Record ID Tree";
                                                   CaptionML=[DEU=Fester Wert (Datensatz-ID Baum-ID);
                                                              ENU=Fixed Value (Rec. ID Tree ID)] }
    { 60  ;   ;Destination Line Field No.;Integer ;TableRelation=Field.No.;
                                                   OnValidate=VAR
                                                                Template@1160040001 : Record 6085579;
                                                                Field@161024013 : Record 2000000041;
                                                                DocCat@161024012 : Record 6085575;
                                                                RecIDMgt@1160040000 : Codeunit 6085604;
                                                              BEGIN
                                                                IF ("Destination Line Field No." = xRec."Destination Line Field No.") OR ("Destination Line Field No." = 0) THEN
                                                                  EXIT;

                                                                Template.GET("Template No.");
                                                                DocCat.GET(Template."Category Code");
                                                                DocCat.TESTFIELD("Destination Line Table No.");

                                                                Field.GET(DocCat."Destination Line Table No.","Destination Line Field No.");
                                                                Field.TESTFIELD(Enabled);
                                                                Field.TESTFIELD(Class,Field.Class::Normal);
                                                              END;

                                                   CaptionML=[DEU=Feldnr. Zielzeile;
                                                              ENU=Destination Line Field No.];
                                                   BlankZero=Yes }
    { 61  ;   ;Delete Blanks       ;Boolean       ;CaptionML=[DEU=Leerzeichen lîschen;
                                                              ENU=Delete Blanks] }
    { 62  ;   ;Caption Mandatory   ;Boolean       ;CaptionML=[DEU=Suchtext notwendig;
                                                              ENU=Caption Mandatory] }
    { 63  ;   ;Use as Doc. Separator;Boolean      ;OnValidate=BEGIN
                                                                IF NOT "Use as Doc. Separator" THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Header);
                                                              END;

                                                   CaptionML=[DEU=Als Belegtrenner verwenden;
                                                              ENU=Use as Document Separator] }
    { 64  ;   ;Fixed Value (Boolean);Boolean      ;CaptionML=[DEU=Fester Wert (Boolesch);
                                                              ENU=Fixed Value (Boolean)] }
    { 65  ;   ;Offset DPI          ;Integer       ;CaptionML=[DEU=Offset DPI;
                                                              ENU=Offset DPI] }
    { 66  ;   ;Typical Field DPI   ;Integer       ;CaptionML=[DEU=Typische Feld DPI;
                                                              ENU=Typical Field DPI] }
    { 67  ;   ;Transfer Blank Values;Boolean      ;CaptionML=[DEU=Leere Werte Åbertragen;
                                                              ENU=Transfer Blank Values] }
    { 100 ;   ;XML Path            ;Text250       ;OnValidate=VAR
                                                                XmlLibrary@1000 : Codeunit 6085573;
                                                              BEGIN
                                                                XmlLibrary.FormatXmlPath("XML Path");
                                                                "XML Path" := XmlLibrary.StripHeaderLineTag(Rec,"XML Path");
                                                              END;

                                                   CaptionML=[DEU=XML-Pfad;
                                                              ENU=XML Path] }
    { 101 ;   ;Change Sign         ;Boolean       ;CaptionML=[DEU=Vorzeichen Ñndern;
                                                              ENU=Change Sign] }
    { 102 ;   ;Show Field          ;Option        ;CaptionML=[DEU=Feld anzeigen;
                                                              ENU=Show Field];
                                                   OptionCaptionML=[DEU=Nie,Wenn ein Wert existiert,Immer;
                                                                    ENU=Never,If it has a value,Always];
                                                   OptionString=Never,IfValue,Always }
    { 50001;  ;Substitution Field  ;Code20        ;TableRelation="CDC Template Field".Code WHERE (Template No.=FIELD(Template No.),
                                                                                                  Type=CONST(Line));
                                                   OnValidate=VAR
                                                                CKLAdvLineRecognitionMgt@1000000000 : Codeunit 61000;
                                                              BEGIN
                                                                IF "Substitution Field" <> '' THEN
                                                                  CKLAdvLineRecognitionMgt.SetTemplateToALRProcessing("Template No.");
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Ersatzfeld;
                                                              ENU=Substitution Field] }
    { 50002;  ;Anchor Field        ;Code20        ;TableRelation="CDC Template Field".Code WHERE (Template No.=FIELD(Template No.),
                                                                                                  Type=CONST(Line));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Anker Feld;
                                                              ENU=Anchor Field] }
    { 50003;  ;Sorting             ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Sortierung;
                                                              ENU=Sorting] }
    { 50004;  ;Field Position      ;Option        ;DataClassification=ToBeClassified;
                                                   CaptionML=DEU=Feldposition;
                                                   OptionCaptionML=[DEU=" ,?ber Anker,Unter Anker";
                                                                    ENU=" ,Above anchor,Below anchor"];
                                                   OptionString=[ ,AboveAnchor,BelowAnchor] }
    { 50005;  ;Max. Bottom Position;Integer       ;DataClassification=ToBeClassified }
    { 50006;  ;Min. Top Position   ;Integer       ;DataClassification=ToBeClassified }
    { 50007;  ;Get Value from Previous Value;Boolean;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Substitution Field",'');
                                                              END;

                                                   DataClassification=ToBeClassified;
                                                   CaptionML=DEU=Wert vom vorherigen Wert kopieren }
    { 50011;  ;Advanced Line Recognition Type;Option;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Erw. Zeilenerkennung Art;
                                                              ENU=Advanced Line Recognition Type];
                                                   OptionCaptionML=[DEU=Standard,Mit Anker verkn?pftes Feld,Feldsuche mit Caption,Feldsuche mit Spalten?berschrift,Gruppierungsfeld mit Caption;
                                                                    ENU=Standard,Anchor linked field,Field search with caption,Field search with column heading,Group value with caption];
                                                   OptionString=Default,LinkedToAnchorField,FindFieldByCaptionInPosition,FindFieldByColumnHeading,GroupValue }
    { 50012;  ;Offset Top          ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Offset Oben;
                                                              ENU=Offset Top] }
    { 50013;  ;Offset Bottom       ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Offset Unten;
                                                              ENU=Offset Height] }
    { 50014;  ;Offset Left         ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Offset Links;
                                                              ENU=Offset Left] }
    { 50015;  ;Offset Right        ;Integer       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Offset Rechts;
                                                              ENU=Offset Width] }
    { 50020;  ;ALR Value Caption Offset X;Integer ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Wert Suchtext Offset X;
                                                              ENU=Caption Offset X] }
    { 50021;  ;ALR Value Caption Offset Y;Integer ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Wert Suchtext Offset Y;
                                                              ENU=Caption Offset Y] }
    { 50022;  ;ALR Typical Value Field Width;Decimal;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Typische Wert Feldbreite;
                                                              ENU=Field Width];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Template No.,Type,Code                  ;Clustered=Yes }
    {    ;Template No.,Type,Sort Order             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'DEU=Es ist nicht ratsam, Leerzeichen als Trennzeichen fÅr Datumsvalidierungsregeln zu benutzen, da sie vor der Verarbeitung gelîscht werden. Benutzen Sie stattdessen einen Bindestrich - oder einen SchrÑgstrich /.;ENU=It is not recommended to use space as a seperator in Date Validation Rules as they will be deleted before evaluation. Use a seperator line - or / instead.';
      Text002@161024012 : TextConst 'DEU=Mîchten Sie auch das Feld ''%1'' lîschen?;ENU=Do you also want to delete the field ''%1''?';
      Text003@161024013 : TextConst 'DEU=Das Feld kann nicht aus sich selbst erzeugt werden.;ENU=The field cannot be subtracted from itself';
      Text004@1160040000 : TextConst 'DEU=Der Datensatz ist nicht in den Filtern von %1 enthalten.;ENU=The record is not within the filters of the %1.';
      Text005@1160040001 : TextConst 'DEU=%1 ist kein Teil des PrimÑrschlÅssels von %2.;ENU=The %1 is not part of the primary key of the %2.';
      Text006@1160040002 : TextConst 'DEU=Feld in %1;ENU=Field in %1';
      Text007@1160040011 : TextConst 'DEU=Feld Zielkopf;ENU=Destination Header Field';
      Text008@1160040010 : TextConst 'DEU=Feld Zielzeile;ENU=Destination Line Field';
      EnableRuleActivateErr@6085573 : TextConst 'DEU=%1 kann nur fÅr Datumstyp %2 oder %3 aktiviert werden.;ENU=%1 can only be activated for Date Type %2 or %3.';
      AlwaysOneDecimal@6085574 : TextConst 'DEU=Immer 1 Dezimalstelle;ENU=Always 1 decimal';
      AlwaysNoDecimals@6085575 : TextConst 'DEU=Immer %1 Dezimalstellen;ENU=Always %1 decimals';
      RangeOfDecimals@6085576 : TextConst 'DEU=%1-%2 Dezimalstellen;ENU=%1-%2 decimals';
      WrongExpressionFormat@6085577 : TextConst 'DEU=Geben Sie eine oder zwei Zahlen ein, die durch einen Doppelpunkt getrennt sind. Die erste Zahl muss kleiner oder gleich der zweiten Zahl sein. Zahlen mÅssen zwischen 0 und 9 liegen.;ENU=Enter one number or two numbers separated by a colon. The first number must be less or equal to the second number. Numbers must be between 0 and 9.';
      UnableToParseDecimalExpression@6085578 : TextConst 'DEU=Der eingegebene Ausdruck kann nicht Åbersetzt werden.;ENU=Unable to translate typed expression.';

    PROCEDURE Clone@161024012(FromCompany@1160040002 : Text[30];FromField@1160040003 : Record 6085580;ToTemplate@161024013 : Record 6085579;CreatedFromMasterTemplate@6085581 : Boolean);
    VAR
      ToField@1000000002 : Record 6085580;
      FromFieldRule@1000000010 : Record 6085583;
      ToFieldRule@1000000009 : Record 6085583;
      FromFieldCapt@1000000003 : Record 6085581;
      ToFieldCaption@1000000004 : Record 6085581;
      FromFieldTransl@1000000005 : Record 6085582;
      ToFieldTransl@1000000006 : Record 6085582;
      FromTableFilterFields@1160040000 : Record 6085762;
      ToTableFilterFields@1160040001 : Record 6085762;
      NoOfFromFieldRule@6085573 : Integer;
    BEGIN
      ToField := FromField;
      ToField."Template No." := ToTemplate."No.";
      IF ToField.FIND('=') THEN
        EXIT;

      ToField.INSERT(TRUE);

      IF FromCompany <> '' THEN BEGIN
        FromFieldRule.CHANGECOMPANY(FromCompany);
        FromFieldCapt.CHANGECOMPANY(FromCompany);
        FromFieldTransl.CHANGECOMPANY(FromCompany);
        FromTableFilterFields.CHANGECOMPANY(FromCompany);
      END;

      FromFieldRule.SETRANGE("Template No.",FromField."Template No.");
      FromFieldRule.SETRANGE(Type,FromField.Type);
      FromFieldRule.SETRANGE(Code,FromField.Code);
      IF FromFieldRule.FINDSET THEN BEGIN
        NoOfFromFieldRule := FromFieldRule.COUNT;

        REPEAT
          ToFieldRule := FromFieldRule;
          ToFieldRule."Template No." := ToField."Template No.";
          IF (NoOfFromFieldRule > 1) AND CreatedFromMasterTemplate AND FromField."Enable Rule Generation" THEN
            ToFieldRule."Created from Master Template" := TRUE
          ELSE
            ToFieldRule."Created from Master Template" := FALSE;
          ToFieldRule.INSERT(TRUE);
        UNTIL FromFieldRule.NEXT = 0;
      END;

      FromFieldCapt.SETRANGE("Template No.",FromField."Template No.");
      FromFieldCapt.SETRANGE(Type,FromField.Type);
      FromFieldCapt.SETRANGE(Code,FromField.Code);
      IF FromFieldCapt.FINDSET THEN
        REPEAT
          ToFieldCaption := FromFieldCapt;
          ToFieldCaption."Template No." := ToField."Template No.";
          ToFieldCaption.INSERT(TRUE);
        UNTIL FromFieldCapt.NEXT = 0;

      FromFieldTransl.SETRANGE("Template No.",FromField."Template No.");
      FromFieldTransl.SETRANGE(Type,FromField.Type);
      FromFieldTransl.SETRANGE(Code,FromField.Code);
      IF FromFieldTransl.FINDSET THEN
        REPEAT
          ToFieldTransl := FromFieldTransl;
          ToFieldTransl."Template No." := ToField."Template No.";
          ToFieldTransl.INSERT(TRUE);
        UNTIL FromFieldTransl.NEXT = 0;

      FromTableFilterFields.SETRANGE("Table Filter GUID",FromField."Source Table Filter GUID");
      IF FromTableFilterFields.FINDSET THEN
        REPEAT
          ToTableFilterFields := FromTableFilterFields;
          ToTableFilterFields."Table Filter GUID" := ToField."Source Table Filter GUID";
          ToTableFilterFields.INSERT(TRUE);
        UNTIL FromTableFilterFields.NEXT = 0;
    END;

    PROCEDURE SetFixedValue@1000000000(Value@1000000000 : Text[250]);
    VAR
      RecIDMgt@161024013 : Codeunit 6085604;
      CaptureMgt@1160040001 : Codeunit 6085576;
      RecID@161024012 : Text[30];
      DCLogMgt@1000 : Codeunit 6085658;
    BEGIN
      IF ("Source Table No." <> 0) OR ("Data Type" = "Data Type"::Lookup) THEN BEGIN
        "Fixed Value (Text)" := '';
        IF Value <> '' THEN
          DCLogMgt.IsLogActive("Source Table No.",TRUE);
        "Fixed Value (Rec. ID Tree ID)" := RecIDMgt.SetKeyValueWithGUID("Source Table No.","Source Field No.",0,
          "Source Table Filter GUID",Value,TRUE);
      END;

      CASE "Data Type" OF
        "Data Type"::Text:
          EVALUATE("Fixed Value (Text)",Value);
        "Data Type"::Number:
          IF Value = '' THEN
            "Fixed Value (Decimal)" := 0
          ELSE
            EVALUATE("Fixed Value (Decimal)",Value);
        "Data Type"::Date:
          IF Value = 'TODAY' THEN
            EVALUATE("Fixed Value (Text)",Value)
          ELSE BEGIN
            "Fixed Value (Text)" := '';
            EVALUATE("Fixed Value (Date)",Value);
          END;
        "Data Type"::Boolean:
          IF Value = '' THEN
            "Fixed Value (Boolean)" := FALSE
          ELSE
            CaptureMgt.ParseBoolean(Value,"Fixed Value (Boolean)");
      END;

      IF Value <> '' THEN
        "Search for Value" := FALSE;
    END;

    PROCEDURE GetFixedValue@1000000001() : Text[250];
    VAR
      RecIDMgt@161024012 : Codeunit 6085604;
    BEGIN
      IF ("Source Table No." <> 0) OR ("Data Type" = "Data Type"::Lookup) THEN
        EXIT(RecIDMgt.GetKeyValue("Fixed Value (Rec. ID Tree ID)","Source Field No."));

      CASE "Data Type" OF
        "Data Type"::Text:
          EXIT(FORMAT("Fixed Value (Text)"));
        "Data Type"::Date:
          IF "Fixed Value (Date)" <> 0D THEN
            EXIT(FORMAT("Fixed Value (Date)"))
          ELSE
            EXIT("Fixed Value (Text)");
        "Data Type"::Number:
          IF "Fixed Value (Decimal)" <> 0 THEN
            EXIT(FORMAT("Fixed Value (Decimal)"));
        "Data Type"::Boolean:
          EXIT(FORMAT("Fixed Value (Boolean)"));
      END;
    END;

    PROCEDURE FormulaOnLookup@161024013(VAR Text@161024012 : Text[1024]) : Boolean;
    VAR
      TemplField@161024013 : Record 6085580;
    BEGIN
      TemplField.FILTERGROUP(2);
      TemplField.SETCURRENTKEY("Template No.",Type,"Sort Order");
      TemplField.SETRANGE("Template No.","Template No.");
      TemplField.SETRANGE(Type,Type);
      TemplField.SETFILTER(Code,'<>%1',Code);
      IF "Data Type" = "Data Type"::Number THEN
        TemplField.SETRANGE("Data Type","Data Type");
      TemplField.FILTERGROUP(0);
      IF STRLEN(Text) <= MAXSTRLEN(TemplField.Code) THEN
        IF TemplField.GET("Template No.",Type,Text) THEN;

      IF PAGE.RUNMODAL(0,TemplField) = ACTION::LookupOK THEN BEGIN
        Text := TemplField.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetDestFieldCaption@1160040000(FieldType@1160040002 : 'Header,Line') FieldCap : Text[250];
    VAR
      Template@1160040001 : Record 6085579;
      DocCat@1160040000 : Record 6085575;
      AllObjWithCaption@1160040004 : Record 2000000058;
      RecIDMgt@1160040003 : Codeunit 6085604;
    BEGIN
      IF Template.GET("Template No.") THEN
        DocCat.GET(Template."Category Code");

      IF FieldType = FieldType::Header THEN BEGIN
        FieldCap := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Table,DocCat."Destination Header Table No.");
        IF FieldCap = '' THEN
          FieldCap := Text007
        ELSE
          FieldCap := STRSUBSTNO(Text006,FieldCap);
      END ELSE BEGIN
        FieldCap := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Table,DocCat."Destination Line Table No.");
        IF FieldCap = '' THEN
          FieldCap := Text008
        ELSE
          FieldCap := STRSUBSTNO(Text006,FieldCap);
      END;
    END;

    LOCAL PROCEDURE SetOrderRecords@6085573();
    VAR
      SingleInstanceStorage@6085574 : Codeunit 6085789;
      TemplateField@6085573 : Record 6085580;
      TemplateField2@6085576 : Record 6085580;
      i@6085575 : Integer;
    BEGIN
      IF "Sort Order" <> 0 THEN
        EXIT;

      i := SingleInstanceStorage.GetActiveTemplFieldForP6085585;
      IF i = 0 THEN BEGIN
        TemplateField.SETCURRENTKEY("Template No.",Type,"Sort Order");
        TemplateField.SETRANGE("Template No.","Template No.");
        TemplateField.SETRANGE(Type,Type);
        IF TemplateField.FINDLAST THEN
          "Sort Order" := TemplateField."Sort Order" + 1
        ELSE
          "Sort Order" := 1;
      END ELSE BEGIN
        TemplateField.SETRANGE("Template No.","Template No.");
        TemplateField.SETRANGE(Type,Type);
        TemplateField.SETFILTER("Sort Order",'>%1',i);
        IF TemplateField.FINDSET(TRUE,FALSE) THEN
          REPEAT
            TemplateField2.GET(TemplateField."Template No.",TemplateField.Type,TemplateField.Code);
            TemplateField2."Sort Order" := TemplateField2."Sort Order" + 1;
            TemplateField2.MODIFY;
          UNTIL TemplateField.NEXT = 0;

        "Sort Order" := i + 1;
      END;
      SingleInstanceStorage.SetActiveTemplFieldForP6085585("Sort Order");
    END;

    PROCEDURE ValidateDecimalPlaces@6085575(DecimalPlacesDescriptionIn@6085573 : Text[5]) DecimalPlacesDescriptionOut : Text[50];
    VAR
      MinNoOfDecimals@6085578 : Integer;
      MinNoOfDecimalsText@6085580 : Text[10];
      MaxNoOfDecimals@6085579 : Integer;
      MaxNoOfDecimalsText@6085581 : Text[10];
      GenLedgerSetup@6085582 : Record 98;
      ColonPosition@6085583 : Integer;
    BEGIN
      IF NOT ("Data Type" = "Data Type"::Number) THEN
        EXIT('');

      IF NOT CheckDecimalPlacesFormat(DecimalPlacesDescriptionIn) THEN
        ERROR(WrongExpressionFormat);

      VALIDATE("Decimal Places",DecimalPlacesDescriptionIn);
      ColonPosition := STRPOS(DecimalPlacesDescriptionIn,':');
      IF ColonPosition = 0 THEN BEGIN
        IF "Decimal Places" = '1' THEN
          DecimalPlacesDescriptionOut := STRSUBSTNO(AlwaysOneDecimal)
        ELSE
          DecimalPlacesDescriptionOut := STRSUBSTNO(AlwaysNoDecimals,"Decimal Places");
      END ELSE BEGIN
        MinNoOfDecimalsText := COPYSTR(DecimalPlacesDescriptionIn,1,ColonPosition - 1);
        EVALUATE(MinNoOfDecimals,MinNoOfDecimalsText);
        MaxNoOfDecimalsText := COPYSTR(DecimalPlacesDescriptionIn,ColonPosition + 1,STRLEN(DecimalPlacesDescriptionIn));
        EVALUATE(MaxNoOfDecimals,MaxNoOfDecimalsText);
        IF (MinNoOfDecimals = MaxNoOfDecimals) THEN BEGIN
          IF MinNoOfDecimals = 1 THEN
            DecimalPlacesDescriptionOut := STRSUBSTNO(AlwaysOneDecimal)
          ELSE
            DecimalPlacesDescriptionOut := STRSUBSTNO(AlwaysNoDecimals,MinNoOfDecimals);
        END ELSE
          DecimalPlacesDescriptionOut := STRSUBSTNO(RangeOfDecimals,MinNoOfDecimals,MaxNoOfDecimals);
      END;
    END;

    PROCEDURE CheckDecimalPlacesFormat@1(VAR DecimalPlaces@1000 : Text[5]) OK : Boolean;
    VAR
      ColonPlace@1002 : Integer;
      DecimalPlacesPart1@1003 : Integer;
      DecimalPlacesPart2@1004 : Integer;
      Check@1005 : Text[5];
    BEGIN
      // Copied from T98 - need a local copy of the function due to wrong error handling in org. function
      OK := TRUE;
      ColonPlace := STRPOS(DecimalPlaces,':');

      IF ColonPlace = 0 THEN BEGIN
        IF NOT EVALUATE(DecimalPlacesPart1,DecimalPlaces) THEN
          OK := FALSE;
        IF (DecimalPlacesPart1 < 0) OR (DecimalPlacesPart1 > 9) THEN
          OK := FALSE;
      END ELSE BEGIN
        Check := COPYSTR(DecimalPlaces,1,ColonPlace - 1);
        IF Check = '' THEN
          OK := FALSE;
        IF NOT EVALUATE(DecimalPlacesPart1,Check) THEN
          OK := FALSE;
        Check := COPYSTR(DecimalPlaces,ColonPlace + 1,STRLEN(DecimalPlaces));
        IF Check = '' THEN
          OK := FALSE;
        IF NOT EVALUATE(DecimalPlacesPart2,Check) THEN
          OK := FALSE;
        IF DecimalPlacesPart1 > DecimalPlacesPart2 THEN
          OK := FALSE;
        IF (DecimalPlacesPart1 < 0) OR (DecimalPlacesPart1 > 9) THEN
          OK := FALSE;
        IF (DecimalPlacesPart2 < 0) OR (DecimalPlacesPart2 > 9) THEN
          OK := FALSE;
      END;
    END;

    PROCEDURE ParseDecimalPlacesDescription@6085574(DecimalPlacesDescriptionIn@6085573 : Text[50]) DecimalPlacesOut : Text[5];
    VAR
      IntegerVar@6085574 : Integer;
      MinNoOfDecimals@6085577 : Integer;
      MaxNoOfDecimals@6085576 : Integer;
      DashPosition@6085575 : Integer;
      FirstBlankPosition@6085578 : Integer;
      i@6085579 : Integer;
    BEGIN
      FirstBlankPosition := STRPOS(DecimalPlacesDescriptionIn,' ');

      // Expression is of form "blabla X blabla" -> Translate to X (=X:X)
      IF (DecimalPlacesDescriptionIn[FirstBlankPosition+2] = ' ') AND (DecimalPlacesDescriptionIn[FirstBlankPosition+1] IN
        ['0','1','2','3','4','5','6','7','8','9'])
      THEN BEGIN
        DecimalPlacesOut := FORMAT(DecimalPlacesDescriptionIn[FirstBlankPosition+1]);
        EXIT(DecimalPlacesOut);
      END;

      // Expression is of form "X", "X-", "X-Y", "-Y" -> Translate to X:X, X:Y, 0:Y
      DecimalPlacesOut := '';
      DecimalPlacesDescriptionIn := COPYSTR(DecimalPlacesDescriptionIn,1,3);
      FOR i := 1 TO 3 DO
        IF DecimalPlacesDescriptionIn[i] IN ['0','1','2','3','4','5','6','7','8','9','-',':'] THEN
          DecimalPlacesOut += FORMAT(DecimalPlacesDescriptionIn[i]);

      DecimalPlacesOut := CONVERTSTR(DecimalPlacesOut,'-',':');
      IF DecimalPlacesOut[1] = ':' THEN
        DecimalPlacesOut := '0' + DecimalPlacesOut;

      IF CheckDecimalPlacesFormat(DecimalPlacesOut) THEN
        EXIT(DecimalPlacesOut)
      ELSE
        ERROR(UnableToParseDecimalExpression);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 61000 Adv. Line Recognition Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=ALR010;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'DEU=Zuweisung abgebrochen, da kein Feld fÅr die VerknÅpfung ausgewÑhlt worden sind!;ENU=Linking cancelled because you didn''t select fields for linking!';
      Text002@1000000001 : TextConst 'DEU=Das Feld "%1" ist nun mit dem Ankerfeld "%2" verknÅpft!;ENU=The field "%1" is now linked to the line identification field "%2"!';
      Text003@1000000002 : TextConst 'DEU=Das Ankerfeld %1 ist noch nicht trainiert!;ENU=The line identification %1 field is not trained yet!';
      Text004@1000000003 : TextConst 'DEU=Bitte den Beispielwert fÅr %1 (%2) in der ersten Belegzeile trainieren!;ENU=Please train the example value for %1 in the first document line!';
      Text005@1000000004 : TextConst 'DEU=Bitte wÑhlen Sie zuerst das Ankerfeld aus!;ENU=Please choose the line identification field first!';
      Text006@1000000005 : TextConst 'DEU=Codeunit %1 existiert nicht!;ENU=Codeunit %1 does not exist!';
      Text007@1113400000 : TextConst 'DEU="Das Feld ""%1"" wird nun innerhalb der Position Åber die SpaltenÅberschrift ""%2"" gesucht. ";ENU=The field "%1" will now be searched via the column heading "%2".';
      Text008@1113400001 : TextConst 'DEU=Fehler! FÅr Feld %1 wurde noch keine Caption hinterlegt! Bitte pflegen Sie die Caption zuerst.;ENU=Error! For the field %1 hasn|t been trained a caption! Please train the caption first.';
      Text009@1113400002 : TextConst 'DEU=Das Feld "%1" ist als versetztes Feld mit öberschrift konfiguriert.;ENU=The value for field "%1" will be searched by the column heading now.';
      Text011@1113400004 : TextConst 'DEU=Bitte wÑhlen Sie zuerst das Feld aus, fÅr welches Sie das Ersatzfeld einrichten mîchten.;ENU=Please choose the line identification field first!';
      Text013@1113400006 : TextConst 'DEU=WÑhlen Sie nun das Feld aus, welches Sie mit dem Ankerfeld verknÅpfen mîchten.;ENU=Choose the field, which should be linked with the line identifiying field.';
      Text014@1113400007 : TextConst 'DEU=Fehler bei Zuweisung.;ENU=Error during assigning the field';
      Text015@1113400008 : TextConst 'DEU=Bitte wÑhlen Sie das Feld aus, welches Åber die öberschrift gefunden werden soll.;ENU=Select the field that should be found by the column heading.';
      Text016@1113400009 : TextConst 'DEU="Bitte wÑhlen Sie das Feld aus, welches innerhalb der Position Åber die Caption gefunden werden soll. ";ENU=Choose the field whose value should be found by the caption in the current line.';
      Text017@1113400010 : TextConst 'DEU="Das Feld ""%1"" wird nun innerhalb der Position Åber die Caption gesucht. ";ENU=The value of field "%1" will now been searched via the caption in the current line.';
      Text020@1000000006 : TextConst 'DEU=Es gibt noch kein trainiertes Feld fÅr die erste Position! Bitte trainieren Sie erst ein Feld in der Position.;ENU=There is no trained field for the first position yet! Please train one field in the position first.';

    PROCEDURE SetToAnchorLinkedField@1000000010(VAR TempDocumentLine@1000000008 : Record 6085596);
    VAR
      AnchorField@1000000007 : Record 6085580;
      LinkedField@1000000005 : Record 6085580;
      AnchorFieldDocumentValue@1113400000 : Record 6085593;
      LinkedFieldDocumentValue@1000000001 : Record 6085593;
      FieldsLinked@1000000000 : Integer;
    BEGIN
      // Get the anchor field that defines the position
      MESSAGE(Text005);
      SelectField(AnchorField,TempDocumentLine."Template No.",'');

      // Get document value of the anchor field => is mandatory
      AnchorFieldDocumentValue.SETRANGE("Document No.",TempDocumentLine."Document No.");
      AnchorFieldDocumentValue.SETRANGE("Is Value",TRUE);
      AnchorFieldDocumentValue.SETRANGE(Code,AnchorField.Code);
      AnchorFieldDocumentValue.SETRANGE("Line No.",1);
      AnchorFieldDocumentValue.SETRANGE(Type,AnchorFieldDocumentValue.Type::Line);
      AnchorFieldDocumentValue.SETRANGE("Is Valid",TRUE);
      AnchorFieldDocumentValue.SETRANGE("Template No.",TempDocumentLine."Template No.");
      IF NOT AnchorFieldDocumentValue.FINDFIRST THEN
        ERROR(Text003,AnchorField.Code);

      // Select the field that should be linked with anchor field
      MESSAGE(Text013);
      IF NOT SelectField(LinkedField,TempDocumentLine."Template No.",AnchorField.Code) THEN
        ERROR(Text001);

      // Link the selected field to anchor field
      // Find the value of the selected field
      LinkedFieldDocumentValue.SETRANGE("Document No.",TempDocumentLine."Document No.");
      LinkedFieldDocumentValue.SETRANGE("Is Value",TRUE);
      LinkedFieldDocumentValue.SETRANGE(Code,LinkedField.Code);
      LinkedFieldDocumentValue.SETRANGE("Line No.",0,1);
      LinkedFieldDocumentValue.SETRANGE(Type,LinkedFieldDocumentValue.Type::Line);
      LinkedFieldDocumentValue.SETRANGE("Is Valid",TRUE);
      LinkedFieldDocumentValue.SETRANGE("Template No.",TempDocumentLine."Template No.");
      IF NOT LinkedFieldDocumentValue.FINDFIRST THEN
        ERROR(Text004,LinkedField."Field Name",LinkedField.Code);  //value is mandatory

      ResetField(LinkedField);

      // Calculate and save the offset values at the linked field
      LinkedField."Offset Top" := LinkedFieldDocumentValue.Top - AnchorFieldDocumentValue.Top;
      LinkedField."Offset Left" := LinkedFieldDocumentValue.Left - AnchorFieldDocumentValue.Left;
      LinkedField."Offset Bottom" := LinkedFieldDocumentValue.Bottom - LinkedFieldDocumentValue.Top;
      LinkedField."Offset Right" := LinkedFieldDocumentValue.Right - LinkedFieldDocumentValue.Left;
      LinkedField."Advanced Line Recognition Type" := LinkedField."Advanced Line Recognition Type"::LinkedToAnchorField;
      LinkedField."Anchor Field" := AnchorFieldDocumentValue.Code;

      UpdateExecutionSequence(LinkedField,LinkedField."Anchor Field");

      IF LinkedField.MODIFY(TRUE) THEN BEGIN
        SetTemplateToALRProcessing(TempDocumentLine."Template No.");
        MESSAGE(Text002,LinkedField."Field Name",AnchorField."Field Name");
      END ELSE
        MESSAGE(Text014);
    END;

    PROCEDURE SetToFieldSearchWithColumnHeding@1113400003(VAR TempDocumentLine@1113400002 : Record 6085596);
    VAR
      LineIdentFieldDocumentValue@1000000001 : Record 6085593;
      SelectedField@1113400001 : Record 6085580;
      SelectedFieldDocumentValue@1000000004 : Record 6085593;
      TemplateFieldCaption@1000000000 : Record 6085581;
    BEGIN
      // Find field value of a normal position field
      GetLineIdentifierValue(LineIdentFieldDocumentValue, TempDocumentLine."Document No.", TempDocumentLine."Template No.");

      // Select field
      MESSAGE(Text015);
      IF NOT SelectField(SelectedField,TempDocumentLine."Template No.",'') THEN
        ERROR(Text001);

      // Check that the selected field has at least one caption
      TemplateFieldCaption.SETRANGE("Template No.",SelectedField."Template No.");
      TemplateFieldCaption.SETRANGE(Code,SelectedField.Code);
      TemplateFieldCaption.SETRANGE(Type,TemplateFieldCaption.Type::Line);
      IF NOT TemplateFieldCaption.FINDFIRST THEN
        ERROR(Text008, SelectedField.Code);

      // Find the value of the selected field
      GetSelectedFieldValue(SelectedFieldDocumentValue,SelectedField,TempDocumentLine."Document No.",TempDocumentLine."Template No.");

      ResetField(SelectedField);

      // Setup field for column heading search
      SelectedField."Advanced Line Recognition Type" := SelectedField."Advanced Line Recognition Type"::FindFieldByColumnHeading;

      IF SelectedFieldDocumentValue.Top < LineIdentFieldDocumentValue.Top THEN
        SelectedField."Field Position" := SelectedField."Field Position"::AboveAnchor
      ELSE
        SelectedField."Field Position" := SelectedField."Field Position"::BelowAnchor;

      IF SelectedField.MODIFY(TRUE) THEN BEGIN
        SetTemplateToALRProcessing(TempDocumentLine."Template No.");
        MESSAGE(Text007, SelectedField."Field Name",TemplateFieldCaption.Caption);
      END ELSE
        MESSAGE(Text014);
    END;

    PROCEDURE SetToFieldSearchWithCaption@1113400000(VAR TempDocumentLine@1113400000 : Record 6085596);
    VAR
      LineIdentFieldDocumentValue@1000000001 : Record 6085593;
      SelectedField@1113400001 : Record 6085580;
      SelectedFieldDocumentValue@1000000002 : Record 6085593;
      TemplateFieldCaption@1000000000 : Record 6085581;
      DocumentPage@1000000004 : Record 6085591;
      CaptureEngine@1000000003 : Codeunit 6085575;
    BEGIN
      // Find field value of a normal position field
      GetLineIdentifierValue(LineIdentFieldDocumentValue, TempDocumentLine."Document No.", TempDocumentLine."Template No.");

      // Select field
      MESSAGE(Text016);
      IF NOT SelectField(SelectedField,TempDocumentLine."Template No.",'') THEN
        ERROR(Text001);

      // Check that the selected field has at least one caption
      TemplateFieldCaption.SETRANGE("Template No.",SelectedField."Template No.");
      TemplateFieldCaption.SETRANGE(Code,SelectedField.Code);
      TemplateFieldCaption.SETRANGE(Type,TemplateFieldCaption.Type::Line);
      IF NOT TemplateFieldCaption.FINDFIRST THEN
        ERROR(Text008,SelectedField.Code);

      // Find the value of the selected field
      GetSelectedFieldValue(SelectedFieldDocumentValue,SelectedField,TempDocumentLine."Document No.",TempDocumentLine."Template No.");

      ResetField(SelectedField);

      // 009 >>>
      IF (SelectedFieldDocumentValue.Right - SelectedFieldDocumentValue.Left) > 0 THEN BEGIN
        DocumentPage.GET(TempDocumentLine."Document No.",TempDocumentLine."Page No.");
        SelectedField."ALR Typical Value Field Width" := ROUND((SelectedFieldDocumentValue.Right - SelectedFieldDocumentValue.Left)
                                                               / CaptureEngine.GetDPIFactor(150,DocumentPage."TIFF Image Resolution"),1);
      END;

      IF (SelectedFieldDocumentValue.Top <> 0) AND (TemplateFieldCaption.Top <> 0) AND (SelectedFieldDocumentValue.Left <> 0) AND (TemplateFieldCaption.Left <> 0) THEN BEGIN
          SelectedField."ALR Value Caption Offset X" := SelectedFieldDocumentValue.Left - TemplateFieldCaption.Left;
          SelectedField."ALR Value Caption Offset Y" := SelectedFieldDocumentValue.Top - TemplateFieldCaption.Top;
      END;

      SelectedField."Caption Mandatory" := TRUE;
      // 009 <<<

      // Setup field for field search by caption
      SelectedField."Advanced Line Recognition Type" := SelectedField."Advanced Line Recognition Type"::FindFieldByCaptionInPosition;

      IF SelectedFieldDocumentValue.Top < LineIdentFieldDocumentValue.Top THEN
        SelectedField."Field Position" := SelectedField."Field Position"::AboveAnchor
      ELSE
        SelectedField."Field Position" := SelectedField."Field Position"::BelowAnchor;

      IF SelectedField.MODIFY(TRUE) THEN BEGIN;
        SetTemplateToALRProcessing(TempDocumentLine."Template No.");
        MESSAGE(Text017,SelectedField."Field Name");
      END ELSE
        MESSAGE(Text014);
    END;

    PROCEDURE ResetFieldFromMenu@1(VAR TempDocumentLine@1001 : Record 6085596);
    VAR
      FieldToReset@1000 : Record 6085580;
    BEGIN
      IF SelectField(FieldToReset,TempDocumentLine."Template No.",'') THEN BEGIN
        ResetField(FieldToReset);
        FieldToReset.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ResetField@1000000004(VAR TemplateField@1000000000 : Record 6085580);
    BEGIN
      // Reset the current field to default values
      WITH TemplateField DO BEGIN
        "Search for Value" := FALSE;
        Required := FALSE;
        CLEAR("Advanced Line Recognition Type");
        CLEAR("Anchor Field");
        CLEAR("Offset Top");
        CLEAR("Offset Bottom");
        CLEAR("Offset Left");
        CLEAR("Offset Right");
        CLEAR("Field Position");
        CLEAR(Sorting);
        CLEAR("Substitution Field");
        CLEAR("Get Value from Previous Value");
        CLEAR("ALR Typical Value Field Width");
        CLEAR("Typical Field Height");
        CLEAR("Caption Mandatory");
        CLEAR("ALR Value Caption Offset X");
        CLEAR("ALR Value Caption Offset Y");
      END;
    END;

    LOCAL PROCEDURE SelectField@1113400002(VAR TemplateField@1000000000 : Record 6085580;TemplateNo@1113400001 : Code[20];ExcludedFieldsFilter@1113400000 : Text[250]) : Boolean;
    VAR
      lTemplateFieldList@1000000003 : Page 6085602;
    BEGIN
      WITH TemplateField DO BEGIN
        SETRANGE("Template No.",TemplateNo);
        SETRANGE(Type,Type::Line);
        IF ExcludedFieldsFilter <> '' THEN
          SETFILTER(Code,'<>%1',ExcludedFieldsFilter);
        lTemplateFieldList.SETTABLEVIEW(TemplateField);
        lTemplateFieldList.LOOKUPMODE(TRUE);
        IF lTemplateFieldList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          lTemplateFieldList.GETRECORD(TemplateField);
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE SetTemplateToALRProcessing@1113400005(TemplateNo@1113400000 : Code[20]);
    VAR
      lTemplate@1113400001 : Record 6085579;
    BEGIN
      // Change Codeunit ID to the advanced line recognition codeunit on template
      IF lTemplate.GET(TemplateNo) THEN BEGIN
        lTemplate.VALIDATE("Codeunit ID: Line Capture",GetAdvLineRecCodeunit());
        lTemplate.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetAdvLineRecCodeunit@1000000000() : Integer;
    VAR
      Object@1000000000 : Record 2000000001;
    BEGIN
      Object.SETRANGE(Type,Object.Type::Codeunit);
      Object.SETRANGE(Name,'Adv. Purch/Sales Line Capture');
      IF Object.ISEMPTY THEN
        ERROR(Text006,'Adv. Purch/Sales Line Capture');

      IF Object.FINDSET THEN
        EXIT(Object.ID);
    END;

    LOCAL PROCEDURE GetLineIdentifierValue@1000000002(VAR LineIdentFieldDocumentValue@1000000000 : Record 6085593;DocumentNo@1000000001 : Code[20];TemplateNo@1000000002 : Code[20]);
    VAR
      LineIdentField@1000000003 : Record 6085580;
      LineIdentFieldFound@1000000004 : Boolean;
    BEGIN
      WITH LineIdentField DO BEGIN
        SETRANGE("Template No.",TemplateNo);
        SETRANGE(Type,Type::Line);
        SETRANGE(Required,TRUE);
        SETRANGE("Advanced Line Recognition Type","Advanced Line Recognition Type"::Default);
        IF FINDSET THEN
          REPEAT
            IF LineIdentFieldDocumentValue.GET(DocumentNo,TRUE,LineIdentField.Code,1) THEN
              IF (LineIdentFieldDocumentValue."Template No." = TemplateNo) AND
                 (LineIdentFieldDocumentValue.Type = LineIdentFieldDocumentValue.Type::Line)
              THEN
                LineIdentFieldFound := TRUE;
          UNTIL (NEXT = 0) OR LineIdentFieldFound;
      END;

      IF NOT LineIdentFieldFound THEN
        ERROR(Text020);
    END;

    LOCAL PROCEDURE GetSelectedFieldValue@1000000007(VAR SelectedFieldDocumentValue@1000000000 : Record 6085593;SelectedField@1000000001 : Record 6085580;DocumentNo@1000000002 : Code[20];TemplateNo@1000000003 : Code[20]);
    BEGIN
      SelectedFieldDocumentValue.SETRANGE("Document No.",DocumentNo);
      SelectedFieldDocumentValue.SETRANGE("Is Value",TRUE);
      SelectedFieldDocumentValue.SETRANGE(Code,SelectedField.Code);
      SelectedFieldDocumentValue.SETRANGE("Line No.",0,1);
      SelectedFieldDocumentValue.SETRANGE(Type,SelectedFieldDocumentValue.Type::Line);
      SelectedFieldDocumentValue.SETRANGE("Is Valid",TRUE);
      SelectedFieldDocumentValue.SETRANGE("Template No.",TemplateNo);
      IF NOT SelectedFieldDocumentValue.FINDFIRST THEN
        ERROR(Text004,SelectedField."Field Name",SelectedField.Code);  //value is mandatory
    END;

    LOCAL PROCEDURE UpdateExecutionSequence@1000000001(VAR LinkedField@1000000000 : Record 6085580;PreviousFieldCode@1000000001 : Code[20]);
    VAR
      CurrField@1000000002 : Record 6085580;
      PrevField@1000000003 : Record 6085580;
      SortField@1000000004 : Record 6085580;
    BEGIN
      IF NOT PrevField.GET(LinkedField."Template No.",PrevField.Type::Line,PreviousFieldCode) THEN
        EXIT;

      IF LinkedField.Sorting <= PrevField.Sorting  THEN BEGIN
        SortField.SETRANGE("Template No.",LinkedField."Template No.");
        SortField.SETRANGE(Type,SortField.Type::Line);
        SortField.SETFILTER(Code,'<>%1',LinkedField.Code);
        SortField.SETFILTER(Sorting, '>=%1',LinkedField.Sorting  + 1);
        IF SortField.FINDSET THEN
          REPEAT
            SortField.Sorting := SortField.Sorting  + 1;
            SortField.MODIFY;
          UNTIL SortField.NEXT = 0;
        LinkedField.Sorting := LinkedField.Sorting + 1;
      END;
    END;

    BEGIN
    {
      -----------------------------------------------------
      CKL Software GmbH

      Ver Date     Usr Change
      -----------------------------------------------------
      001 20180301 SRA Initial Commit
      00 220180325 SRA New functions for Caption in Line and Offset Line
                       Renamed of existing functions
      004 20180717 SRA Redesign, new funtionality
      006 20190219 SRA New Function to reset a selectable field to standard capturing
      007 20190613 SRA New Object number due to conflicts with the default training objects
      -----------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 61001 Adv. Purch/Sales Line Capture
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=ALR010;
  }
  PROPERTIES
  {
    TableNo=6085590;
    OnRun=BEGIN
            Document := Rec;
            Code;
          END;

  }
  CODE
  {
    VAR
      Text001@1160040000 : TextConst 'ENU="Please create a %1 with %2 = ''%3''"';
      Document@1210050000 : Record 6085590;
      CaptureMgt@1160040001 : Codeunit 6085576;
      DocumentComment@1000000000 : Record 6085594;
      Text002@1000000001 : TextConst 'DEU=Zeilenidentifikationsfeld %1 - %2 verwendet!';
      MandatoryFieldBuffer@1000000002 : TEMPORARY Record 6085595;

    PROCEDURE Code@1000000000();
    VAR
      TempDocLine@1000000001 : TEMPORARY Record 6085596;
      TemplateField@1000000000 : Record 6085580;
      TempSortedDocumentField@1113400000 : TEMPORARY Record 6085595;
    BEGIN
      //RUN STANDARD LINE CAPTURING CODEUNIT
      CODEUNIT.RUN(CODEUNIT::"CDC Purch./Sales - Line Capt.",Document);

      //BUILD TEMPORARY LINE TABLE AND LOOP LINES
      Document.BuildTempLinesTable(TempDocLine);

      IF TempDocLine.FINDSET THEN BEGIN
        FillSortedFieldBuffer(TempSortedDocumentField, MandatoryFieldBuffer, TempDocLine);
        REPEAT
          TempSortedDocumentField.SETCURRENTKEY("Document No.","Sort Order");
          IF TempSortedDocumentField.FINDFIRST THEN
            REPEAT
              WITH TemplateField DO BEGIN
                GET(TempDocLine."Template No.",TemplateField.Type::Line,TempSortedDocumentField."Field Code");
                CASE "Advanced Line Recognition Type" OF
                  "Advanced Line Recognition Type"::LinkedToAnchorField: FindValueFromOffsetField(TempDocLine,TemplateField);
                  "Advanced Line Recognition Type"::FindFieldByCaptionInPosition: FindValueByCaptionInPosition(TempDocLine,TemplateField);
                  "Advanced Line Recognition Type"::FindFieldByColumnHeading: FindFieldByColumnHeading(TempDocLine,TemplateField);
                END;
              END;
          UNTIL TempSortedDocumentField.NEXT = 0;
          FindSubstitutionFieldValue(TempDocLine);
          GetValueFromPreviousValue(TempDocLine);
        UNTIL TempDocLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindValueFromOffsetField@1210050000(TempDocLine@1210050009 : TEMPORARY Record 6085596;VAR OffsetField@1000000001 : Record 6085580);
    VAR
      OffsetSourceField@1113400000 : Record 6085580;
      OffsetSourceFieldValue@1113400001 : Record 6085593;
      DocumentValue@1113400002 : Record 6085593;
      CurrPage@1210050003 : Record 6085591;
      CurrTop@1000000002 : Integer;
      CurrLeft@1000000003 : Integer;
      CurrBottom@1000000004 : Integer;
      CurrRight@1000000005 : Integer;
    BEGIN
      //Get Line Identification Field Position
      IF NOT OffsetSourceField.GET(TempDocLine."Template No.",OffsetSourceField.Type::Line,OffsetField."Anchor Field") THEN
        EXIT;

      // Get current value record of offset source field
      IF NOT OffsetSourceFieldValue.GET(TempDocLine."Document No.",TRUE,OffsetSourceField.Code,TempDocLine."Line No.") THEN
        EXIT;

      CurrPage.GET(Document."No.",OffsetSourceFieldValue."Page No.");

      WITH OffsetSourceFieldValue DO BEGIN
        // Create offset area for value capturing
        CurrTop := Top + OffsetField."Offset Top";
        CurrLeft := Left + OffsetField."Offset Left";
        CurrBottom := CurrTop + OffsetField."Offset Bottom";
        CurrRight := CurrLeft + OffsetField."Offset Right";
        CaptureMgt.CaptureFromPos(CurrPage,OffsetField,TempDocLine."Line No.",TRUE,CurrTop,CurrLeft,CurrBottom,CurrRight,DocumentValue);
        IF DocumentValue.GET(TempDocLine."Document No.",TRUE,OffsetField.Code,TempDocLine."Line No.") THEN
          IF ((DocumentValue."Value (Text)" = '') AND (DocumentValue."Value (Decimal)" = 0)) OR (NOT DocumentValue."Is Valid" )THEN
            DocumentValue.DELETE;
      END;
    END;

    LOCAL PROCEDURE FindValueByCaptionInPosition@1113400000(VAR TempDocLine@1210050009 : TEMPORARY Record 6085596;VAR CurrField@1000000001 : Record 6085580) : Boolean;
    VAR
      DocumentValue@1113400000 : Record 6085593;
      DocumentValueCopy@1113400004 : Record 6085593;
      lCurrPage@1113400009 : Record 6085591;
      NextPos@1113400001 : Integer;
      CaptureEngine@1113400002 : Codeunit 6085575;
      Word@1113400003 : Text[1024];
      lFromTopPos@1113400008 : Integer;
      lFromTopPage@1113400007 : Integer;
      lToBottomPos@1113400006 : Integer;
      lToBottomPage@1113400005 : Integer;
      i@1113400010 : Integer;
    BEGIN
      IF DocumentValue.GET(TempDocLine."Document No.",TRUE,CurrField.Code,TempDocLine."Line No.") THEN
        DocumentValue.DELETE;

      CLEAR(Word);

      // Get Position of caption
      IF CurrField."Field Position" = CurrField."Field Position"::AboveAnchor THEN
        GetRangeToPrevLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos)
      ELSE
        GetRangeToNextLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos);

      FOR i := lFromTopPage TO lToBottomPage DO BEGIN
        lCurrPage.GET(Document."No.",i);

        //IF lFromTopPage < lToBottomPage THEN
        IF i < lToBottomPage THEN
          CaptureEngine.SetLineRegion(i,lFromTopPos,i,lCurrPage."Bottom Word Pos.")
        ELSE
          IF (i > lFromTopPage) AND (i < lToBottomPage) THEN
            CaptureEngine.SetLineRegion(i,0,i,lCurrPage."Bottom Word Pos.")
          ELSE
            IF lFromTopPos > lToBottomPos THEN
              CaptureEngine.SetLineRegion(i,0,i,lToBottomPos)
            ELSE
              CaptureEngine.SetLineRegion(i,lFromTopPos,i,lToBottomPos);


        CurrField."Caption Offset X" := CurrField."ALR Value Caption Offset X";
        CurrField."Caption Offset Y" := CurrField."ALR Value Caption Offset Y";
        CurrField."Typical Field Width" := CurrField."ALR Typical Value Field Width";

        Word := CaptureEngine.CaptureField(Document,lCurrPage."Page No.",CurrField,FALSE);

        IF Word <> '' THEN BEGIN
          IF (DocumentValue.GET(Document."No.",TRUE,CurrField.Code,0)) THEN BEGIN
            DocumentValueCopy := DocumentValue;
            DocumentValueCopy."Line No." := TempDocLine."Line No.";
            DocumentValueCopy.Type := DocumentValueCopy.Type::Line;
            DocumentValueCopy.INSERT;
            DocumentValue.DELETE;
          END;
          CaptureMgt.UpdateFieldValue(Document."No.",TempDocLine."Page No.",TempDocLine."Line No.",CurrField,Word,FALSE,FALSE);

          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE FindFieldByColumnHeading@1113400001(VAR TempDocLine@1210050009 : TEMPORARY Record 6085596;VAR CurrField@1000000001 : Record 6085580);
    VAR
      Template@1113400021 : Record 6085579;
      DocumentValue@1113400000 : Record 6085593;
      DocumentValueBuffer@1000000002 : TEMPORARY Record 6085593;
      DocumentValueNew@1113400022 : Record 6085593;
      CaptionStartWord@1113400004 : ARRAY [100] OF Record 6085592;
      CaptionEndWord@1113400003 : ARRAY [100] OF Record 6085592;
      CaptionPage@1113400005 : Record 6085591;
      CurrPage@1113400017 : Record 6085591;
      CaptionValue@1113400006 : Record 6085593;
      CaptionPageNo@1113400001 : Integer;
      CaptionFound@1113400002 : Boolean;
      PageStop@1113400016 : Boolean;
      lFromTopPos@1113400010 : Integer;
      lFromTopPage@1113400009 : Integer;
      lToBottomPos@1113400008 : Integer;
      lToBottomPage@1113400007 : Integer;
      NewBottom@1113400011 : Integer;
      LineNo@1113400012 : Integer;
      LineHeight@1113400013 : Integer;
      Top@1113400014 : Integer;
      Bottom@1113400015 : Integer;
      Right@1113400018 : Integer;
      FieldLeft@1113400019 : Integer;
      FieldWidth@1113400020 : Integer;
      LastFoundLineNo@1000000000 : Integer;
    BEGIN
      IF NOT Template.GET(TempDocLine."Template No.")THEN
        EXIT;

      // Delete old values
      IF DocumentValue.GET(TempDocLine."Document No.",TRUE,CurrField.Code,TempDocLine."Line No.") THEN
        DocumentValue.DELETE;

      // Find the Caption position on current or previous pages
      CaptionPageNo := TempDocLine."Page No.";
      REPEAT
        CaptionFound := GetStartAndEndCaption(CaptionStartWord,CaptionEndWord,CurrField,TempDocLine."Document No.",CaptionPageNo);
        IF NOT CaptionFound THEN
          CaptionPageNo -= 1;
      UNTIL (CaptionPageNo = 0) OR CaptionFound;

      IF (NOT CaptionFound) THEN
        EXIT;

      //BUG
      //CaptionPageNo := 1;
      CaptionPage.GET(TempDocLine."Document No.",CaptionPageNo);
      GetPositionOfCaption(CaptionPage,CurrField,CaptionStartWord[1],CaptionEndWord[1],CaptionValue,FieldLeft,FieldWidth,Bottom,Top);

      // Hole Position der nÑchsten
      GetRangeToNextLine(TempDocLine,lFromTopPage,lFromTopPos,lToBottomPage,lToBottomPos);
      //BUG
      //lFromTopPage := 1;
      //------------------------------------------------------
      NewBottom := 0;
      LineNo := 1000 * TempDocLine."Page No.";
      LineHeight := 12;

      Top := lFromTopPos;
      Bottom := Top + LineHeight;

      PageStop := FALSE;
      CurrPage.GET(TempDocLine."Document No.",lFromTopPage);
      REPEAT
        LineNo += 1;
        Right := FieldLeft + FieldWidth;
        NewBottom := CaptureTableCell(Template,Document,CurrPage,CurrField,LineNo,Top,FieldLeft,Bottom,Right);
        IF NewBottom > 0 THEN BEGIN
          IF NewBottom > Bottom THEN
            Bottom := NewBottom;

          IF NOT IsFieldValid(CurrField,Document,LineNo)  THEN BEGIN
            DocumentValue.RESET;
            DocumentValue.SETRANGE("Document No.",Document."No.");
            DocumentValue.SETRANGE("Line No.",LineNo);
            DocumentValue.DELETEALL(TRUE);
          END ELSE BEGIN
            //PageStop := TRUE;
            LastFoundLineNo := LineNo;
            PageStop := CurrField."Field Position" = CurrField."Field Position"::AboveAnchor;
            IF DocumentValue.GET(TempDocLine."Document No.",TRUE,CurrField.Code,LastFoundLineNo) THEN BEGIN
              DocumentValueBuffer := DocumentValue;
              DocumentValueBuffer.INSERT;
              DocumentValue.DELETE;
            END;
          END;
        END;

        IF NOT PageStop THEN BEGIN
          Top := Bottom;
          Bottom := Top + LineHeight;//CaptureEngine.GetNextBottom(DocumentPage,Bottom,LineHeight);

          IF (Bottom > CurrPage."Bottom Word Pos.") AND (CurrPage."Page No." < lToBottomPage) THEN BEGIN
            //Neue Seite - es mÅssen Variablen zurÅckgesetzt werden
            CurrPage.GET(CurrPage."Document No.",CurrPage."Page No." + 1);
            CaptionPageNo  := CurrPage."Page No.";
            LineNo := 1000 * CurrPage."Page No.";
            IF GetStartAndEndCaption(CaptionStartWord,CaptionEndWord,CurrField,TempDocLine."Document No.",CaptionPageNo) THEN BEGIN
              CaptionPage.GET(TempDocLine."Document No.",CurrPage."Page No.");
              IF GetPositionOfCaption(CaptionPage,CurrField,CaptionStartWord[1],CaptionEndWord[1],CaptionValue,FieldLeft,FieldWidth,Bottom,Top) THEN BEGIN
                Bottom := Top + LineHeight;
                //LineNo := 1000 * TempDocLine."Page No.";
              END;

            END;
          END ELSE
            IF (Bottom > CurrPage."Bottom Word Pos.") OR ((Bottom > lToBottomPos) AND (CurrPage."Page No." = lToBottomPage)) THEN
              PageStop := TRUE;
        END;
      UNTIL PageStop;

      //Zeilennr. speichern
      IF DocumentValueBuffer.GET(TempDocLine."Document No.",TRUE,CurrField.Code,LastFoundLineNo) THEN BEGIN
        DocumentValueNew := DocumentValueBuffer;
        DocumentValueNew."Line No." := TempDocLine."Line No.";
        DocumentValueNew.INSERT;
        DocumentValueBuffer.DELETE;
      END;
    END;

    LOCAL PROCEDURE FindSubstitutionFieldValue@1113400007(VAR TempDocLine@1000000001 : TEMPORARY Record 6085596);
    VAR
      TemplateField@1000000000 : Record 6085580;
      DocumentValue@1113400002 : Record 6085593;
      SubstitutionDocumentValue@1000000002 : Record 6085593;
      SubstitutionField@1113400003 : Record 6085580;
    BEGIN
      // Function goes through all field, setted up with substitution fields.
      // It checks if the value of the current field is empty and updates the value with the value of the substitution field (if exists).
      TemplateField.SETRANGE("Template No.",TempDocLine."Template No.");
      TemplateField.SETFILTER("Substitution Field",'<>%1','');
      IF TemplateField.FINDSET THEN
        REPEAT
          IF NOT DocumentValue.GET(TempDocLine."Document No.",TRUE,TemplateField.Code,TempDocLine."Line No.") THEN
            IF SubstitutionField.GET(TempDocLine."Template No.",SubstitutionField.Type::Line,TemplateField."Substitution Field") THEN
              IF SubstitutionDocumentValue.GET(TempDocLine."Document No.",TRUE,SubstitutionField.Code,TempDocLine."Line No.") THEN BEGIN
                CaptureMgt.UpdateFieldValue(TempDocLine."Document No.",TempDocLine."Page No.",TempDocLine."Line No.",TemplateField,SubstitutionDocumentValue."Value (Text)",FALSE,FALSE);
                IF DocumentValue.GET(TempDocLine."Document No.",TRUE,TemplateField.Code,TempDocLine."Line No.") THEN BEGIN
                  DocumentValue.Top := SubstitutionDocumentValue.Top;
                  DocumentValue.Bottom := SubstitutionDocumentValue.Bottom;
                  DocumentValue.Left := SubstitutionDocumentValue.Left;
                  DocumentValue.Right := SubstitutionDocumentValue.Right;
                  DocumentValue.MODIFY;
                END;
              END;
        UNTIL TemplateField.NEXT = 0;
    END;

    LOCAL PROCEDURE GetValueFromPreviousValue@1000000004(VAR TempDocLine@1000000001 : TEMPORARY Record 6085596);
    VAR
      TemplateField@1000000000 : Record 6085580;
      DocumentValue@1113400002 : Record 6085593;
    BEGIN
      // Function goes through all field, setted up with substitution fields.
      // It checks if the value of the current field is empty and updates the value with the value of the substitution field (if exists).
      TemplateField.SETRANGE("Template No.",TempDocLine."Template No.");
      TemplateField.SETRANGE("Get Value from Previous Value",TRUE);
      IF TemplateField.FINDSET THEN
        REPEAT
          IF NOT DocumentValue.GET(TempDocLine."Document No.",TRUE,TemplateField.Code,TempDocLine."Line No.") THEN
            IF DocumentValue.GET(TempDocLine."Document No.",TRUE,TemplateField.Code,TempDocLine."Line No."-1) THEN
              CaptureMgt.UpdateFieldValue(TempDocLine."Document No.",TempDocLine."Page No.",TempDocLine."Line No.",TemplateField,DocumentValue."Value (Text)",FALSE,FALSE);
        UNTIL TemplateField.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRangeToNextLine@1113400002(VAR TempDocLine@1000000000 : Record 6085596;VAR SearchFromPage@1113400002 : Integer;VAR SearchFromPos@1113400003 : Integer;VAR SearchToPage@1113400000 : Integer;VAR SearchToPos@1113400001 : Integer);
    VAR
      DocumentValue@1000000001 : Record 6085593;
      CurrPage@1113400004 : Record 6085591;
      StopPos@1000000002 : ARRAY [100] OF Integer;
    BEGIN
      // This function calculates the range until the next position/line
      CLEAR(SearchFromPage);
      CLEAR(SearchFromPos);
      CLEAR(SearchToPage);
      CLEAR(SearchToPos);

      WITH DocumentValue DO BEGIN
        SETCURRENTKEY("Document No.","Is Value",Code,"Line No.");
        SETRANGE("Document No.",TempDocLine."Document No.");
        SETRANGE("Is Value",TRUE);
        SETRANGE(Type,Type::Line);
        SETFILTER("Page No.", '>%1',0);

        GetCurrLinePosition(DocumentValue,TempDocLine."Line No.",SearchFromPage, SearchFromPos, SearchToPage, SearchToPos);

        // Filter for next line
        SETRANGE("Line No.",TempDocLine."Line No." + 1);
        IF FINDSET THEN BEGIN
          REPEAT
            IF (SearchToPage < "Page No.") OR (SearchToPage = 0)  THEN BEGIN
              SearchToPage := "Page No.";
              SearchToPos := 0;
            END;

            IF SearchToPage = "Page No." THEN BEGIN
              IF (SearchToPos < Bottom) OR (SearchToPos = 0) THEN
                 SearchToPos := Bottom ;
            END;
          UNTIL NEXT = 0;
        END ELSE BEGIN
          // As there is no next line, calculate to next header value or bottom of current page
          SETCURRENTKEY("Document No.","Is Value",Code,"Line No.");
          SETRANGE("Document No.",TempDocLine."Document No.");
          SETRANGE("Is Value",FALSE);
          SETRANGE(Type,Type::Header);
          SETRANGE("Page No.",SearchToPage);
          SETFILTER(Top,'>%1',SearchToPos);
          SETRANGE("Line No.", 0);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            IF "Page No." > SearchToPage THEN BEGIN
              SearchToPage := "Page No.";
            END;
            SearchToPos := Top
          END ELSE BEGIN
            SETFILTER("Page No.",'>%1',SearchToPage);
            SETRANGE(Top);
            IF FINDSET(FALSE,FALSE) THEN BEGIN
              IF "Page No." > SearchToPage THEN BEGIN
                SearchToPage := "Page No.";
              END;
              SearchToPos := Top
            END ELSE BEGIN
              CurrPage.GET(TempDocLine."Document No.",SearchToPage);
              SearchToPos := CurrPage."Bottom Word Pos.";
            END;
          END;
        END;
      END;

      GetStopLineRecognitionPositions(StopPos,SearchToPage,SearchToPos);
      IF (StopPos[SearchToPage]>0) AND (StopPos[SearchToPage] <= SearchToPos) THEN
        SearchToPos := StopPos[SearchToPage];
    END;

    LOCAL PROCEDURE GetRangeToPrevLine@1113400009(VAR TempDocLine@1000000000 : Record 6085596;VAR RangeTopPage@1113400002 : Integer;VAR RangeTopPos@1113400003 : Integer;VAR RangeBottomPage@1113400000 : Integer;VAR RangeBottomPos@1113400001 : Integer);
    VAR
      DocumentValue@1000000001 : Record 6085593;
      CurrPage@1113400004 : Record 6085591;
      CurrLineTopPage@1113400008 : Integer;
      CurrLineTopPos@1113400007 : Integer;
      CurrLineBottomPage@1113400006 : Integer;
      CurrLineBottomPos@1113400005 : Integer;
      PrevLineTopPage@1113400012 : Integer;
      PrevLineTopPos@1113400011 : Integer;
      PrevLineBottomPage@1113400010 : Integer;
      PrevLineBottomPos@1113400009 : Integer;
    BEGIN
      // This function calculates the range until the previous position/line
      CLEAR(PrevLineTopPage);
      CLEAR(PrevLineTopPos);
      CLEAR(PrevLineBottomPage);
      CLEAR(PrevLineBottomPos);

      WITH DocumentValue DO BEGIN
        SETCURRENTKEY("Document No.","Is Value",Code,"Line No.");
        SETRANGE("Document No.",TempDocLine."Document No.");
        SETRANGE("Is Value",TRUE);
        SETRANGE(Type,Type::Line);
        SETFILTER("Page No.", '>%1',0);

        GetCurrLinePosition(DocumentValue,TempDocLine."Line No.",CurrLineTopPage,CurrLineTopPos,CurrLineBottomPage,CurrLineBottomPos);

        // Filter for Prev line
        SETRANGE("Line No.",TempDocLine."Line No." - 1);
        IF FINDSET THEN BEGIN
          REPEAT
            IF ("Page No." < PrevLineTopPage) OR (PrevLineTopPage = 0) THEN BEGIN
              PrevLineTopPage := "Page No.";
              CLEAR(PrevLineTopPos);
            END;

            IF ("Page No." > PrevLineBottomPage) OR (PrevLineBottomPage = 0)  THEN BEGIN
              PrevLineBottomPage := "Page No.";
              CLEAR(PrevLineBottomPos);
            END;

            IF PrevLineTopPage = "Page No." THEN
              IF (Top < PrevLineTopPos) OR (PrevLineTopPos = 0) THEN
                PrevLineTopPos := Top;

            IF PrevLineBottomPage = "Page No." THEN
              IF (Bottom > PrevLineBottomPos) OR (PrevLineBottomPos = 0) THEN
                 PrevLineBottomPos := Bottom ;
          UNTIL NEXT = 0;
        END ELSE BEGIN
          // As there is no Prev line, calculate to Prev header value or bottom of current page
          SETCURRENTKEY("Document No.","Is Value",Code,"Line No.");
          SETRANGE("Document No.",TempDocLine."Document No.");
          SETRANGE("Is Value",FALSE);
          SETRANGE(Type,Type::Header);
          SETFILTER("Page No.",'<=%1',"Page No.");
          SETFILTER(Top,'<%1',CurrLineTopPos);
          IF FINDSET(FALSE,FALSE) THEN BEGIN
            PrevLineBottomPos := Bottom;
            PrevLineBottomPage := "Page No.";
          END ELSE BEGIN
            PrevLineBottomPos  := 0;
            PrevLineBottomPage := CurrLineTopPage;
          END;
        END;

        RangeTopPage := PrevLineBottomPage;
        RangeBottomPage := CurrLineTopPage;
        RangeTopPos := PrevLineBottomPos + 1;
        //RangeBottomPos := CurrLineTopPos - 1;
        RangeBottomPos := CurrLineBottomPos - 1;
      END;
    END;

    LOCAL PROCEDURE GetCurrLinePosition@1000000002(VAR DocumentValue@1000000000 : Record 6085593;LineNo@1000000001 : Integer;VAR CurrLineTopPage@1000000005 : Integer;VAR CurrLineTopPos@1000000004 : Integer;VAR CurrLineBottomPage@1000000003 : Integer;VAR CurrLineBottomPos@1000000002 : Integer);
    BEGIN
      WITH DocumentValue DO BEGIN
        // Filter for current line
        SETRANGE("Line No.",LineNo);
        IF FINDSET THEN
        REPEAT
          IF MandatoryFieldBuffer.GET(DocumentValue.GETFILTER("Document No."),Code) THEN BEGIN
            IF ("Page No." < CurrLineTopPage) OR (CurrLineTopPage = 0) THEN BEGIN
              CurrLineTopPage := "Page No.";
              CLEAR(CurrLineTopPos);
            END;

            IF ("Page No." > CurrLineBottomPage) OR (CurrLineBottomPage = 0)  THEN BEGIN
              CurrLineBottomPage := "Page No.";
              CLEAR(CurrLineBottomPos);
            END;

            IF CurrLineTopPage = "Page No." THEN
              IF (Top < CurrLineTopPos) OR (CurrLineTopPos = 0) THEN
                CurrLineTopPos := Top;

            IF CurrLineBottomPage = "Page No." THEN
              IF (Bottom > CurrLineBottomPos) OR (CurrLineBottomPos = 0) THEN
                CurrLineBottomPos := Bottom ;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetLinePositions@1113400011(DocumentNo@1113400005 : Code[20];LineNo@1113400006 : Integer;VAR CurrLineTopPage@1113400003 : Integer;VAR CurrLineTopPos@1113400002 : Integer;VAR CurrLineBottomPage@1113400001 : Integer;VAR CurrLineBottomPos@1113400000 : Integer;IsValue@1113400007 : Boolean);
    VAR
      DocumentValue@1113400004 : Record 6085593;
    BEGIN
      //Find next lines top position
      DocumentValue.SETCURRENTKEY("Document No.","Is Value",Code,"Line No.");
      DocumentValue.SETRANGE("Document No.",DocumentNo);
      DocumentValue.SETRANGE("Is Value",IsValue);
      DocumentValue.SETRANGE(Type,DocumentValue.Type::Line);
      IF NOT IsValue THEN BEGIN
        DocumentValue.SETRANGE("Line No.",0);
        DocumentValue.SETRANGE("Page No.",1);
      END ELSE
        DocumentValue.SETRANGE("Line No.",LineNo);

      DocumentValue.SETFILTER(Top, '>0');

      // Identify current lines outer positions
      IF DocumentValue.FINDSET THEN
      REPEAT
        IF (CurrLineTopPage > DocumentValue."Page No.") OR (CurrLineTopPage = 0) THEN
          CurrLineTopPage := DocumentValue."Page No.";
          CLEAR(CurrLineTopPos);

        IF (CurrLineBottomPage < DocumentValue."Page No.") OR (CurrLineBottomPage = 0)  THEN BEGIN
          CurrLineBottomPage := DocumentValue."Page No.";
          CLEAR(CurrLineBottomPos);
        END;

        IF CurrLineTopPage = DocumentValue."Page No." THEN
          IF (CurrLineTopPos > DocumentValue.Top) OR (CurrLineTopPos = 0) THEN
            CurrLineTopPos := DocumentValue.Top;

        IF CurrLineBottomPage = DocumentValue."Page No." THEN
          IF (CurrLineBottomPos < DocumentValue.Bottom) OR (CurrLineBottomPos = 0) THEN
             CurrLineBottomPos := DocumentValue.Bottom;
        //END;
      UNTIL DocumentValue.NEXT = 0;
    END;

    LOCAL PROCEDURE GetStartAndEndCaption@1160040001(VAR CaptionStartWord@1160040002 : ARRAY [100] OF TEMPORARY Record 6085592;VAR CaptionEndWord@1160040001 : ARRAY [100] OF TEMPORARY Record 6085592;Field@1160040000 : Record 6085580;DocNo@1160040003 : Code[20];PageNo@1160040006 : Integer) : Boolean;
    VAR
      TemplateFieldCaption@1160040005 : Record 6085581;
      CaptureEngine@1160040004 : Codeunit 6085575;
      PrevCaptionStartWord@1113400000 : Record 6085592;
    BEGIN
      CLEAR(CaptionStartWord);
      CLEAR(CaptionEndWord);

      TemplateFieldCaption.SETRANGE("Template No.",Field."Template No.");
      TemplateFieldCaption.SETRANGE(Type,Field.Type);
      TemplateFieldCaption.SETRANGE(Code,Field.Code);
      IF TemplateFieldCaption.FINDSET THEN
        REPEAT
          IF CaptureEngine.FindCaption(DocNo,PageNo,Field,TemplateFieldCaption,CaptionStartWord,CaptionEndWord) THEN
            EXIT(TRUE);
        UNTIL (TemplateFieldCaption.NEXT = 0) OR ((CaptionStartWord[1].Word <> '') AND (CaptionEndWord[1].Word <> ''));
    END;

    LOCAL PROCEDURE GetPositionOfCaption@1113400003(CurrPage@1113400004 : Record 6085591;CaptionTemplateField@1113400001 : Record 6085580;CaptionStartWord@1113400003 : Record 6085592;CaptionEndWord@1113400002 : Record 6085592;DocumentValue@1113400000 : Record 6085593;VAR FieldLeft@1113400011 : Integer;VAR FieldWidth@1113400010 : Integer;VAR Bottom@1113400009 : Integer;VAR Top@1113400008 : Integer) CaptionValueFound : Boolean;
    VAR
      Template@1113400007 : Record 6085579;
      CaptureEngine@1113400006 : Codeunit 6085575;
    BEGIN
      Template.GET(CaptionTemplateField."Template No.");

      //Hole Positionen der caption
        CaptionValueFound := CaptureMgt.CaptureFromPos(CurrPage,CaptionTemplateField,0,FALSE,CaptionStartWord.Top,CaptionStartWord.Left,
          CaptionEndWord.Bottom,CaptionEndWord.Right,DocumentValue) <> '';

        IF CaptionValueFound THEN BEGIN
          FieldLeft := CaptionStartWord.Left +
          ROUND(CaptionTemplateField."Caption Offset X" * CaptureEngine.GetDPIFactor(CaptionTemplateField."Offset DPI",CurrPage."TIFF Image Resolution"),1);

          IF NOT Template."First Table Line Has Captions" THEN
            Bottom := CaptionStartWord.Top
          ELSE IF CaptionStartWord.Bottom > Bottom THEN
            Bottom := CaptionStartWord.Bottom;

          IF FieldWidth < CaptionEndWord.Right - CaptionStartWord.Left THEN
            FieldWidth := CaptionEndWord.Right - CaptionStartWord.Left;

          Top := CaptionStartWord.Top;
        END;
    END;

    LOCAL PROCEDURE CaptureTableCell@1000000005(VAR Template@161024014 : Record 6085579;VAR Document@1000000009 : Record 6085590;VAR Page@1000000000 : Record 6085591;VAR Field@1000000010 : Record 6085580;LineNo@1000000003 : Integer;Top@1000000007 : Integer;Left@1000000006 : Integer;Bottom@1000000005 : Integer;Right@1000000004 : Integer) : Integer;
    VAR
      Value@1000000008 : Record 6085593;
    BEGIN
      IF (Right - Left <= 0) OR (Bottom-Top <= 0) THEN
        EXIT;

      CaptureMgt.CaptureFromPos(Page,Field,LineNo,TRUE,Top,Left,Bottom,Right,Value);
      Value.FIND('=');

      IF (Value.IsBlank) OR TableCellAlreadyCaptured(Template,Page,Value) THEN
        Value.DELETE
      ELSE
        EXIT(Value.Bottom);
    END;

    LOCAL PROCEDURE TableCellAlreadyCaptured@1000000007(VAR Template@161024012 : Record 6085579;VAR Page@1000000002 : Record 6085591;VAR Value@1000000000 : Record 6085593) : Boolean;
    VAR
      Value2@1000000001 : Record 6085593;
      CaptureEngine@1113400000 : Codeunit 6085575;
    BEGIN
      Value2.SETCURRENTKEY("Document No.","Is Value",Type,"Page No.");
      IF NOT Template."First Table Line Has Captions" THEN
        Value2.SETRANGE("Is Value",TRUE);
      Value2.SETRANGE("Document No.",Page."Document No.");
      Value2.SETRANGE(Type,Value2.Type::Line);
      Value2.SETRANGE("Page No.",Value."Page No.");

      Value.Top := Value.Top + ROUND((Value.Bottom - Value.Top) / 2,1);
      Value.Left := Value.Left + 3;

      IF Value2.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF (NOT ((Value2.Code = Value.Code) AND (Value2."Line No." = Value."Line No."))) THEN
            IF CaptureEngine.IntersectsWith(Value,Value2) THEN
              EXIT(TRUE);
        UNTIL Value2.NEXT = 0;
    END;

    LOCAL PROCEDURE IsFieldValid@1113400005(VAR CaptionField@1113400000 : Record 6085580;Document@1000000001 : Record 6085590;LineNo@1000000002 : Integer) : Boolean;
    VAR
      Field@1000000000 : Record 6085580;
      Value@161024012 : Record 6085593;
    BEGIN
      IF (CaptionField."Data Type" = Field."Data Type"::Number) AND (NOT CaptionField.Required) THEN
        IF Value.GET(Document."No.",TRUE,CaptionField.Code,LineNo) THEN
          IF NOT Value."Is Valid" THEN
            EXIT
          ELSE
            EXIT(CaptureMgt.ParseNumber(Field,Value."Value (Text)",Value."Value (Decimal)"));

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FillSortedFieldBuffer@1113400004(VAR TempSortedDocumentField@1113400000 : Record 6085595;VAR MandatoryField@1000000000 : Record 6085595;TempDocLine@1113400003 : TEMPORARY Record 6085596);
    VAR
      TemplateField@1113400001 : Record 6085580;
    BEGIN
      WITH TemplateField DO BEGIN
        SETRANGE("Template No.",TempDocLine."Template No.");
        SETRANGE(Type,Type::Line);
        //SETFILTER("Advanced Line Recognition Type", '<>%1',"Advanced Line Recognition Type"::Default);
        IF FINDSET THEN
          REPEAT
            IF "Advanced Line Recognition Type" <> "Advanced Line Recognition Type"::Default THEN BEGIN
              TempSortedDocumentField."Document No." := TempDocLine."Document No.";
              TempSortedDocumentField."Sort Order" := Sorting;
              TempSortedDocumentField."Field Code" := Code;
              TempSortedDocumentField.INSERT;
            END ELSE BEGIN
              IF Required THEN BEGIN
                MandatoryField."Document No." := TempDocLine."Document No.";
                MandatoryField."Sort Order" := Sorting;
                MandatoryField."Field Code" := Code;
                MandatoryField.INSERT;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetStopLineRecognitionPositions@1000000001(VAR StopPos@1000000003 : ARRAY [100] OF Integer;CurrPageNo@1000000002 : Integer;Bottom@1000000004 : Integer);
    VAR
      Field@1000000000 : Record 6085580;
      Value@1000000001 : Record 6085593;
    BEGIN
      Field.RESET;
      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETFILTER("Stop Lines Recognition",'>%1',Field."Stop Lines Recognition"::" ");
      IF Field.FINDSET THEN
        REPEAT
          Value.RESET;
          Value.SETRANGE("Document No.",Document."No.");
          Value.SETRANGE(Type,Field.Type);
          Value.SETRANGE(Code,Field.Code);
          Value.SETRANGE("Page No.",CurrPageNo);
          CASE Field."Stop Lines Recognition" OF
            Field."Stop Lines Recognition"::"If Caption is on same line",
            Field."Stop Lines Recognition"::"If Caption is on same line (continue on next page)":
              Value.SETRANGE("Is Value",FALSE);
            Field."Stop Lines Recognition"::"If Value is on same line",
            Field."Stop Lines Recognition"::"If Value is on same line (continue on next page)":
              Value.SETRANGE("Is Value",TRUE);
            Field."Stop Lines Recognition"::"If Caption or Value is on same line",
            Field."Stop Lines Recognition"::"If Caption or Value is on same line (continue on next page)":
              Value.SETRANGE("Is Value");
          END;

          Value.SETFILTER(Top,'>%1',0);
          IF Value.FINDFIRST THEN BEGIN
            IF (StopPos[Value."Page No."] = 0) OR (StopPos[Value."Page No."] > Value.Top) THEN
              StopPos[Value."Page No."] := Value.Top;
          END;
        UNTIL Field.NEXT = 0;
    END;

    BEGIN
    {
      -----------------------------------------------------
      CKL Software GmbH

      Ver Date     Usr Change
      -----------------------------------------------------
      001 20180326 SRA Initial Commit
      002 20180325 SRA New functions
      007 20190613 SRA New Object number due to conflicts with the default training objects
      008 20191106 SRA Bug with Page 0 error message fixed
                       Bug fixed that resulted in wrong data when a page break was inside lines of a position
      -----------------------------------------------------
    }
    END.
  }
}

OBJECT Codeunit 61002 Adv. Purch. Doc. - Line Val.
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=DCW13.70.00.6.00,ALR010;
  }
  PROPERTIES
  {
    TableNo=6085596;
    OnRun=VAR
            Document@6085588 : Record 6085590;
            Field@6085587 : Record 6085580;
            DocumentComment@6085673 : Record 6085594;
            EmptyField@6085674 : Record 6085580;
            PurchDocMgt@6085585 : Codeunit 6085709;
            CaptureMgt@6085584 : Codeunit 6085576;
            DCAppMgt@6085591 : Codeunit 6085722;
            Quantity@6085583 : Decimal;
            UnitCost@6085582 : Decimal;
            LineAmount@6085581 : Decimal;
            DiscAmount@6085580 : Decimal;
            DiscPct@6085579 : Decimal;
            LineAmount2@6085578 : Decimal;
            AmountRoundingPrecision@6085577 : Decimal;
            OtherCharges@6085574 : Decimal;
            UnitCharge@6085573 : Decimal;
            LineDescription@6085590 : Text[250];
            CommentText@6085586 : Text[1024];
            LineAccountNo@6085589 : Code[250];
            CurrencyCode@6085576 : Code[10];
            CommentType@6085575 : 'Information,Warning,Error';
            ALRTemplateField@1000000000 : Record 6085580;
          BEGIN
            IF NOT Document.GET("Document No.") THEN
              EXIT;

            LineAccountNo := PurchDocMgt.GetLineAccountNo(Document,"Line No.");
            LineDescription := PurchDocMgt.GetLineDescription(Document,"Line No.");
            Quantity := PurchDocMgt.GetLineQuantity(Document,"Line No.");
            UnitCost := PurchDocMgt.GetLineUnitCost(Document,"Line No.");
            DiscPct := PurchDocMgt.GetLineDiscPct(Document,"Line No.");
            DiscAmount := PurchDocMgt.GetLineDiscAmount(Document,"Line No.");
            LineAmount := PurchDocMgt.GetLineAmount(Document,"Line No.");
            OtherCharges := PurchDocMgt.GetLineOtherCharges(Document,"Line No.");
            UnitCharge := PurchDocMgt.GetLineUnitCharge(Document,"Line No.");
            CurrencyCode := PurchDocMgt.GetCurrencyCode(Document);

            //ALR >>>
            //IF (LineAccountNo = '') AND (Quantity = 0) AND (UnitCost = 0) AND (LineAmount = 0) AND (DiscPct = 0) AND
            //  (DiscAmount = 0) AND (LineDescription = '')
            //THEN BEGIN
            //  Skip := TRUE;
            //  EXIT;
            //END;
            ALRTemplateField.SETRANGE("Template No.",Rec."Template No.");
            ALRTemplateField.SETRANGE(Type,ALRTemplateField.Type::Line);
            ALRTemplateField.SETRANGE(Required,TRUE);
            IF ALRTemplateField.FINDSET THEN
            REPEAT
              IF STRLEN(CaptureMgt.GetValueAsText("Document No.","Line No.",ALRTemplateField)) = 0 THEN
                Skip := TRUE;
            UNTIL ALRTemplateField.NEXT = 0;
            IF Skip THEN
              EXIT;
            //ALR <<<

            Field.SETRANGE("Template No.","Template No.");
            Field.SETRANGE(Type,Field.Type::Line);
            IF Field.FINDSET THEN
              REPEAT
                IF NOT CaptureMgt.IsValidValue(Field,"Document No.","Line No.") THEN BEGIN
                  // No need to write an error here as an error written in C6085580 - CDC Doc. - Field Validation
                  OK := FALSE;
                  EXIT;
                END;
              UNTIL Field.NEXT = 0;

            IF NOT DCAppMgt.GetAmountRoundingPrecision(CurrencyCode,AmountRoundingPrecision) THEN BEGIN
              OK := FALSE;
              EXIT;
            END;

            LineAmount2 := ROUND(Quantity * (UnitCost + UnitCharge),AmountRoundingPrecision);
            LineAmount2 += ROUND(OtherCharges,AmountRoundingPrecision);

            IF DiscAmount <> 0 THEN
              LineAmount2 := LineAmount2 - ROUND(DiscAmount,AmountRoundingPrecision)
            ELSE
              IF DiscPct <> 0 THEN BEGIN
                // We are rounding the discount amount before we subtract it from LineAmount as this is how standard NAV behaves on an Invoice
                DiscAmount :=  ROUND(LineAmount2 * DiscPct / 100,AmountRoundingPrecision);
                LineAmount2 := LineAmount2 - DiscAmount;
              END;

            // We use AmountRoundingPrecision as any roundings should be equal to AmountRoundingPrecision. In this situation,
            // we want the used to be able to register the document.
            // When a document is registered with a rounding difference, the
            OK := (ABS(LineAmount - LineAmount2) <= AmountRoundingPrecision);

            IF "Create Comment" THEN
              IF LineAmount <> LineAmount2 THEN BEGIN
                IF OK THEN BEGIN
                  CommentType := CommentType::Warning;
                  CommentText := WarningTxt;
                END ELSE BEGIN
                  CommentType := CommentType::Error;
                  CommentText := '%1';
                END;

                // LineAmount is Line Amount as captured/keyed in on the document line. We therefore want to show all decimals.
                IF (DiscPct = 0) AND (DiscAmount = 0) THEN
                  DocumentComment.Add(Document,EmptyField,"Line No.",DocumentComment.Area::Validation,CommentType,
                    STRSUBSTNO(CommentText,STRSUBSTNO(LineAmountDiffTxt,"Line No.",DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                      DCAppMgt.FormatAmount(LineAmount2,CurrencyCode))))
                ELSE
                  IF DiscPct <> 0 THEN
                    DocumentComment.Add(Document,EmptyField,"Line No.",DocumentComment.Area::Validation,CommentType,
                      STRSUBSTNO(CommentText,STRSUBSTNO(LineAmountDiffCalcDiscAmtTxt,"Line No.",
                        DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                        DCAppMgt.FormatAmount(LineAmount2,CurrencyCode),DiscPct,DCAppMgt.FormatAmount(DiscAmount,CurrencyCode))))
                  ELSE
                    DocumentComment.Add(Document,EmptyField,"Line No.",DocumentComment.Area::Validation,CommentType,
                      STRSUBSTNO(CommentText,STRSUBSTNO(LineAmountDiffCapDiscAmtTxt,"Line No.",
                        DCAppMgt.FormatAmountNoRounding(LineAmount,CurrencyCode),
                        DCAppMgt.FormatAmount(LineAmount2,CurrencyCode),DCAppMgt.FormatAmount(DiscAmount,CurrencyCode))));
              END;
          END;

  }
  CODE
  {
    VAR
      LineAmountDiffCalcDiscAmtTxt@6085576 : TextConst 'DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich in Zeile %1 vom berechneten Zeilenbetrag (%3), der mit dem erfassten Rabatt % (%4) berechnet wurde, um den Rabattbetrag (%5) zu berechnen.;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount % (%4) to calculate Discount Amount (%5) on line %1.';
      LineAmountDiffCapDiscAmtTxt@6085577 : TextConst 'DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich in Zeile %1 von dem berechneten Zeilenbetrag (%3), der mit dem erfassten Rabattbetrag (%4) berechnet wurde.;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) using captured Discount Amount (%4) on line %1.';
      LineAmountDiffTxt@6085573 : TextConst 'DEU=Der erfasste Zeilenbetrag (%2) unterscheidet sich vom in Zeile %1 berechneten Zeilenbetrag (%3).;ENU=Line Amount captured (%2) is different from Line Amount calculated (%3) on line %1.';
      WarningTxt@6085574 : TextConst 'DEU=WARNUNG: %1;ENU=WARNING: %1';

    BEGIN
    {
      This codeunit validates lines on purchase documents
    }
    END.
  }
}

OBJECT Codeunit 6085575 CDC Capture Engine
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=DCW13.70.00.6.00.01,ALR010;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GlobalWords@1000000001 : TEMPORARY Record 6085592;
      CaptureMgt@1000000000 : Codeunit 6085576;
      ContiniaLicenseMgt@1000 : Codeunit 6192771;
      Window@1000000004 : Dialog;
      BuffWordDocNo@1000000002 : Code[20];
      BuffWordPageNo@1000000003 : Integer;
      Text001@1000000005 : TextConst 'DEU=Verarbeite Dokument\#1######################;ENU=Processing Document\#1######################';
      Text002@1000000006 : TextConst 'DEU=Identifikation durchfÅhren;ENU=Performing Identfication';
      Text003@1000000007 : TextConst 'DEU=Verarbeite Kopf;ENU=Processing Header';
      Text004@1000000008 : TextConst 'DEU=Verarbeite Zeilen;ENU=Processing Lines';
      HideWindow@161024012 : Boolean;
      IdentificationFieldsTxt@6085573 : TextConst 'DEU=Identifikationsfelder: %1;ENU=Identification Fields: %1';
      XmlDoc@6085574 : Codeunit 6192800;
      ObjType@1001 : 'TableData,Table,Form,Report,Dataport,Codeunit,XMLport,MenuSuite,Page,System,FieldNumber';
      ErrorNoXMLModule@1002 : TextConst 'ENU="You do not have access to Document Capture XML Import module. "';
      "<ALR Var>"@1000000014 : Integer;
      LineRegionFromPage@1000000013 : Integer;
      LineRegionFromPos@1000000012 : Integer;
      LineRegionToPage@1000000011 : Integer;
      LineRegionToPos@1000000010 : Integer;
      "</ALR Var>"@1000000009 : Integer;

    PROCEDURE CaptureDocument@1000000001(VAR Document@1000000000 : Record 6085590);
    VAR
      Template@1000000005 : Record 6085579;
      Field@1000000001 : Record 6085580;
      Value@1000000002 : Record 6085593;
      TemplateGroup@1000000004 : Record 6085575;
      Comment@1000000007 : Record 6085594;
      CDCModuleLicense@6085573 : Codeunit 6086008;
      DocumentComment@1000 : Record 6085594;
    BEGIN
      Document.TESTFIELD(Status,Document.Status::Open);

      IF GUIALLOWED AND (NOT HideWindow) THEN BEGIN
        Window.OPEN(Text001);
        Window.UPDATE(1,Text002);
      END;

      IF (Document."File Type" = Document."File Type"::XML) AND NOT ContiniaLicenseMgt.HasLicenseAccessToDCXml THEN BEGIN
        Document.DeleteComments(DocumentComment.Area::Capture);
        DocumentComment.Add(Document,Field,0,DocumentComment.Area::Capture,DocumentComment."Comment Type"::Error,
          ErrorNoXMLModule);
      END;

      IF (Document."Source Record ID Tree ID" = 0) OR (Document."Template No." = '') THEN BEGIN
        FindDocumentSource(Document);

        IF Document."Template No." = '' THEN BEGIN
          IF Document."Source Record ID Tree ID" <> 0 THEN
            Document.ValidateDocument;

          IF GUIALLOWED AND (NOT HideWindow) THEN
            Window.CLOSE;

          EXIT;
        END;
      END;
      Template.GET(Document."Template No.");

      Value.SETRANGE("Document No.",Document."No.");
      Value.SETRANGE("Is Value",TRUE);
      Value.DELETEALL(TRUE);

      IF GUIALLOWED AND (NOT HideWindow) THEN
        Window.UPDATE(1,Text003);

      Document."Match Status" := Document."Match Status"::Unmatched;
      Document.MODIFY;
      Document.DeleteComments(Comment.Area::Match);

      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      IF Field.FINDSET(FALSE,FALSE) THEN
        REPEAT
          IF (NOT UseFixedValue(Document,Field,0)) THEN
            IF Field."Search for Value" THEN
              IF CaptureField(Document,0,Field,TRUE) = '' THEN
                CaptureMgt.UpdateFieldValue(Document."No.",0,0,Field,'',TRUE,FALSE);
        UNTIL Field.NEXT = 0;

      IF CDCModuleLicense.IsAdvCaptureActivated(FALSE) THEN
        IF (Template."Recognize Lines" = Template."Recognize Lines"::Yes) AND (Template."Codeunit ID: Line Capture" <> 0) THEN BEGIN
          IF GUIALLOWED AND (NOT HideWindow) THEN
            Window.UPDATE(1,Text004);

          IF ContiniaLicenseMgt.HasExecutePermission(ObjType::Codeunit,Template."Codeunit ID: Line Capture") THEN
            CODEUNIT.RUN(Template."Codeunit ID: Line Capture",Document);
        END;

      Document.AfterCapture;
      Document.ValidateDocument;

      IF GUIALLOWED AND (NOT HideWindow) THEN
        Window.CLOSE;
    END;

    PROCEDURE CaptureField@1000000006(VAR Document@1000000001 : Record 6085590;PageNo@1160040001 : Integer;VAR Field@1000000000 : Record 6085580;UpdateFieldCaption@1160040000 : Boolean) Word : Text[1024];
    VAR
      DummyFieldCaption@1000000002 : Record 6085581;
    BEGIN
      EXIT(CaptureField2(Document,PageNo,Field,UpdateFieldCaption,DummyFieldCaption));
    END;

    PROCEDURE CaptureField2@6085573(VAR Document@1000000001 : Record 6085590;PageNo@1160040001 : Integer;VAR Field@1000000000 : Record 6085580;UpdateFieldCaption@1160040000 : Boolean;VAR FieldCaption@6085573 : Record 6085581) Word : Text[1024];
    VAR
      Page@1000000006 : Record 6085591;
      Value@1000000003 : Record 6085593;
      PrevPage@1160040002 : Record 6085591;
      PrevValue@1000000004 : Record 6085593;
      Top@1160040003 : Integer;
      Left@1160040004 : Integer;
      Bottom@1160040005 : Integer;
      Right@1160040006 : Integer;
    BEGIN
      IF Document."File Type" = Document."File Type"::XML THEN BEGIN
        Word := CaptureMgt.CaptureFromXML(Document,Field,0,TRUE,Value,XmlDoc);
        EXIT(Word);
      END;

      FieldCaption.SETCURRENTKEY("Template No.",Type,Code,"Caption Length");
      FieldCaption.SETRANGE("Template No.",Field."Template No.");
      FieldCaption.SETRANGE(Type,Field.Type);
      FieldCaption.SETRANGE(Code,Field.Code);
      FieldCaption.SETFILTER(Caption,'<>%1','');
      FieldCaption.ASCENDING(FALSE);

      // *********************************************************************************************************************************
      // FIND THE VALUE BY OFFSETTING CAPTION
      // *********************************************************************************************************************************
      IF (Field."Caption Offset X" <> 0) OR (Field."Caption Offset Y" <> 0) OR (Field."Caption Is Part Of Value") THEN BEGIN
        IF FieldCaption.FIND('-') THEN
          REPEAT
            Word := FindWordFromCaption(Document."No.",PageNo,Field,FieldCaption,FALSE);
            IF Word <> '' THEN BEGIN
              IF UpdateFieldCaption THEN
                CaptureMgt.UpdateFieldCaption(Field,FieldCaption."Page No.",FieldCaption.Top,FieldCaption.Left,FieldCaption.DPI,
                  FieldCaption.Caption);
              EXIT(Word);
            END;
          UNTIL FieldCaption.NEXT = 0;
      END;

      // *********************************************************************************************************************************
      // FIND THE VALUE BY SEARCHING FROM THE CAPTION LIST
      // *********************************************************************************************************************************
      IF (Field."Caption Offset X" = 0) OR (Field."Caption Offset Y" = 0) THEN BEGIN
        IF FieldCaption.FIND('-') THEN
          REPEAT
            Word := FindWordFromCaption(Document."No.",PageNo,Field,FieldCaption,TRUE);
            IF Word <> '' THEN BEGIN
              IF UpdateFieldCaption THEN
                CaptureMgt.UpdateFieldCaption(Field,FieldCaption."Page No.",FieldCaption.Top,FieldCaption.Left,FieldCaption.DPI,
                  FieldCaption.Caption);
              EXIT(Word);
            END;
          UNTIL FieldCaption.NEXT = 0;
      END;

      // *********************************************************************************************************************************
      // FIND THE VALUE FROM THE REGION ALONE
      // *********************************************************************************************************************************
      IF NOT Field."Caption Mandatory" THEN BEGIN
        PrevValue.SETCURRENTKEY("Template No.","Is Value",Type,Code);
        PrevValue.SETRANGE("Template No.",Field."Template No.");
        PrevValue.SETRANGE("Is Value",TRUE);
        PrevValue.SETRANGE(Type,Field.Type);
        PrevValue.SETRANGE(Code,Field.Code);
        PrevValue.SETFILTER("Document No.",'<>%1',Document."No.");
        PrevValue.SETFILTER(Top,'>%1',0);
        PrevValue.SETFILTER(Left,'>%1',0);
        IF PrevValue.FINDLAST THEN BEGIN
          Page.SETRANGE("Document No.",Document."No.");
          IF PageNo > 0 THEN
            Page.SETRANGE("Page No.",PageNo);
          IF Field."Default Page Source" = Field."Default Page Source"::"First Page" THEN
            Page.FINDFIRST
          ELSE
            Page.FINDLAST;

          PrevPage.GET(PrevValue."Document No.",PrevValue."Page No.");

          Top := ROUND(PrevValue.Top * GetDPIFactor(PrevPage."TIFF Image Resolution",Page."TIFF Image Resolution"),1);
          Left := ROUND(PrevValue.Left * GetDPIFactor(PrevPage."TIFF Image Resolution",Page."TIFF Image Resolution"),1);
          Bottom := ROUND(PrevValue.Bottom * GetDPIFactor(PrevPage."TIFF Image Resolution",Page."TIFF Image Resolution"),1);

          IF Field."Typical Field Width" <> 0 THEN
            Right := Left + ROUND(Field."Typical Field Width" * GetDPIFactor(150,Page."TIFF Image Resolution"),1)
          ELSE
            Right := ROUND(PrevValue.Right * GetDPIFactor(PrevPage."TIFF Image Resolution",Page."TIFF Image Resolution"),1);

          Word := CaptureMgt.CaptureFromPos(Page,Field,0,TRUE,Top,Left,Bottom,Right,Value);

          IF CaptureMgt.ParseField(Field,Word,TRUE,Document."No.") THEN
            EXIT(Word);
        END;
      END;
    END;

    PROCEDURE FindDocumentSource@1160040002(VAR Document@1160040000 : Record 6085590);
    BEGIN
      // *********************************************************************************************************************************
      // FIND THE SOURCE ID OF A DOCUMENT
      // *********************************************************************************************************************************

      // STEP 1: FIND SOURCE WITH SEARCH TEXTS
      IF FindSourceWithSearchTexts(Document) THEN
        EXIT;

      // STEP 2: FIND SOURCE WITH IDENTIFICATION TEMPLATE
      IF FindSourceWithIdentTemplate(Document) THEN
        EXIT;

      // STEP 3: FIND SOURCE WITH IDENTIFICATION FIELDS
      FindSourceWithIdentFields(Document);
    END;

    PROCEDURE FindSourceWithSearchTexts@1160040001(VAR Document@1160040000 : Record 6085590) : Boolean;
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"CDC Doc. - Search Word Ident.",Document);
      IF Document."Template No." <> '' THEN
        EXIT(TRUE);
    END;

    PROCEDURE FindSourceWithIdentTemplate@1160040000(VAR Document@1160040000 : Record 6085590) : Boolean;
    VAR
      DocCat@1160040006 : Record 6085575;
      Template@1160040005 : Record 6085579;
      IdentTemplate@1002 : Record 6085579;
      BestMatchPoints@6085573 : Integer;
      BestSourceRecTreeID@1004 : Integer;
      BestIdentifiedBy@1005 : Text[1024];
      CurrXmlMasterTemplate@1000 : Code[20];
      CurrSourceRecTreeID@1003 : Integer;
      Template2@1001 : Record 6085579;
    BEGIN
      Template.SETCURRENTKEY("Category Code",Type);
      Template.SETRANGE("Category Code",Document."Document Category Code");
      Template.SETRANGE(Type,Template.Type::Identification);

      IF Document."File Type" = Document."File Type"::XML THEN BEGIN
        IF NOT ContiniaLicenseMgt.HasLicenseAccessToDCXml THEN
          EXIT(FALSE);

        Template.SETRANGE("Data Type",Template."Data Type"::XML);
        Template.SETRANGE(Type,Template.Type::Master);

        CurrXmlMasterTemplate := Document."XML Master Template No.";
        CurrSourceRecTreeID := Document."Source Record ID Tree ID";

        IF Template.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IdentTemplate.GET(Template."XML Ident. Template No.");
            IF IdentTemplate."Codeunit ID: After Capture" > 0 THEN BEGIN
              Document."Temp Ident. Template No." := IdentTemplate."No.";
              Document."Temp Master Template No." := Template."No.";
              IF CurrSourceRecTreeID = 0 THEN
                Document."Source Record ID Tree ID" := 0;

              CODEUNIT.RUN(IdentTemplate."Codeunit ID: After Capture",Document);
              IF Document."XML Identification Points" > BestMatchPoints THEN BEGIN
                BestMatchPoints := Document."XML Identification Points";
                Document."XML Master Template No." := Template."No.";
                Document."XML Ident. Template No." := Document."Temp Ident. Template No.";
                BestSourceRecTreeID := Document."Source Record ID Tree ID";
                BestIdentifiedBy := Document."Identified by";
              END;
            END;
          UNTIL (Template.NEXT = 0);

        IF (BestMatchPoints > 0) AND (CurrXmlMasterTemplate <> Document."XML Master Template No.") THEN BEGIN
          Document.VALIDATE("XML Master Template No.");
          Document."Temp Ident. Template No." := '';
          Document."Temp Master Template No." := '';
          Document."XML Identification Points" := 0;
          Document.MODIFY(TRUE);
        END;

        IF BestSourceRecTreeID <> 0 THEN BEGIN
          Document.VALIDATE("Identified by",BestIdentifiedBy);
          Document.VALIDATE("Source Record ID Tree ID",BestSourceRecTreeID);
          Document.MODIFY(TRUE);
        END;

      END ELSE BEGIN
        Template.SETRANGE("Data Type",Template."Data Type"::PDF);
        IF Template.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF Template."Codeunit ID: After Capture" > 0 THEN
              CODEUNIT.RUN(Template."Codeunit ID: After Capture",Document);
          UNTIL (Document."Source Record ID Tree ID" <> 0) OR (Template.NEXT = 0);
      END;

      EXIT(Document."Source Record ID Tree ID" <> 0);
    END;

    PROCEDURE FindSourceWithIdentFields@1160040007(VAR Document@1160040000 : Record 6085590) : Boolean;
    VAR
      DocCat@1160040005 : Record 6085575;
      RecIDMgt@1160040004 : Codeunit 6085604;
      RecRef@1160040003 : RecordRef;
      RecID@1160040002 : RecordID;
      MatchPoints@1160040001 : Integer;
      SourceID@6085573 : Integer;
      IdentFieldNameValue@6085574 : Text[1024];
    BEGIN
      GetRecFromIdentField(Document,1,RecID,MatchPoints,IdentFieldNameValue);
      IF MatchPoints >= 15 THEN BEGIN
        DocCat.GET(Document."Document Category Code");
        IF DocCat."Source Table No." <> 0 THEN BEGIN
          RecRef.GET(RecID);
          SourceID := RecIDMgt.GetRecIDTreeID(RecRef,TRUE);
          COMMIT;

          Document.VALIDATE("Source Record ID Tree ID",SourceID);
          Document."Identified by" := COPYSTR(STRSUBSTNO(IdentificationFieldsTxt,IdentFieldNameValue),1,
            MAXSTRLEN(Document."Identified by"));
          Document.MODIFY(TRUE);
          EXIT(TRUE);
        END;
      END ELSE
        Document."Identified by" := '';
    END;

    PROCEDURE FindWordFromCaption@1000000013(DocumentNo@1000000003 : Code[20];PageNo@1160040000 : Integer;VAR Field@1000000001 : Record 6085580;VAR FieldCaption@1000000000 : Record 6085581;DynamicsSearch@1000000018 : Boolean) Word : Text[1024];
    VAR
      CaptionStartWord@1000000005 : ARRAY [100] OF Record 6085592;
      CaptionEndWord@1000000004 : ARRAY [100] OF Record 6085592;
      Page@1000000009 : Record 6085591;
      LeftWord@1000000019 : TEMPORARY Record 6085592;
      TopWord@1000000020 : TEMPORARY Record 6085592;
      Value@1000000012 : Record 6085593;
      WordFunc@1000000011 : Codeunit 6085574;
      Length@1000000002 : Integer;
      Height@1000000006 : Integer;
      OffsetX@1000000007 : Integer;
      OffsetY@1000000008 : Integer;
      Top@1000000014 : Integer;
      Left@1000000015 : Integer;
      Bottom@1000000016 : Integer;
      Right@1000000017 : Integer;
      i@1000000010 : Integer;
      Stop@1000000013 : Boolean;
    BEGIN
      IF NOT FindCaption(DocumentNo,PageNo,Field,FieldCaption,CaptionStartWord,CaptionEndWord) THEN
        EXIT;

      i := 1;
      REPEAT
        Page.GET(DocumentNo,CaptionStartWord[i]."Page No.");

        Length := ROUND(IIFInt(Field."Typical Field Width" <> 0,Field."Typical Field Width",40) *
          GetDPIFactor(150,Page."TIFF Image Resolution"),1);
        Height := ROUND(IIFInt(Field."Typical Field Height" <> 0,Field."Typical Field Height",20) *
          GetDPIFactor(150,Page."TIFF Image Resolution"),1);

        // STORE THE CAPTION
        CaptureMgt.CaptureFromPos(Page,Field,0,FALSE,
          CaptionStartWord[i].Top,CaptionStartWord[i].Left,CaptionEndWord[i].Bottom,CaptionEndWord[i].Right,Value);

        IF NOT DynamicsSearch THEN BEGIN
          Top := IIFInt(Field."Caption Is Part Of Value",CaptionStartWord[i].Top,CaptionStartWord[i].Top +
            ROUND(Field."Caption Offset Y" * GetDPIFactor(Field."Offset DPI",Page."TIFF Image Resolution"),1));
          Left := IIFInt(Field."Caption Is Part Of Value",CaptionStartWord[i].Left,CaptionStartWord[i].Left +
            ROUND(Field."Caption Offset X" * GetDPIFactor(Field."Offset DPI",Page."TIFF Image Resolution"),1));
          Bottom := Top + Height;
          Right := Left + Length;

          Word := CaptureMgt.CaptureFromPos(Page,Field,0,TRUE,Top,Left,Bottom,Right,Value);
          CaptureMgt.ParseField(Field,Word,TRUE,DocumentNo);
          EXIT(Word);
        END;

      // *******************************************************************************************************************************
      // IF DATATYPE IS NUMBER THEN TRY TO FIND THE VALUE BELOW CAPTION
      // *******************************************************************************************************************************
        IF Field."Data Type" = Field."Data Type"::Number THEN BEGIN
          Top := CaptionStartWord[i].Bottom + ROUND(((CaptionStartWord[i].Bottom - CaptionStartWord[i].Top) / 2),1);
          Left := CaptionStartWord[i].Left;
          Bottom := Top + ((CaptionStartWord[i].Bottom - CaptionStartWord[i].Top));
          Right := CaptionEndWord[i].Right;

          Word := CaptureMgt.CaptureFromPos(Page,Field,0,TRUE,Top,Left,Bottom,Right,Value);

          IF CaptureMgt.ParseField(Field,Word,TRUE,DocumentNo) THEN
            EXIT(Word);
        END;

      // *******************************************************************************************************************************
      // SEARCH TO THE RIGHT OF CAPTION
      // *******************************************************************************************************************************
        Top := CaptionStartWord[i].Top + ROUND(((CaptionStartWord[i].Bottom - CaptionStartWord[i].Top) / 2),1);

        Bottom := Top + 1;
        Left := IIFInt(Field."Caption Is Part Of Value",CaptionStartWord[i].Left,
          CaptionEndWord[i].Right + ROUND(10 * GetDPIFactor(0,Page."TIFF Image Resolution"),1));
        Right := Left + ROUND(4000 * GetDPIFactor(0,Page."TIFF Image Resolution"),1);

        IF WordFunc.GetFirstWordFromLeft(Page,Top,Left,Bottom,Right,LeftWord) THEN BEGIN
          Left := LeftWord.Left;
          Right := Left + Length;

          Word := CaptureMgt.CaptureFromPos(Page,Field,0,TRUE,Top,Left,Bottom,Right,Value);
          IF CaptureMgt.ParseField(Field,Word,TRUE,DocumentNo) THEN
            EXIT(Word);
        END;

      // *******************************************************************************************************************************
      // SEARCH BELOW CAPTION
      // *******************************************************************************************************************************
        Top := IIFInt(Field."Caption Is Part Of Value",CaptionStartWord[i].Top +
          ROUND(((CaptionStartWord[i].Bottom - CaptionStartWord[i].Top) / 2),1),
          ROUND(CaptionStartWord[i].Bottom + ((CaptionStartWord[i].Bottom - CaptionStartWord[i].Top) / 2),1));
        Left := CaptionStartWord[i].Left;
        Bottom := Top + ROUND(80 * GetDPIFactor(0,Page."TIFF Image Resolution"),1);
        Right := CaptionEndWord[i].Right;

        IF WordFunc.GetFirstWordFromTop(Page,Top,Left,Bottom,Right,TopWord) THEN BEGIN
          Top := TopWord.Top;
          Bottom := TopWord.Bottom;

          Word := CaptureMgt.CaptureFromPos(Page,Field,0,TRUE,Top,Left,Bottom,Right,Value);

          IF CaptureMgt.ParseField(Field,Word,TRUE,DocumentNo) THEN
            EXIT(Word);
        END;

        IF i = 10 THEN
          Stop := TRUE
        ELSE BEGIN
          i := i + 1;
          Stop := CaptionStartWord[i].Word = '';
        END;
      UNTIL Stop;

      Word := '';
    END;

    PROCEDURE FindCaption@1000000016(DocumentNo@1000000006 : Code[20];PageNo@1000000004 : Integer;VAR Field@1000000001 : Record 6085580;FieldCaption@1000000000 : Record 6085581;VAR CaptionStartWord@1000000002 : ARRAY [100] OF Record 6085592;VAR CaptionEndWord@1000000016 : ARRAY [100] OF Record 6085592) : Boolean;
    VAR
      Doc@1160040000 : Record 6085590;
      Page@1160040004 : Record 6085591;
      PrevPage@1160040005 : Record 6085591;
      PrevCaption@1000000003 : Record 6085593;
      StartWord@1000000009 : Record 6085592;
      EndWord@1000000008 : Record 6085592;
      TempResultWord@1000000014 : ARRAY [100,2] OF Record 6085592;
      Sorter@1000000005 : TEMPORARY Record 283;
      WordFunc@1000000017 : Codeunit 6085574;
      CurrWord@1000000007 : Text[1024];
      WordFound@1000000011 : Text[1024];
      TempStr@1000000012 : Text[1024];
      I@1000000013 : Integer;
      NoOfCaptions@1000000015 : Integer;
      Found@1000000010 : Boolean;
      Stop@1000000018 : Boolean;
      PriorityTop@1160040001 : Integer;
      PriorityLeft@1160040002 : Integer;
      PagePriorityTop@1160040009 : Integer;
      PagePriorityLeft@1160040008 : Integer;
      PriorityPageNo@1160040003 : Integer;
      PrevDPIFactor@1160040006 : Integer;
      DPIFactor@1160040007 : Decimal;
    BEGIN
      BufferWords(DocumentNo,PageNo);
      CLEAR(CaptionStartWord);
      CLEAR(CaptionEndWord);

      FieldCaption.Caption := UPPERCASE(DELCHR(FieldCaption.Caption,'=',' '));
      GlobalWords.RESET;
      IF PageNo <> 0 THEN
        GlobalWords.SETRANGE("Page No.",PageNo);
      IF GlobalWords.FINDSET(FALSE,FALSE) THEN
        REPEAT
          CurrWord := UPPERCASE(DELCHR(GlobalWords.Word,'=',' '));

          IF (StartWord.Word <> '') THEN BEGIN
            IF NOT WordFunc.IsWordsOnSameLine(GlobalWords,StartWord) THEN BEGIN
              CLEAR(StartWord);
              WordFound := '';
            END;
          END;

          IF STRPOS(CurrWord,FieldCaption.Caption) > 0 THEN BEGIN
            StartWord := GlobalWords;
            EndWord := GlobalWords;
            WordFound := FieldCaption.Caption;
          END ELSE
            IF ((StartWord.Word <> '') AND (EndWord.Word = '')) THEN BEGIN
              IF (STRLEN(WordFound) + STRLEN(CurrWord) < STRLEN(FieldCaption.Caption)) THEN BEGIN
                IF (CurrWord = COPYSTR(FieldCaption.Caption,STRLEN(WordFound)+1,STRLEN(CurrWord))) THEN
                  WordFound := WordFound + CurrWord
                ELSE BEGIN
                  CLEAR(StartWord);
                  WordFound := '';
                END;
              END ELSE
                IF (COPYSTR(CurrWord,1,STRLEN(FieldCaption.Caption) - STRLEN(WordFound)) =
                  COPYSTR(FieldCaption.Caption,STRLEN(WordFound)+1))
                THEN BEGIN
                  EndWord := GlobalWords;
                  WordFound := FieldCaption.Caption;
                END ELSE BEGIN
                  CLEAR(StartWord);
                  WordFound := '';
                END;
            END ELSE BEGIN
              CLEAR(StartWord);
              WordFound := '';
            END;

          // This will search the current word, and see if it ends with part of the string to search for
          IF WordFound = '' THEN BEGIN
            TempStr := FieldCaption.Caption;
            I := 0;
            Stop := FALSE;
            WHILE (I < STRLEN(FieldCaption.Caption)) AND NOT Stop DO BEGIN
              I := I + 1;
              TempStr := COPYSTR(FieldCaption.Caption,I,1);
              IF (STRPOS(CurrWord,WordFound + TempStr) > 0) THEN BEGIN
                WordFound := WordFound + TempStr;
                StartWord := GlobalWords;
              END ELSE BEGIN
                IF STRLEN(CurrWord) > I THEN BEGIN
                  WordFound := '';
                  CLEAR(StartWord);
                END;
                Stop := TRUE;
              END;
            END;
          END;

          IF (StartWord.Word <> '') AND (EndWord.Word <> '') THEN BEGIN
            // Save the result for later comparision to other potential hits.
            NoOfCaptions := NoOfCaptions + 1;
            TempResultWord[NoOfCaptions,1] := StartWord;
            TempResultWord[NoOfCaptions,2] := EndWord;

            CLEAR(StartWord);
            CLEAR(EndWord);
            WordFound := '';
          END;
        UNTIL (GlobalWords.NEXT = 0) OR (NoOfCaptions = 100);

      // *******************************************************************************************************************
      // SELECT THE CAPTION THAT IS CLOSEST TO THE CAPTION THAT WAS ORIGINALLY SELECTED BY THE USER MANUALLY.
      // IF THE USER NEVER SELECTED THE CAPTION MANUALLY, THEN FIND THE LAST CAPTION AND PRIORITISE THE POSITION OF THAT.
      // *******************************************************************************************************************
      IF (FieldCaption.Top <> 0) OR (FieldCaption.Left <> 0) THEN BEGIN
        PrevDPIFactor := Field."Offset DPI";

        PriorityTop := FieldCaption.Top;
        PriorityLeft := FieldCaption.Left;
        PriorityPageNo := FieldCaption."Page No.";
      END ELSE BEGIN
        PrevCaption.SETCURRENTKEY("Template No.","Is Value",Type,Code);
        PrevCaption.SETRANGE("Template No.",Field."Template No.");
        PrevCaption.SETRANGE("Is Value",FALSE);
        PrevCaption.SETRANGE(Type,Field.Type);
        PrevCaption.SETRANGE(Code,Field.Code);
        PrevCaption.SETFILTER(Top,'>%1',0);
        PrevCaption.SETFILTER(Left,'>%1',0);
        IF NOT PrevCaption.FINDLAST THEN
          CLEAR(PrevCaption);

        IF PrevPage.GET(PrevCaption."Document No.",PrevCaption."Page No.") THEN
          PrevDPIFactor := PrevPage."TIFF Image Resolution"
        ELSE
          PrevDPIFactor := 0;

        PriorityTop := PrevCaption.Top;
        PriorityLeft := PrevCaption.Left;
        PriorityPageNo := PrevCaption."Page No.";
      END;

      FOR I := 1 TO NoOfCaptions DO BEGIN
        Doc.GET(DocumentNo);
        Doc.CALCFIELDS("No. of Pages");

        Page.GET(DocumentNo,TempResultWord[I,1]."Page No.");
        IF PrevDPIFactor <> 0 THEN
          DPIFactor := GetDPIFactor(PrevDPIFactor,Page."TIFF Image Resolution")
        ELSE
          DPIFactor := 1;
        PagePriorityTop := ROUND(PriorityTop * DPIFactor,1);
        PagePriorityLeft := ROUND(PriorityLeft * DPIFactor,1);

        Sorter."New Line Number" := I;
        Sorter."Old Line Number" := ABS((TempResultWord[I,1].Top - PagePriorityTop) + (TempResultWord[I,1].Left - PagePriorityLeft));
        IF (TempResultWord[I,1]."Page No." = Doc."No. of Pages") AND
          (Field."Default Page Source" = Field."Default Page Source"::"Last Page")
        THEN
          Sorter."Old Line Number" := Sorter."Old Line Number" - 15000
        ELSE
          IF TempResultWord[I,1]."Page No." = PriorityPageNo THEN
            Sorter."Old Line Number" := Sorter."Old Line Number" - 10000 // Give words on same page as previous the higher priority
          ELSE
            IF (TempResultWord[I,1]."Page No." = 1) AND (Field."Default Page Source" = Field."Default Page Source"::"First Page") THEN
              Sorter."Old Line Number" := Sorter."Old Line Number" - 5000;
        IF Sorter.INSERT THEN;
      END;

      I := 0;
      IF Sorter.FINDSET(FALSE,FALSE) THEN
        REPEAT
          I := I + 1;
          CaptionStartWord[I]:= TempResultWord[Sorter."New Line Number",1];
          CaptionEndWord[I]:= TempResultWord[Sorter."New Line Number",2];
        UNTIL (Sorter.NEXT = 0) OR (I = 10);

      EXIT(CaptionStartWord[1].Word <> '');
    END;

    PROCEDURE UseFixedValue@1000000002(VAR Document@1000000002 : Record 6085590;VAR Field@1000000000 : Record 6085580;LineNo@1000000003 : Integer) : Boolean;
    VAR
      RecIDMgt@161024012 : Codeunit 6085604;
    BEGIN
      CASE Field."Data Type" OF
        Field."Data Type"::Text:
          BEGIN
            IF Field."Fixed Value (Text)" <> '' THEN BEGIN
              CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,Field."Fixed Value (Text)",TRUE,FALSE);
              EXIT(TRUE);
            END
          END;

        Field."Data Type"::Number:
          BEGIN
            IF Field."Fixed Value (Decimal)" <> 0 THEN BEGIN
              IF Field."Decimal Places" = '' THEN
                CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,FORMAT(Field."Fixed Value (Decimal)"),TRUE,FALSE)
              ELSE
                CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,
                  FORMAT(Field."Fixed Value (Decimal)",0,STRSUBSTNO('<Precision,%1><Standard Format,0>',Field."Decimal Places")),TRUE,
                    FALSE);

              EXIT(TRUE);
            END;
          END;

        Field."Data Type"::Date:
          BEGIN
            IF Field."Fixed Value (Date)" <> 0D THEN BEGIN
              CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,FORMAT(Field."Fixed Value (Date)"),TRUE,FALSE);
              EXIT(TRUE);
            END ELSE
              IF Field."Fixed Value (Text)" = 'TODAY' THEN BEGIN
                CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,FORMAT(TODAY),TRUE,FALSE);
                EXIT(TRUE);
              END;
          END;

        Field."Data Type"::Lookup:
          BEGIN
            IF Field."Fixed Value (Rec. ID Tree ID)" <> 0 THEN BEGIN
              CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,
                RecIDMgt.GetKeyValue(Field."Fixed Value (Rec. ID Tree ID)",Field."Source Field No."),TRUE,FALSE);
              EXIT(TRUE);
            END;
          END;

        Field."Data Type"::Boolean:
          BEGIN
            IF Field."Fixed Value (Boolean)" THEN BEGIN
              CaptureMgt.UpdateFieldValue(Document."No.",0,LineNo,Field,FORMAT(Field."Fixed Value (Boolean)"),TRUE,FALSE);
              EXIT(TRUE);
            END;
          END;
      END;
    END;

    PROCEDURE IIFInt@1000000000(TestValue@1000000000 : Boolean;ValueIfTrue@1000000001 : Integer;ValueIfFalse@1000000002 : Integer) : Decimal;
    BEGIN
      IF TestValue THEN
        EXIT(ValueIfTrue)
      ELSE
        EXIT(ValueIfFalse);
    END;

    PROCEDURE IntersectsWith@1000000008(VAR Value@1000000008 : Record 6085593;VAR Value2@1000000009 : Record 6085593) : Boolean;
    BEGIN
      IF (Value.Left = Value2.Left) AND (Value.Right = Value2.Right) AND
        (Value.Top = Value2.Top) AND (Value.Bottom = Value2.Bottom)
      THEN
        EXIT(TRUE);

      EXIT(
        (Value.Left <= Value2.Right) AND (Value2.Left <= Value.Right) AND
        (Value.Top <= Value2.Bottom) AND (Value2.Top <= Value.Bottom));
    END;

    PROCEDURE BufferWords@1000000014(DocumentNo@1000000000 : Code[20];PageNo@1000000001 : Integer);
    VAR
      Words@1000000002 : Record 6085592;
      ALRDocumentPage@1000000003 : Record 6085591;
    BEGIN
      IF (BuffWordDocNo = DocumentNo) AND ((BuffWordPageNo = PageNo) OR (BuffWordPageNo = 0)) THEN
        EXIT;

      GlobalWords.RESET;
      GlobalWords.DELETEALL;

      Words.SETRANGE("Document No.",DocumentNo);
      //<ALR>
      IF (LineRegionFromPage > 0) OR (LineRegionToPage > 0) THEN BEGIN
        ALRDocumentPage.SETRANGE("Document No.",DocumentNo);
        ALRDocumentPage.SETRANGE("Page No.",LineRegionFromPage,LineRegionToPage);
        IF ALRDocumentPage.FINDSET THEN
          REPEAT
            IF LineRegionToPos = 0 THEN
              Words.SETFILTER(Top,STRSUBSTNO('%1..%2',LineRegionFromPos,ALRDocumentPage."Bottom Word Pos."))
            ELSE
              Words.SETFILTER(Top,DELCHR(STRSUBSTNO('%1..%2',LineRegionFromPos,LineRegionToPos),'=',' '));

            IF Words.FINDSET(FALSE,FALSE) THEN
              REPEAT
                GlobalWords := Words;
                GlobalWords.INSERT;
              UNTIL Words.NEXT = 0;
          UNTIL ALRDocumentPage.NEXT = 0;
      END ELSE BEGIN
      //</ALR>
      IF PageNo <> 0 THEN
        Words.SETRANGE("Page No.",PageNo);
      IF Words.FINDSET(FALSE,FALSE) THEN
        REPEAT
          GlobalWords := Words;
          GlobalWords.INSERT;
        UNTIL Words.NEXT = 0;
      //<ALR>
      END;
      //</ALR>
      BuffWordDocNo := DocumentNo;
      BuffWordPageNo := PageNo;
    END;

    PROCEDURE GetNextBottom@1000000004(VAR Page@1000000000 : Record 6085591;VAR Bottom@1000000001 : Integer;VAR Height@161024012 : Integer;VAR MinLeft@6085573 : Integer;VAR MaxRight@6085574 : Integer) : Boolean;
    BEGIN
      GlobalWords.SETCURRENTKEY("Document No.","Page No.",Bottom);
      GlobalWords.SETRANGE("Document No.",Page."Document No.");
      GlobalWords.SETRANGE("Page No.",Page."Page No.");
      GlobalWords.SETFILTER(Bottom,'>%1',Bottom);
      GlobalWords.SETFILTER(Left,'>=%1',MinLeft);
      GlobalWords.SETFILTER(Right,'<=%1',MaxRight);
      IF GlobalWords.FINDSET(FALSE,FALSE) THEN BEGIN
        Bottom := GlobalWords.Bottom;
        Height := ROUND(GlobalWords.Bottom - GlobalWords.Top,1);
        EXIT(TRUE);
      END ELSE BEGIN
        Bottom := 99999;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE SetHideWindow@161024012(NewHideWindow@161024012 : Boolean);
    BEGIN
      HideWindow := NewHideWindow
    END;

    PROCEDURE GetRecFromIdentField@1160040006(VAR Document@1160040000 : Record 6085590;PageNo@1160040011 : Integer;VAR RecID@1160040012 : RecordID;VAR Points@1160040014 : Integer;VAR IdentFields@6085573 : Text[1024]);
    VAR
      DocCat@1160040009 : Record 6085575;
      IdentifierField@1160040006 : Record 6085759;
      DocWord@1160040005 : Record 6085592;
      SourceExcl@1160040002 : Record 6085598;
      TempLookupRecID@161024013 : Record 6085760;
      BigString@1160040010 : Codeunit 6085587;
      RecIDMgt@1160040013 : Codeunit 6085604;
      RecRef@1160040007 : RecordRef;
      BestRecRef@1160040003 : RecordRef;
      BestIdentificationFields@6085676 : Text[1024];
      FieldRef@1160040001 : FieldRef;
      IdentificationFields@6085576 : Text[1024];
      IdentFieldNameAndValue@6085575 : Text[1024];
      BestRecMatchPoint@1160040008 : Integer;
      RecMatchPoint@1160040004 : Integer;
      RecIDTreeID@161024014 : Integer;
      RecPoints@6085574 : Integer;
      XMLBuffer@6085577 : Record 6086200;
    BEGIN
      IdentifierField.SETRANGE("Document Category Code",Document."Document Category Code");
      IF NOT IdentifierField.FINDFIRST THEN
        EXIT;

      DocCat.GET(Document."Document Category Code");
      TempLookupRecID."Table No." := IdentifierField."Table No.";
      TempLookupRecID."Table Filter GUID" := DocCat."Document Category GUID";
      RecRef.OPEN(IdentifierField."Table No.");
      RecIDMgt.GetView(RecRef,TempLookupRecID);

      IF Document."File Type" = Document."File Type"::XML THEN BEGIN
        Document.BuildXmlBuffer(XMLBuffer);
        XMLBuffer.SETFILTER(Type,'%1|%2',XMLBuffer.Type::Element,XMLBuffer.Type::Attribute);
        IF NOT XMLBuffer.FINDSET(FALSE,FALSE) THEN
          EXIT;

        REPEAT
          BigString.Append(UPPERCASE(DELCHR(XMLBuffer.Value,'=',' ,.-;:/\*+')));
        UNTIL XMLBuffer.NEXT = 0;
      END ELSE BEGIN
        DocWord.SETRANGE("Document No.",Document."No.");
        DocWord.SETRANGE("Page No.",PageNo);
        IF NOT DocWord.FINDSET(FALSE,FALSE) THEN
          EXIT;

        REPEAT
          BigString.Append(UPPERCASE(DELCHR(DocWord.Word,'=',' ,.-;:/\*+-')));
        UNTIL DocWord.NEXT = 0;
      END;

      REPEAT
        RecIDTreeID := RecIDMgt.GetRecIDTreeID(RecRef,FALSE);
        IF NOT SourceExcl.GET(Document."Document Category Code",RecIDTreeID) THEN BEGIN
          RecMatchPoint := 0;
          IdentificationFields := '';
          IF IdentifierField.FINDSET THEN
            REPEAT
              FieldRef := RecRef.FIELD(IdentifierField."Field No.");
              RecPoints := GetPoints(FORMAT(FieldRef.VALUE),BigString,STRLEN(FORMAT(FieldRef.VALUE))) * IdentifierField.Rating;
              IF RecPoints > 0 THEN BEGIN
                RecMatchPoint += RecPoints;
                IdentifierField.CALCFIELDS("Field Caption");
                IdentFieldNameAndValue := IdentifierField."Field Caption" + ': ' + FORMAT(FieldRef.VALUE);

                IF IdentificationFields <> '' THEN
                  IdentificationFields := IdentificationFields + ', ';

                IF STRLEN(IdentificationFields + IdentFieldNameAndValue) <= 1024 THEN
                  IdentificationFields := IdentificationFields + IdentFieldNameAndValue;
              END;
            UNTIL IdentifierField.NEXT = 0;

            IF BestRecMatchPoint < RecMatchPoint THEN BEGIN
              BestRecMatchPoint := RecMatchPoint;
              BestRecRef := RecRef.DUPLICATE;
              BestIdentificationFields := IdentificationFields;
            END;
        END;
      UNTIL RecRef.NEXT = 0;

      CLEAR(RecRef);

      IF FORMAT(BestRecRef) = '' THEN
        EXIT;

      RecID := BestRecRef.RECORDID;
      Points := BestRecMatchPoint;
      IdentFields := BestIdentificationFields;
      CLEAR(BestRecRef);
    END;

    PROCEDURE GetPoints@161024013(Text@161024013 : Text[250];VAR BigString@161024012 : Codeunit 6085587;Points@161024015 : Integer) : Integer;
    BEGIN
      Text := UPPERCASE(DELCHR(Text,'=',' ,.-;:/\*+-'));
      IF (Text <> '') AND (BigString.IndexOf(Text) <> -1) THEN
        EXIT(Points);
    END;

    PROCEDURE GetDPIFactor@1160040003(OldDPI@1160040000 : Integer;NewDPI@1160040001 : Integer) : Decimal;
    BEGIN
      IF OldDPI = NewDPI THEN
        EXIT(1);

      IF OldDPI = 0 THEN
        OldDPI := 150;

      IF NewDPI = 0 THEN
        NewDPI := 150;

      EXIT(NewDPI / OldDPI);
    END;

    LOCAL PROCEDURE "<ALR Function>"@1000000003();
    BEGIN
    END;

    PROCEDURE SetLineRegion@1000000005(FromPage@1000000003 : Integer;FromPos@1000000002 : Integer;ToPage@1000000001 : Integer;ToPos@1000000000 : Integer);
    BEGIN
      LineRegionFromPage := FromPage;
      LineRegionFromPos := FromPos;
      LineRegionToPage := ToPage;
      LineRegionToPos := ToPos;
      CLEAR(BuffWordDocNo);
      CLEAR(BuffWordPageNo);
    END;

    LOCAL PROCEDURE "</ALR Function>"@1000000007();
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Page 6085586 CDC Template Field Card
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=DCW16.00.00.6.00.01,ALR010;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Vorlage Feld Karte;
               ENU=Template Field Card];
    SourceTable=Table6085580;
    DataCaptionExpr=STRSUBSTNO('%1 - %2 - %3 - %4',"Template No.",Type,Code,"Field Name");
    PageType=Card;
    OnOpenPage=BEGIN
                 UpdateControls;
               END;

    OnAfterGetRecord=VAR
                       Template@6085574 : Record 6085579;
                       DocCat@6085573 : Record 6085575;
                     BEGIN
                       UpdateControls;

                       Template.GET("Template No.");
                       DocCat.GET(Template."Category Code");

                       CodeunitLookup := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Codeunit,"Codeunit ID: Lookup");
                       CodeunitCaptureVal := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Codeunit,"Codeunit ID: Capture Value");
                       CodeunitIsValid := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Codeunit,"Codeunit ID: Is OK");
                       CodeunitValidate := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Codeunit,"Codeunit ID: Validate");

                       SourceTable := RecIDMgt.GetObjectCaption(AllObjWithCaption."Object Type"::Table,"Source Table No.");
                       SourceField := RecIDMgt.GetFieldCaption("Source Table No.","Source Field No.");

                       DestHeaderField := RecIDMgt.GetFieldCaption(DocCat."Destination Header Table No.","Destination Header Field No.");
                       DestLineField := RecIDMgt.GetFieldCaption(DocCat."Destination Line Table No.","Destination Line Field No.");

                       FormulaTxt := '';
                       IF Formula <> '' THEN
                         FormulaTxt := Formula
                       ELSE BEGIN
                         FormulaTxt := GetFixedValue;
                         IF FormulaTxt <> '' THEN
                           FormulaTxt := '''' + FormulaTxt + '''';
                       END;
                     END;

    OnNewRecord=BEGIN
                  FILTERGROUP(4);
                  SETRANGE(Type);
                  SETRANGE(Code);

                  CLEAR(Type);
                  Code := '';
                  FILTERGROUP(0);

                  UpdateControls;

                  CodeunitLookup := '';
                  CodeunitCaptureVal := '';
                  CodeunitIsValid := '';
                  CodeunitValidate := '';

                  SourceTable := '';
                  SourceField := '';

                  DestHeaderField := '';
                  DestLineField := '';
                END;

    ActionList=ACTIONS
    {
      { 6085575 ;    ;ActionContainer;
                      Name=RelatedInformation;
                      ActionContainerType=RelatedInformation }
      { 6085574 ;1   ;ActionGroup;
                      Name=Functions;
                      CaptionML=[DEU=F&unktionen;
                                 ENU=F&unctions] }
      { 6085576 ;2   ;Action    ;
                      Name=Captions;
                      CaptionML=[DEU=Suchtexte;
                                 ENU=Captions];
                      ToolTipML=[DEU=Anzeigen oder Bearbeiten der Suchtexte, die in Dokumenten verwendet werden, um einen entsprechenden Wert zu finden.;
                                 ENU=View or edit captions searched for in documents to find a corresponding value.];
                      Promoted=Yes;
                      Visible=NOT ShowXmlPath;
                      Image=Comment;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowCaptions;
                               END;
                                }
      { 6085573 ;2   ;Action    ;
                      Name=Rules;
                      CaptionML=[DEU=Regeln;
                                 ENU=Rules];
                      ToolTipML=[DEU=Zeigen Sie die Regeln an oder bearbeiten Sie sie, um zu ÅberprÅfen, ob ein Feld einen gÅltigen Wert enthÑlt.;
                                 ENU=View or edit the rules used to check if a field contains a valid value.];
                      Promoted=Yes;
                      Image=ViewCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowRules;
                               END;
                                }
      { 6085577 ;2   ;Action    ;
                      Name=Codeunits;
                      CaptionML=[DEU=Codeunits;
                                 ENU=Codeunits];
                      ToolTipML=[DEU=Anzeigen oder Bearbeiten von Codeunits, die zum AusfÅhren erweiterter Feldaktionen verwendet werden.;
                                 ENU=View or edit codeunits used to perform advanced field actions.];
                      Promoted=Yes;
                      Image=CodesList;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowCodeunits;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                CaptionML=[DEU=Allgemein;
                           ENU=General];
                GroupType=Group }

    { 1160040016;2;Field  ;
                Name=Type;
                ToolTipML=[DEU=Gibt an, ob es sich um ein Kopf- oder Zeilenfeld handelt.;
                           ENU=Specifies whether this is a header or line field.];
                SourceExpr=Type;
                Visible=ShowCodeAndType }

    { 1160040017;2;Field  ;
                Name=Code;
                ToolTipML=[DEU=Gibt einen Vorlagenfeldcode an.;
                           ENU=Specifies a template field code.];
                SourceExpr=Code;
                Visible=ShowCodeAndType;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 1000000026;2;Field  ;
                Name=Field Name;
                ToolTipML=[DEU=Gibt den Namen des Felds an, das bei der Verarbeitung von Dokumenten angezeigt wird.;
                           ENU=Specifies the name of the field shown when processing documents.];
                SourceExpr="Field Name";
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 6085585;2;Group     ;
                Name=XmlPathGroup;
                CaptionML=ENU="";
                Visible=ShowXmlPath;
                GroupType=Group }

    { 6085584;3;Field     ;
                Name=XMLPath;
                ToolTipML=[DEU=Gibt den XML-Pfad an, unter dem sich der Wert fÅr dieses Feld im XML-Dokument befindet.;
                           ENU=Specifies the XML Path where the value for this field is to be found in the XML Document.];
                SourceExpr="XML Path";
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;

                OnAssistEdit=VAR
                               CaptureMgt@6085573 : Codeunit 6085576;
                             BEGIN
                               IF CaptureMgt.XmlPathAssistEdit(CurrentDocumentNo,"Template No.",Type,Code,"XML Path") THEN
                                 VALIDATE("XML Path");
                             END;
                              }

    { 1   ;3   ;Field     ;
                ToolTipML=[DEU=Gibt an, ob das Zeilenfeld in der Dokumentenkarte angezeigt werden soll.;
                           ENU=Specifies wheather to show the Line Template Field in the Document Card.];
                SourceExpr="Show Field";
                Visible=ShowXMLShowField }

    { 1000000008;2;Field  ;
                Name=Caption;
                CaptionML=[DEU=Suchtext;
                           ENU=Caption];
                ToolTipML=[DEU=Gibt den Suchtext an, nach dem in Dokumenten gesucht wird, um das Feld und den Wert zu identifizieren. Verwenden Sie den Drilldown, um weitere Suchtexte anzugeben.;
                           ENU=Specifies the caption that is searched for in documents to identify the field and value. Use drill down to specify alternative captions.];
                SourceExpr=CaptionText;
                Visible=NOT ShowXmlPath;
                Editable=EditCaption;
                OnValidate=VAR
                             TemplateFieldCaption@6085573 : Record 6085581;
                           BEGIN
                             TemplateFieldCaption.SETRANGE("Template No.","Template No.");
                             TemplateFieldCaption.SETRANGE(Type,Type);
                             TemplateFieldCaption.SETRANGE(Code,Code);
                             IF TemplateFieldCaption.FINDFIRST THEN BEGIN
                               IF CaptionText = '' THEN
                                 TemplateFieldCaption.DELETE
                               ELSE BEGIN
                                 TemplateFieldCaption.Caption := CaptionText;
                                 TemplateFieldCaption."Caption Length" := STRLEN(TemplateFieldCaption.Caption);
                                 TemplateFieldCaption.MODIFY;
                               END;
                             END ELSE BEGIN
                               TemplateFieldCaption.INIT;
                               TemplateFieldCaption."Template No." := "Template No.";
                               TemplateFieldCaption.Type := Type;
                               TemplateFieldCaption.Code := Code;
                               TemplateFieldCaption."Line No." := 10000;
                               TemplateFieldCaption.Caption := CaptionText;
                               TemplateFieldCaption."Caption Length" := STRLEN(TemplateFieldCaption.Caption);
                               TemplateFieldCaption.INSERT;
                             END;
                           END;

                OnDrillDown=BEGIN
                              ShowCaptions;
                            END;
                             }

    { 1000000025;2;Field  ;
                Name=Rule;
                CaptionML=[DEU=Regel;
                           ENU=Rule];
                ToolTipML=[DEU=Gibt die Regel an, mit der geprÅft wird, ob der Wert des Felds ein korrektes Format hat. Verwenden Sie den Drilldown, um mehrere Regeln anzugeben.;
                           ENU=Specifies the rule used to check if the value of the field has a correct format. Use drill down to specify multiple rules.];
                SourceExpr=RuleText;
                Editable=EditRule;
                OnValidate=VAR
                             TemplateFieldRule@6085573 : Record 6085583;
                           BEGIN
                             TemplateFieldRule.SETRANGE("Template No.","Template No.");
                             TemplateFieldRule.SETRANGE(Type,Type);
                             TemplateFieldRule.SETRANGE(Code,Code);
                             IF TemplateFieldRule.FINDFIRST THEN BEGIN
                               IF RuleText = '' THEN
                                 TemplateFieldRule.DELETE
                               ELSE BEGIN
                                 TemplateFieldRule.Rule := RuleText;
                                 TemplateFieldRule.MODIFY;
                               END;
                             END ELSE BEGIN
                               TemplateFieldRule.INIT;
                               TemplateFieldRule."Template No." := "Template No.";
                               TemplateFieldRule.Type := Type;
                               TemplateFieldRule.Code := Code;
                               TemplateFieldRule."Entry No." := 10000;
                               TemplateFieldRule.Rule := RuleText;
                               TemplateFieldRule.INSERT;
                             END;
                           END;

                OnDrillDown=BEGIN
                              ShowRules;
                            END;
                             }

    { 1000000003;2;Field  ;
                Name=Required;
                ToolTipML=[DEU=Gibt an, ob das Feld ein Pflichtfeld ist. Wenn im Dokument kein Wert erkannt werden kann, muss der Wert manuell angegeben werden, um das Dokument registrieren zu kînnen.;
                           ENU=Specifies whether a value is required for the field before a document can be registered. If a value cannot be recognized in the document, then the value must be specified manually to register the document.];
                SourceExpr=Required;
                Importance=Additional }

    { 1000000004;2;Field  ;
                Name=Search for Value;
                ToolTipML=[DEU=Gibt an, ob wÑhrend der Erkennung nach dem Feld gesucht werden soll.;
                           ENU=Specifies whether to search for the field during recognition.];
                SourceExpr="Search for Value";
                Importance=Additional;
                Editable=SearchForValueEditable }

    { 6085583;2;Field     ;
                Name=Formula Text;
                CaptionML=[DEU=Formel;
                           ENU=Formula];
                ToolTipML=[DEU=Gibt eine Formel an, die zur Berechnung des Feldwerts verwendet wird. Wenn es sich um ein Zahlenfeld handelt, kînnen Sie die Formel mit anderen Zahlenfeldern aus der Vorlage oder mit konstanten Zahlenwerten erstellen und Operatoren wie * / + - verwenden. Wenn es sich um ein Textfeld handelt, kînnen Sie alle Felder aus der Vorlage verwenden und die Werte mithilfe des Pluszeichens verketten.;
                           ENU=Specifies a formula used to calculate the field value. If it is a number-field, you can construct the formula with other number-fields from the template, or with constant number values, and use operators such as * / + -. If it is a text field, you can use all fields from the template, and concatenate the values using the + sign.];
                SourceExpr=FormulaTxt;
                OnValidate=BEGIN
                             FormulaTxt := RemoveQuotationMarks(FormulaTxt);
                             VALIDATE(Formula,FormulaTxt);
                             SearchForValueEditable := (Formula = '') AND (FixedValue = '');
                             CurrPage.UPDATE(TRUE);
                           END;

                OnLookup=VAR
                           PrevText@6085573 : Text[1024];
                         BEGIN
                           PrevText := Text;
                           IF FormulaOnLookup(Text) THEN BEGIN
                             Text := PrevText + Text;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 161024016;2;Field   ;
                Name=Insert on new Templates;
                ToolTipML=[DEU=Gibt an, ob das Feld in alle neuen Vorlagen eingefÅgt werden soll. Wenn dies nicht aktiviert ist, kann das Feld bei Bedarf manuell zu einzelnen Dokumenten und Vorlagen hinzugefÅgt werden.;
                           ENU=Specifies whether to insert the field on all new templates. If this is not enabled, then the field can be manually added to individual documents and templates when needed.];
                SourceExpr="Insert on new Templates";
                Importance=Additional;
                Visible=IsMasterTemplate }

    { 1000000022;2;Field  ;
                Name=Default Page Source;
                ToolTipML=[DEU=Gibt an, ob bei der Suche nach dem Wert des Felds mit der ersten oder letzten Seite begonnen werden soll. Wenn auf der ersten oder letzten Seite kein Wert erkannt wird, wird der Rest des Dokuments durchsucht.;
                           ENU=Specifies whether to start on the first or last page when searching for the value of the field. If a value is not recognized on either the first or last page, then the rest of the document is searched.];
                SourceExpr="Default Page Source";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 1000000002;2;Field  ;
                Name=Data Type;
                ToolTipML=[DEU=Gibt den Datentyp der in diesem Feld gespeicherten Werte an.;
                           ENU=Specifies the data type of the values saved in this field.];
                SourceExpr="Data Type";
                Importance=Additional;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 6085581;2;Group     ;
                Name=StopLineRecognition;
                CaptionML=[DEU="";
                           ENU=""];
                Visible=ShowStopLineRecognition AND NOT ShowXmlPath;
                GroupType=Group }

    { 1000000015;3;Field  ;
                Name=Stop Lines Recognition;
                ToolTipML=[DEU=Gibt an, wann die Zeilenerkennung in Dokumenten gestoppt werden soll.;
                           ENU=Specifies when to stop recognizing lines in documents.];
                SourceExpr="Stop Lines Recognition";
                Importance=Additional;
                Visible=LineRecognitionEnabled }

    { 1160040015;2;Field  ;
                Name=Use as Doc. Separator;
                ToolTipML=[DEU=Gibt an, ob das Feld ein Belegtrennzeichen ist und ob Dokumente automatisch aufgeteilt werden sollen, wenn sich der Wert des Felds in einer PDF-Datei zwischen einer Seite und der nÑchsten Ñndert. Wird in Kombination mit der Konfiguration der Belegtrennung auf der Belegkategorie verwendet.;
                           ENU=Specifies whether the field is a document separator and if documents should be split automatically if the value of the field changes between one page and the next in a PDF file. Used in combination with the configuration of document splitting on the document category.];
                SourceExpr="Use as Doc. Separator";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 1160040011;2;Group  ;
                Name=Date Settings;
                CaptionML=[DEU=Datumseinstellungen;
                           ENU=Date Settings];
                Visible=IsDate;
                GroupType=Group }

    { 1000000011;3;Field  ;
                Name=Language Code;
                ToolTipML=[DEU=Gibt die Sprache an, in der Datumsangaben erkannt werden, wenn Monate in Worten und nicht in Zahlen geschrieben werden. Um beispielsweise "October" zu erkennen, muss die Sprache Englisch sein. Bei allen Vorlagenfeldern wird die Sprache von der Vorlage Åbernommen.;
                           ENU=Specifies the language used to recognize dates when months are written in words and not numerical. For example, to recognize "Oktober" the language must be Danish. All template fields will have the language inherited from the template.];
                SourceExpr="Language Code";
                Editable=IsDate }

    { 161024025;3;Field   ;
                Name=Date Format;
                ToolTipML=[DEU=Gibt das Datumsformat an, das zum Erkennen von Datumsangaben in Dokumenten verwendet wird. Alle Vorlagenfelder nutzen das von der Vorlage Åbernommene Datumsformat.;
                           ENU=Specifies the date format used to recognize dates in documents. All template fields have the date format inherited from the template.];
                SourceExpr="Date Format";
                Editable=IsDate }

    { 1160040005;3;Field  ;
                Name=Validation Dateformula From;
                ToolTipML=[DEU=Gibt eine Datumsformel an, um das frÅheste zulÑssige Datum fÅr ein Feld zu definieren. Die Berechnung erfolgt in Bezug auf das heutige Datum.;
                           ENU=Specifies a date formula to define the earliest allowed date for a field. The calculation will be made in relation to today's date.];
                SourceExpr="Validation Dateformula From";
                Importance=Additional;
                Editable=IsDate }

    { 1160040004;3;Field  ;
                Name=Validation Dateformula To;
                ToolTipML=[DEU=Gibt eine Datumsformel zum Definieren des letzten zulÑssigen Datums fÅr ein Feld an. Die Berechnung der Formel erfolgt nach heutigem Datum.;
                           ENU=Specifies a date formula for defining the latest allowed date for a field. Calculating the formula will be done according to today's date.];
                SourceExpr="Validation Dateformula To";
                Importance=Additional;
                Editable=IsDate }

    { 1160040014;2;Group  ;
                Name=Number Settings;
                CaptionML=[DEU=Nummerierung Einstellungen;
                           ENU=Number Settings];
                Visible=IsNumber;
                GroupType=Group }

    { 1160040013;3;Field  ;
                Name=Make Absolute Number;
                ToolTipML=[DEU=Gibt an, ob negative Zahlen in positive Zahlen umgewandelt werden sollen.;
                           ENU=Specifies whether to convert negative numbers into positive numbers.];
                SourceExpr="Make Absolute Number";
                Editable=IsNumber }

    { 6085582;3;Field     ;
                Name=DecimalPlacesDescription;
                CaptionML=[DEU=Dezimalstellen;
                           ENU=Decimal Places];
                ToolTipML=[DEU=Gibt die Anzahl der Dezimalstellen fÅr Werte an. Zum Beispiel bedeutet 2: 5, dass das Feld immer 2 Dezimalstellen und maximal 5 Dezimalstellen enthÑlt.;
                           ENU=Specifies the number of decimal places for values. E.g. 2:5 means that the field will always show 2 decimals and a maximum of 5 decimals.];
                SourceExpr=DecimalPlacesDescription;
                Editable=IsNumber;
                OnValidate=BEGIN
                             DecimalPlacesDescription := ParseDecimalPlacesDescription(DecimalPlacesDescription);
                             DecimalPlacesDescription := ValidateDecimalPlaces(DecimalPlacesDescription);
                             MODIFY;
                             CurrPage.UPDATE(TRUE);
                           END;

                OnAssistEdit=BEGIN
                               PAGE.RUNMODAL(PAGE::"CDC Decimal Places Lookup",Rec);
                               CurrPage.UPDATE(TRUE);
                             END;
                              }

    { 1160040001;3;Field  ;
                Name=Blank Zero;
                ToolTipML=[DEU=Gibt an, ob das Feld leer bleiben soll, anstatt "0" anzuzeigen, wenn der Wert Null ist.;
                           ENU=Specifies whether the field should be left empty, instead of showing "0", if the value is zero.];
                SourceExpr="Blank Zero";
                Importance=Additional;
                Editable=IsNumber }

    { 1160040010;2;Group  ;
                Name=Lookup Values;
                CaptionML=[DEU=Lookup Werte;
                           ENU=Lookup Values];
                Visible=IsLookup;
                GroupType=Group }

    { 161024015;3;Field   ;
                Name=SourceTable;
                CaptionML=[DEU=Herkunftstabellen;
                           ENU=Source Table];
                ToolTipML=[DEU=Gibt die Tabelle an, die alle gÅltigen Werte fÅr das Feld enthÑlt.;
                           ENU=Specifies the table that contains all valid values for the field.];
                SourceExpr=SourceTable;
                Editable=IsLookup;
                OnValidate=BEGIN
                             VALIDATE("Source Table No.",RecIDMgt.GetObjectID(AllObjWithCaption."Object Type"::Table,SourceTable));
                             CurrPage.UPDATE(TRUE);
                           END;

                OnLookup=BEGIN
                           EXIT(RecIDMgt.LookupObject(AllObjWithCaption."Object Type"::Table,Text));
                         END;
                          }

    { 161024028;3;Field   ;
                Name=SourceField;
                CaptionML=[DEU=Herkunftsfeld;
                           ENU=Source Field];
                ToolTipML=[DEU=Gibt das Feld der Herkunftstabelle an, das die Werte enthÑlt, die im Feld gespeichert werden sollen.;
                           ENU=Specifies the field of the source table which contains the values to be saved in the field.];
                SourceExpr=SourceField;
                Editable=IsLookup;
                LookupPageID=Field List;
                OnValidate=BEGIN
                             VALIDATE("Source Field No.",RecIDMgt.GetFieldID("Source Table No.",SourceField));
                             CurrPage.UPDATE(TRUE);
                           END;

                OnLookup=BEGIN
                           EXIT(RecIDMgt.LookupField(Text,"Source Table No.",TRUE));
                         END;
                          }

    { 161024029;3;Field   ;
                Name=No. of Source Table Filters;
                ToolTipML=[DEU="Gibt die Anzahl der auf die Herkunftstabelle angewendeten Filter an, wenn einige DatensÑtze aus der Herkunftstabelle herausgefiltert werden sollen. ";
                           ENU="Specifies the number of filters applied to the source table if some records from the source table should be filtered out. "];
                SourceExpr="No. of Source Table Filters";
                OnDrillDown=BEGIN
                              RecIDMgt.ShowTableFields("Source Table No.","Template No.",Type,TRUE,"Source Table Filter GUID");
                              CurrPage.UPDATE(TRUE);
                            END;
                             }

    { 1160040009;2;Group  ;
                Name=Transfer Value to...;
                CaptionML=[DEU=Wert Åbertragen nach...;
                           ENU=Transfer Value to...];
                Visible=ShowTransferValue;
                GroupType=Group }

    { 161024030;3;Field   ;
                Name=DestHeaderField;
                ToolTipML=[DEU=Gibt das Feld in der Kopftabelle an, in das der Wert beim Registrieren von Dokumenten Åbertragen werden soll.;
                           ENU=Specifies the field in the header table where to transfer the value when registering documents.];
                SourceExpr=DestHeaderField;
                CaptionClass=GetDestFieldCaption(0);
                Editable=IsDestHeader;
                OnValidate=VAR
                             Template@1160040001 : Record 6085579;
                             DocCat@1160040002 : Record 6085575;
                           BEGIN
                             Template.GET("Template No.");
                             DocCat.GET(Template."Category Code");
                             VALIDATE("Destination Header Field No.",RecIDMgt.GetFieldID(DocCat."Destination Header Table No.",DestHeaderField));
                             CurrPage.UPDATE(TRUE);
                           END;

                OnLookup=VAR
                           DocCat@161024014 : Record 6085575;
                           Template@161024013 : Record 6085579;
                         BEGIN
                           IF Type = Type::Line THEN
                             EXIT;

                           Template.GET("Template No.");
                           DocCat.GET(Template."Category Code");
                           EXIT(RecIDMgt.LookupField(Text,DocCat."Destination Header Table No.",FALSE));
                         END;
                          }

    { 1160040000;3;Field  ;
                Name=DestLineField;
                ToolTipML=[DEU=Gibt das Feld in der Zeilentabelle an, in das der Wert beim Registrieren von Dokumenten Åbertragen werden soll.;
                           ENU=Specifies the field in the line table where to transfer the value when registering documents.];
                SourceExpr=DestLineField;
                CaptionClass=GetDestFieldCaption(1);
                Editable=IsDestLine;
                OnValidate=VAR
                             Template@1160040001 : Record 6085579;
                             DocCat@1160040002 : Record 6085575;
                           BEGIN
                             Template.GET("Template No.");
                             DocCat.GET(Template."Category Code");
                             VALIDATE("Destination Line Field No.",RecIDMgt.GetFieldID(DocCat."Destination Line Table No.",DestLineField));
                             CurrPage.UPDATE(TRUE);
                           END;

                OnLookup=VAR
                           DocCat@1160040003 : Record 6085575;
                           Template@1160040002 : Record 6085579;
                         BEGIN
                           Template.GET("Template No.");
                           DocCat.GET(Template."Category Code");
                           EXIT(RecIDMgt.LookupField(Text,DocCat."Destination Line Table No.",FALSE));
                         END;
                          }

    { 1160040003;3;Field  ;
                Name=Transfer Blank Values;
                ToolTipML=[DEU=Gibt an, ob Felder ohne Wert in einem Dokument wÑhrend der Registrierung in die Kopf- oder Zeilentabelle Åbertragen werden mÅssen, wodurch der Wert des Felds im neu erstellten Dokument ausgeblendet wird. Wenn dies nicht aktiviert ist, werden Feldwerte wÑhrend der Registrierung nur in die Kopf- oder Zeilentabelle Åbertragen, wenn das Dokument einen Wert enthÑlt.;
                           ENU=Specifies whether fields without a value in a document must be transferred to the header or line table during registration, thereby blanking the value of the field in the newly created document. If this is not enabled, field values will only be transferred to the header or line table during registration, if there is a value in the field in the document.];
                SourceExpr="Transfer Blank Values";
                Importance=Additional }

    { 1160040007;2;Group  ;
                Name=Advanced Recognition Settings;
                CaptionML=[DEU=Erweiterte Erkennungseinstellungen;
                           ENU=Advanced Recognition Settings];
                GroupType=Group }

    { 1160040012;3;Field  ;
                Name=Delete Blanks;
                ToolTipML=[DEU=Gibt an, ob alle Leerzeichen aus dem erkannten Wert gelîscht werden sollen.;
                           ENU=Specifies whether to delete all spaces from the recognized value.];
                SourceExpr="Delete Blanks";
                Importance=Additional }

    { 6085578;3;Group     ;
                Name=MultiLineGroup;
                CaptionML=[DEU="";
                           ENU=""];
                Visible=ShowMultiline AND NOT ShowXmlPath;
                GroupType=Group }

    { 161024027;4;Field   ;
                Name=Multiline;
                ToolTipML=[DEU=Gibt an, ob es sich um ein mehrzeiliges Feld handelt und der Wert sich Åber mehrere Zeilen erstreckt.;
                           ENU=Specifies whether this is a multiline field and the value is on multiple lines.];
                SourceExpr=Multiline;
                Importance=Additional }

    { 1000000019;3;Field  ;
                Name=Typical Field Width;
                ToolTipML=[DEU=Gibt die typische Breite der erkannten Feldwerte an.;
                           ENU=Specifies the typical width of recognized field values.];
                SourceExpr="Typical Field Width";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 1000000021;3;Field  ;
                Name=Typical Field Height;
                ToolTipML=[DEU=Gibt die typische Hîhe der erkannten Feldwerte an.;
                           ENU=Specifies the typical height of recognized field values.];
                SourceExpr="Typical Field Height";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 1160040006;2;Group  ;
                Name=Rules and Captions;
                CaptionML=[DEU=Regeln und Suchtexte;
                           ENU=Rules and Captions];
                GroupType=Group }

    { 6085579;3;Group     ;
                Name=EnableRuleGroup;
                CaptionML=[DEU="";
                           ENU=""];
                Visible=ShowEnableGenRule;
                GroupType=Group }

    { 1000000009;4;Field  ;
                Name=Enable Rule Generation;
                ToolTipML=[DEU=Gibt an, ob die Liste der Regeln automatisch verwaltet werden soll. Wenn aktiviert, wird beim Erfassen eines Werts automatisch eine neue Regel mit regulÑren AusdrÅcken generiert, die dem erfassten Wert entsprechen.;
                           ENU=Specifies whether to maintain the list of rules automatically. When enabled, a new rule will automatically be generated, when capturing a value, with a regular expressions that matches the captured value.];
                SourceExpr="Enable Rule Generation";
                Importance=Additional }

    { 1000000016;3;Field  ;
                Name=Auto Update Caption;
                ToolTipML=[DEU=Gibt an, ob der Suchtext automatisch aktualisiert werden soll, wenn Sie einen neuen Suchtext in einem Dokument auswÑhlen.;
                           ENU=Specifies whether to automatically update the captions when you select a new caption in a document.];
                SourceExpr="Auto Update Caption";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 1000000017;3;Field  ;
                Name=Caption Is Part Of Value;
                ToolTipML=[DEU=Gibt an, ob der Suchtext Teil des Werts ist. Ein Suchtext fÅr die dÑnische Zahlungs-ID lautet beispielsweise +71. Da der Feldwert +71 enthÑlt, ist der Suchtext jedoch Teil des Feldwerts.;
                           ENU=Specifies whether the caption is part of the value. E.g., a caption for the Danish payment ID is +71, but since the field value contains +71 the caption is part of the field value.];
                SourceExpr="Caption Is Part Of Value";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 1160040002;3;Field  ;
                Name=Caption Mandatory;
                ToolTipML=[DEU=Gibt an, ob ein Feldwert nur aus dem Dokument erkannt werden kann, wenn eine entsprechender Suchtext vorhanden ist. Wenn die Option deaktiviert ist und im Dokument kein Suchtext erkannt wird, wird der Wert aus dem gleichen Bereich im Dokument wie das zuletzt mit derselben Vorlage erkannte Dokument Åbernommen. Dabei wird davon ausgegangen, dass der Wert in diesem Bereich den richtigen Datentyp hat und den Feldregeln entspricht.;
                           ENU=Specifies whether a field value can only be recognized from the document if there is a corresponding caption. If disabled and no caption is recognized in the document, then the value will be taken from the same area in the document as on the last document recognized with the same template, under the condition that the value in that area is of the correct data type and complies to the field rules.];
                SourceExpr="Caption Mandatory";
                Importance=Additional;
                Visible=NOT ShowXmlPath }

    { 161024026;1;Group   ;
                Name=Purchase;
                CaptionML=[DEU=Einkauf;
                           ENU=Purchase];
                Visible=ShowPurchaseTab;
                GroupType=Group }

    { 161024024;2;Field   ;
                Name=Transfer Amount to Document;
                ToolTipML=[DEU=Gibt an, ob der Wert des Felds bei der Registrierung in eine Einkaufszeile Åbertragen werden soll.;
                           ENU=Specifies whether to transfer the value of the field to a purchase line when registering.];
                SourceExpr="Transfer Amount to Document";
                Editable=IsNumberAndHeader }

    { 161024023;2;Field   ;
                Name=G/L Account Field Code;
                ToolTipML=[DEU=Gibt ein optionales Vorlagenfeld an, das die Sachkontonummer enthÑlt, die beim Erstellen einer Einkaufszeile fÅr den Wert dieses Felds verwendet wird.;
                           ENU=Specifies an optional template field which contains the G/L account number used when creating a purchase line for the value of this field.];
                SourceExpr="G/L Account Field Code";
                Editable=IsNumberAndHeader }

    { 161024019;2;Field   ;
                Name=Subtract from Amount Field;
                ToolTipML=[DEU=Gibt ein anderes Feld an, dessen Wert vom Wert dieses Felds abgezogen werden muss. Wenn der Gesamtbetrag inkl. Fracht in einem Feld dargestellt wird, aber der Frachtbetrag auch in einem anderen Feld separat angezeigt. In diesem Fall kînnen Sie den Frachtbetrag in einem Feld angeben und den Wert vom Gesamtbetrag abziehen, sodass die Versandkosten nicht doppelt Åbertragen werden.;
                           ENU=Specifies another field which must have its value subtracted by the value of this field. Eg. if total amount, incl. freight is in a field, but the freight amount is also shown separately in another field. In this case, you can choose to recognize freight amount in a field, then deduct the value from the total amount, so shipping costs are not transferred twice.];
                SourceExpr="Subtract from Amount Field";
                Editable=IsNumberAndHeader;
                OnLookup=VAR
                           TemplateField@6085573 : Record 6085580;
                         BEGIN
                           TemplateField.FILTERGROUP(4);
                           TemplateField.SETRANGE("Template No.","Template No.");
                           TemplateField.SETRANGE(Type,Type);
                           TemplateField.SETFILTER("Transfer Amount to Document",'<>%1',"Transfer Amount to Document"::" ");
                           TemplateField.SETFILTER(Code,'<>%1',Code);
                           TemplateField.FILTERGROUP(0);
                           IF PAGE.RUNMODAL(0,TemplateField) = ACTION::LookupOK THEN BEGIN
                             Text := TemplateField.Code;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 161024018;2;Field   ;
                Name=Purch. Alloc. G/L Account No.;
                ToolTipML=[DEU=Gibt das Sachkonto an, das fÅr automatisch erstellte Einkaufszuordnungen verwendet werden soll.;
                           ENU=Specifies the G/L cost account number to use when automatically creating purchase allocations.];
                SourceExpr="Purch. Alloc. G/L Account No.";
                Visible=ShowAllocations;
                Editable=IsNumberAndHeader }

    { 1000000029;1;Group  ;
                Name=ALR;
                CaptionML=[DEU=Erweiterte Zeilenerkennung;
                           ENU=Advanced Line Recognition];
                GroupType=Group }

    { 1000000028;2;Field  ;
                SourceExpr="Advanced Line Recognition Type" }

    { 1000000027;2;Field  ;
                SourceExpr=Sorting }

    { 1000000024;2;Field  ;
                SourceExpr="Anchor Field" }

    { 1000000023;2;Field  ;
                SourceExpr="Field Position" }

    { 1000000020;2;Field  ;
                SourceExpr="Substitution Field" }

    { 1000000018;2;Field  ;
                SourceExpr="Get Value from Previous Value" }

    { 1000000014;2;Field  ;
                SourceExpr="Offset Top" }

    { 1000000013;2;Field  ;
                SourceExpr="Offset Bottom" }

    { 1000000012;2;Field  ;
                SourceExpr="Offset Left" }

    { 1000000010;2;Field  ;
                SourceExpr="Offset Right" }

    { 1000000007;2;Field  ;
                SourceExpr="ALR Value Caption Offset X";
                Importance=Additional }

    { 1000000006;2;Field  ;
                SourceExpr="ALR Value Caption Offset Y";
                Importance=Additional }

    { 1000000005;2;Field  ;
                SourceExpr="ALR Typical Value Field Width";
                Importance=Additional }

    { 6085580;1;Part      ;
                Name=Template Field Translations;
                SubPageLink=Template No.=FIELD(Template No.),
                            Type=FIELD(Type),
                            Code=FIELD(Code);
                PagePartID=Page6085588;
                PartType=Page }

  }
  CODE
  {
    VAR
      AllObjWithCaption@1160040000 : Record 2000000058;
      RecIDMgt@1001 : Codeunit 6085604;
      IsMasterTemplate@1160040010 : Boolean INDATASET;
      IsDate@161024012 : Boolean INDATASET;
      IsNumber@161024013 : Boolean INDATASET;
      IsNumberAndHeader@161024014 : Boolean INDATASET;
      IsLookup@1161054000 : Boolean INDATASET;
      SearchForValueEditable@161024015 : Boolean INDATASET;
      IsDestHeader@161024016 : Boolean INDATASET;
      IsDestLine@1004 : Boolean INDATASET;
      IsNewField@1160040011 : Boolean INDATASET;
      ShowCodeAndType@6085583 : Boolean INDATASET;
      LineRecognitionEnabled@1160040005 : Boolean INDATASET;
      CodeunitLookup@1160040001 : Text[250];
      CodeunitCaptureVal@1160040004 : Text[250];
      CodeunitIsValid@1160040003 : Text[250];
      CodeunitValidate@1160040002 : Text[250];
      SourceTable@1160040006 : Text[250];
      SourceField@1160040009 : Text[250];
      DestHeaderField@1160040007 : Text[250];
      DestLineField@1160040008 : Text[250];
      FixedValue@1000 : Text[250];
      ShowTransferValue@6085573 : Boolean INDATASET;
      ShowPurchaseTab@6085574 : Boolean INDATASET;
      CaptionText@6085575 : Text[300];
      RuleText@6085576 : Text[300];
      TotalCaptions@6085577 : TextConst 'DEU=(%1 Suchtexte gesamt);ENU=(%1 captions in total)';
      TotalRules@6085578 : TextConst 'DEU=(%1 Regeln gesamt);ENU=(%1 rules in total)';
      EditCaption@6085579 : Boolean INDATASET;
      EditRule@6085580 : Boolean INDATASET;
      ShowMultiline@6085581 : Boolean INDATASET;
      ShowEnableGenRule@6085582 : Boolean INDATASET;
      IsPageEditable@1002 : Boolean INDATASET;
      ShowStopLineRecognition@6085584 : Boolean INDATASET;
      ShowAllocations@6085585 : Boolean INDATASET;
      DecimalPlacesDescription@6085586 : Text[50];
      FormulaTxt@6085587 : Text[1024];
      ShowXmlPath@6085588 : Boolean INDATASET;
      CurrentDocumentNo@6085589 : Code[20];
      ShowXMLShowField@6085600 : Boolean INDATASET;

    LOCAL PROCEDURE UpdateControls@6085573();
    VAR
      Template@6085574 : Record 6085579;
      DocCat@6085573 : Record 6085575;
      TemplateFieldCaption@6085577 : Record 6085581;
      TemplateFieldRule@6085576 : Record 6085583;
      ContiniaVersionMgt@6085578 : Codeunit 6192775;
      i@6085575 : Integer;
      CDCModuleLicense@6085579 : Codeunit 6086008;
      DCSetup@6085581 : Record 6085573;
    BEGIN
      IsPageEditable := CurrPage.EDITABLE;

      DCSetup.GET;
      IF Template.GET("Template No.") THEN
        DocCat.GET(Template."Category Code");

      FixedValue := GetFixedValue;

      SearchForValueEditable := (Formula = '') AND (FixedValue = '');

      IsMasterTemplate := Template.Type = Template.Type::Master;
      IsDate := "Data Type" = "Data Type"::Date;
      IsNumber := "Data Type" = "Data Type"::Number;
      IsNumberAndHeader := ("Data Type" = "Data Type"::Number) AND (Type = Type::Header);
      IsLookup := ("Data Type" = "Data Type"::Lookup) AND IsPageEditable;
      IsDestHeader := (Type = Type::Header) AND (DocCat."Destination Header Table No." <> 0) AND IsPageEditable;
      IsDestLine := (DocCat."Destination Line Table No." <> 0) AND IsPageEditable;
      LineRecognitionEnabled := Template."Recognize Lines" = Template."Recognize Lines"::Yes;
      IsNewField := Code = '';
      ShowCodeAndType := IsNewField OR (ContiniaVersionMgt.NAVVersion < 100000);
      ShowPurchaseTab := DocCat.IsPurchInvCrMemoCategory AND ("Data Type" = "Data Type"::Number) AND (Type = Type::Header);
      ShowTransferValue := NOT ((DocCat."Destination Header Table No." = 0) AND (DocCat."Destination Line Table No." = 0));
      ShowMultiline := Type = Type::Header;
      ShowEnableGenRule := ("Data Type" = "Data Type"::Text) OR ("Data Type" = "Data Type"::Date);
      ShowStopLineRecognition := CDCModuleLicense.IsAdvCaptureActivated(FALSE);
      ShowAllocations := DCSetup."Enable Purchase Allocation" AND CDCModuleLicense.IsApprovalActivated(FALSE);

      EditCaption := IsPageEditable AND NOT IsNewField;
      IF NOT IsNewField THEN BEGIN
        TemplateFieldCaption.SETRANGE("Template No.","Template No.");
        TemplateFieldCaption.SETRANGE(Type,Type);
        TemplateFieldCaption.SETRANGE(Code,Code);
        IF TemplateFieldCaption.FIND('-') THEN BEGIN
          i := TemplateFieldCaption.COUNT;
          IF i = 1 THEN
            CaptionText := TemplateFieldCaption.Caption
          ELSE BEGIN
            CaptionText := TemplateFieldCaption.Caption + ' ' + STRSUBSTNO(TotalCaptions,i);
            EditCaption := FALSE;
          END;
        END ELSE
          CaptionText := '';
      END ELSE
        CaptionText := '';

      EditRule := IsPageEditable AND NOT IsNewField;
      IF NOT IsNewField THEN BEGIN
        TemplateFieldRule.SETRANGE("Template No.","Template No.");
        TemplateFieldRule.SETRANGE(Type,Type);
        TemplateFieldRule.SETRANGE(Code,Code);
        IF TemplateFieldRule.FIND('-') THEN BEGIN
          i := TemplateFieldRule.COUNT;
          IF i = 1 THEN
            RuleText := TemplateFieldRule.Rule
          ELSE BEGIN
            RuleText := TemplateFieldRule.Rule + ' ' + STRSUBSTNO(TotalRules,i);
            EditRule := FALSE;
          END;
        END ELSE
          RuleText := '';
      END ELSE
        RuleText := '';

      DecimalPlacesDescription := ValidateDecimalPlaces("Decimal Places");
      ShowXmlPath := Template."Data Type" = Template."Data Type"::XML;
      ShowXMLShowField := Type = Type::Line;
    END;

    LOCAL PROCEDURE ShowCaptions@6085575();
    VAR
      TemplateFieldCaption@6085573 : Record 6085581;
    BEGIN
      TemplateFieldCaption.FILTERGROUP(2);
      TemplateFieldCaption.SETRANGE("Template No.","Template No.");
      TemplateFieldCaption.SETRANGE(Type,Type);
      TemplateFieldCaption.SETRANGE(Code,Code);
      TemplateFieldCaption.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"CDC Template Field Captions",TemplateFieldCaption);
      UpdateControls;
    END;

    LOCAL PROCEDURE ShowRules@6085579();
    VAR
      TemplateFieldRule@6085573 : Record 6085583;
    BEGIN
      TemplateFieldRule.FILTERGROUP(2);
      TemplateFieldRule.SETRANGE("Template No.","Template No.");
      TemplateFieldRule.SETRANGE(Type,Type);
      TemplateFieldRule.SETRANGE(Code,Code);
      TemplateFieldRule.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"CDC Template Field Rules",TemplateFieldRule);
      UpdateControls;
    END;

    LOCAL PROCEDURE ShowCodeunits@6085580();
    VAR
      TemplateField@6085574 : Record 6085580;
    BEGIN
      TemplateField.FILTERGROUP(2);
      TemplateField.SETRANGE("Template No.","Template No.");
      TemplateField.SETRANGE(Type,Type);
      TemplateField.SETRANGE(Code,Code);
      TemplateField.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"CDC Template Field Codeunits",TemplateField);
    END;

    LOCAL PROCEDURE RemoveQuotationMarks@6085574(FormulaString@6085573 : Text[1024]) : Text[1024];
    VAR
      FormulaLength@6085575 : Integer;
    BEGIN
      IF FormulaString = '' THEN
        EXIT;

      FormulaLength := STRLEN(FormulaString);
      IF (FormulaString[1] = '''') AND (FormulaString[FormulaLength] = '''') THEN BEGIN
        FormulaString := COPYSTR(FormulaString,2,FormulaLength);
        FormulaString := COPYSTR(FormulaString,1,FormulaLength-2);
      END;
      EXIT(FormulaString);
    END;

    PROCEDURE SetDocumentNo@6085576(DocumentNo@6085573 : Code[20]);
    BEGIN
      CurrentDocumentNo := DocumentNo;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 6085597 CDC Document Lines ListPart
{
  OBJECT-PROPERTIES
  {
    Date=02/06/20;
    Time=12:00:00 PM;
    Modified=Yes;
    Version List=DCW17.00.00.6.00.01,ALR010;
  }
  PROPERTIES
  {
    CaptionML=[DEU=CDC Document Lines ListPart;
               ENU=CDC Document Lines ListPart];
    LinksAllowed=No;
    SourceTable=Table6085596;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    OnAfterGetRecord=BEGIN
                       UpdateTranslInfo;
                       FillSortingBuffer;
                     END;

    OnNewRecord=BEGIN
                  "Document No." := Document."No.";
                  "Template No." := Document."Template No.";
                  "Translate to Type" := 0;
                  "Translate to No." := '';

                  IF NOT BelowxRec THEN BEGIN
                    xRecLineNo := xRec."Line No.";
                    "Line No." := 0
                  END ELSE
                    "Line No." := GetLastLineNo + 1;

                  CurrLineNo := "Line No.";
                END;

    OnInsertRecord=BEGIN
                     xRecLineNo := 0;

                     IF NOT BelowxRec THEN
                       ManuallyInsertLine(xRec."Line No.");
                     EXIT(TRUE);
                   END;

    OnDeleteRecord=VAR
                     Value@1000000000 : Record 6085593;
                   BEGIN
                     Value.SETCURRENTKEY("Document No.","Is Value",Type,"Page No.","Line No.");
                     Value.SETRANGE("Document No.",Document."No.");
                     Value.SETRANGE("Is Value",TRUE);
                     Value.SETRANGE(Type,Value.Type::Line);
                     Value.SETRANGE("Line No.","Line No.");
                     Value.DELETEALL;
                     EXIT(TRUE);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           CurrLineNo := "Line No.";
                         END;

    ActionList=ACTIONS
    {
      { 1160040000;  ;ActionContainer;
                      Name=ActionItems;
                      ActionContainerType=ActionItems }
      { 1160040002;1 ;ActionGroup;
                      Name=Line;
                      CaptionML=[DEU=&Zeile;
                                 ENU=&Line];
                      Image=Line }
      { 1160040001;2 ;Action    ;
                      Name=Card;
                      CaptionML=[DEU=Karte;
                                 ENU=Card];
                      Image=EditLines;
                      OnAction=BEGIN
                                 Rec.ShowCard;
                               END;
                                }
      { 3       ;1   ;ActionGroup;
                      Name=TranslationsGr;
                      CaptionML=[DEU=öbersetzungen;
                                 ENU=&Translations];
                      Image=Track }
      { 6       ;2   ;Action    ;
                      Name=NoTranslation;
                      CaptionML=[DEU=Nr.;
                                 ENU=No.];
                      ToolTipML=ENU=View or edit No. translations of the template.;
                      Image=Track;
                      OnAction=VAR
                                 PurchSalesTransl@1001 : Codeunit 6085707;
                               BEGIN
                                 PurchSalesTransl.ShowItemNoTrans(Document);
                               END;
                                }
      { 5       ;2   ;Action    ;
                      Name=DescriptionTranslation;
                      CaptionML=[DEU=Beschreibung;
                                 ENU=Description];
                      ToolTipML=ENU=View or edit Description translations of the template.;
                      Image=Track;
                      OnAction=VAR
                                 PurchSalesTransl@1001 : Codeunit 6085707;
                               BEGIN
                                 PurchSalesTransl.ShowDescriptionTrans(Document);
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Name=UOM;
                      CaptionML=[DEU=Einheit;
                                 ENU=Unit of Measure];
                      ToolTipML=ENU=View or edit Unit of Measure translations.;
                      Image=Track;
                      OnAction=VAR
                                 PurchSalesTransl@1001 : Codeunit 6085707;
                               BEGIN
                                 PurchSalesTransl.ShowUOMTrans(Document);
                               END;
                                }
      { 8       ;2   ;Action    ;
                      Name=CrossReferences;
                      CaptionML=ENU=Cross References;
                      ToolTipML=ENU=Set up a customer's or vendor's own identification of the selected item. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.;
                      Image=Change;
                      OnAction=VAR
                                 ItemCrossRef@1000 : Record 5717;
                               BEGIN
                                 IF Document."Source Record Table ID" = DATABASE::Vendor THEN
                                   ItemCrossRef.SETFILTER("Cross-Reference Type",'%1|%2',ItemCrossRef."Cross-Reference Type"::" ",
                                     ItemCrossRef."Cross-Reference Type"::Vendor)
                                 ELSE
                                   IF Document."Source Record ID Tree ID" = DATABASE::Customer THEN
                                     ItemCrossRef.SETFILTER("Cross-Reference Type",'%1|%2',ItemCrossRef."Cross-Reference Type"::" ",
                                       ItemCrossRef."Cross-Reference Type"::Customer);

                                 ItemCrossRef.SETRANGE("Cross-Reference Type No.",Document."Source Record No.");

                                 PAGE.RUN(0,ItemCrossRef);
                               END;
                                }
      { 1000000018;1 ;ActionGroup;
                      CaptionML=[DEU=Erw. Zeilenerkennung;
                                 ENU=Adv. line recognition];
                      Image=SetupLines }
      { 1000000019;2 ;Action    ;
                      CaptionML=[DEU=Mit Anker verknÅpftes Feld;
                                 ENU=Link value to existing value];
                      Promoted=Yes;
                      Image=Link;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 AdvLineRecognitionMgt@1000000000 : Codeunit 61000;
                               BEGIN
                                 AdvLineRecognitionMgt.SetToAnchorLinkedField(Rec);
                               END;
                                }
      { 1000000016;2 ;Action    ;
                      CaptionML=[DEU=Feldsuche mit SpaltenÅberschrift;
                                 ENU=Find value by column heading];
                      Promoted=Yes;
                      Image=SelectField;
                      OnAction=VAR
                                 AdvLineRecognitionMgt@1113400000 : Codeunit 61000;
                               BEGIN
                                 AdvLineRecognitionMgt.SetToFieldSearchWithColumnHeding(Rec);
                               END;
                                }
      { 1000000017;2 ;Action    ;
                      CaptionML=[DEU=Feldsuche mit Caption;
                                 ENU=Find value by caption];
                      Promoted=Yes;
                      Image=Find;
                      OnAction=VAR
                                 AdvLineRecognitionMgt@1113400000 : Codeunit 61000;
                               BEGIN
                                 AdvLineRecognitionMgt.SetToFieldSearchWithCaption(Rec);
                               END;
                                }
      { 1000000014;2 ;Separator  }
      { 1000000015;2 ;Action    ;
                      CaptionML=[DEU=Feldeinstellungen zurÅcksetzen;
                                 ENU=Reset field to default];
                      Image=ResetStatus;
                      OnAction=VAR
                                 AdvLineRecognitionMgt@1000 : Codeunit 61000;
                               BEGIN
                                 AdvLineRecognitionMgt.ResetFieldFromMenu(Rec);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Repeater;
                IndentationColumnName=1;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                Name=OK;
                ToolTipML=[DEU=Gibt an, ob die Zeile gÅltig ist.;
                           ENU=Specifies whether the line is valid.];
                SourceExpr=OK;
                Editable=FALSE }

    { 1   ;2   ;Field     ;
                Name=Translate to Type;
                ToolTipML=[DEU=Gibt die interne Art an, in den die erkannte Nummer Åbersetzt werden soll.;
                           ENU=Specifies the internal type to translate the recognized number value to.];
                SourceExpr="Translate to Type";
                Editable=AllowEdit }

    { 2   ;2   ;Field     ;
                Name=Translate to No.;
                ToolTipML=[DEU=Gibt die interne Nummer an, in die die erkannte Nummer Åbersetzt werden soll.;
                           ENU=Specifies the internal number to translate the recognized number value to.];
                SourceExpr="Translate to No.";
                Editable=AllowEdit;
                OnValidate=BEGIN
                             FillSortingBuffer;
                             Document.ValidateDocument;
                           END;

                OnLookup=BEGIN
                           EXIT(LookupTranslToNo(Text));
                         END;
                          }

    { 1000000013;2;Field  ;
                Name=Control1000000013;
                CaptionML=[DEU=Zugeordnete Menge;
                           ENU=Matched Quantity];
                ToolTipML=[DEU=Gibt die mit der Zeile Åbereinstimmende Menge an.;
                           ENU=Specifies the quantity matched to the line.];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=GetMatchedQty;
                Visible=ShowMatchedQty;
                Editable=AllowEdit;
                OnDrillDown=BEGIN
                              ShowMatchSpec;
                            END;
                             }

    { 161024012;2;Field   ;
                Name=Line No.;
                ToolTipML=[DEU=Gibt die Zeilennummer an.;
                           ENU=Specifies the line number.];
                SourceExpr="Line No.";
                Visible=FALSE;
                Editable=FALSE }

    { 1100000000;2;Field  ;
                Name=Field Value 1;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 1";
                CaptionClass=FieldCaptions[1];
                Visible=NoOfColumns >= 1;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(1,"Field Value 1");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(1,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(1);
                             END;
                              }

    { 1100000001;2;Field  ;
                Name=Field Value 2;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 2";
                CaptionClass=FieldCaptions[2];
                Visible=NoOfColumns >= 2;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(2,"Field Value 2");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(2,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(2);
                             END;
                              }

    { 1100000002;2;Field  ;
                Name=Field Value 3;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 3";
                CaptionClass=FieldCaptions[3];
                Visible=NoOfColumns >= 3;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(3,"Field Value 3");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(3,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(3);
                             END;
                              }

    { 1100000003;2;Field  ;
                Name=Field Value 4;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 4";
                CaptionClass=FieldCaptions[4];
                Visible=NoOfColumns >= 4;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(4,"Field Value 4");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(4,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(4);
                             END;
                              }

    { 1100000004;2;Field  ;
                Name=Field Value 5;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 5";
                CaptionClass=FieldCaptions[5];
                Visible=NoOfColumns >= 5;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(5,"Field Value 5");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(5,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(5);
                             END;
                              }

    { 1100000005;2;Field  ;
                Name=Field Value 6;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 6";
                CaptionClass=FieldCaptions[6];
                Visible=NoOfColumns >= 6;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(6,"Field Value 6");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(6,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(6);
                             END;
                              }

    { 1100000006;2;Field  ;
                Name=Field Value 7;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 7";
                CaptionClass=FieldCaptions[7];
                Visible=NoOfColumns >= 7;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(7,"Field Value 7");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(7,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(7);
                             END;
                              }

    { 1100000007;2;Field  ;
                Name=Field Value 8;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 8";
                CaptionClass=FieldCaptions[8];
                Visible=NoOfColumns >= 8;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(8,"Field Value 8");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(8,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(8);
                             END;
                              }

    { 1100000008;2;Field  ;
                Name=Field Value 9;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 9";
                CaptionClass=FieldCaptions[9];
                Visible=NoOfColumns >= 9;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(9,"Field Value 9");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(9,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(9);
                             END;
                              }

    { 1100000009;2;Field  ;
                Name=Field Value 10;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 10";
                CaptionClass=FieldCaptions[10];
                Visible=NoOfColumns >= 10;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(10,"Field Value 10");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(10,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(10);
                             END;
                              }

    { 1000000003;2;Field  ;
                Name=Field Value 11;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 11";
                CaptionClass=FieldCaptions[11];
                Visible=NoOfColumns >= 11;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(11,"Field Value 11");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(11,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(11);
                             END;
                              }

    { 1000000004;2;Field  ;
                Name=Field Value 12;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 12";
                CaptionClass=FieldCaptions[12];
                Visible=NoOfColumns >= 12;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(12,"Field Value 12");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(12,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(12);
                             END;
                              }

    { 1000000005;2;Field  ;
                Name=Field Value 13;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 13";
                CaptionClass=FieldCaptions[13];
                Visible=NoOfColumns >= 13;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(13,"Field Value 13");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(13,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(13);
                             END;
                              }

    { 1000000006;2;Field  ;
                Name=Field Value 14;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 14";
                CaptionClass=FieldCaptions[14];
                Visible=NoOfColumns >= 14;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(14,"Field Value 14");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(14,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(14);
                             END;
                              }

    { 1000000007;2;Field  ;
                Name=Field Value 15;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 15";
                CaptionClass=FieldCaptions[15];
                Visible=NoOfColumns >= 15;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(15,"Field Value 15");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(15,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(15);
                             END;
                              }

    { 1000000008;2;Field  ;
                Name=Field Value 16;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 16";
                CaptionClass=FieldCaptions[16];
                Visible=NoOfColumns >= 16;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(16,"Field Value 16");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(16,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(16);
                             END;
                              }

    { 1000000009;2;Field  ;
                Name=Field Value 17;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 17";
                CaptionClass=FieldCaptions[17];
                Visible=NoOfColumns >= 17;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(17,"Field Value 17");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(17,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(17);
                             END;
                              }

    { 1000000010;2;Field  ;
                Name=Field Value 18;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 18";
                CaptionClass=FieldCaptions[18];
                Visible=NoOfColumns >= 18;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(18,"Field Value 18");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(18,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(18);
                             END;
                              }

    { 1000000011;2;Field  ;
                Name=Field Value 19;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 19";
                CaptionClass=FieldCaptions[19];
                Visible=NoOfColumns >= 19;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(19,"Field Value 19");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(19,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(19);
                             END;
                              }

    { 1000000012;2;Field  ;
                Name=Field Value 20;
                AssistEdit=Yes;
                ToolTipML=[DEU=Gibt den Wert des konfigurierten Felds an.;
                           ENU=Specifies the value of the configured field.];
                SourceExpr="Field Value 20";
                CaptionClass=FieldCaptions[20];
                Visible=NoOfColumns >= 20;
                Editable=AllowEdit;
                OnValidate=BEGIN
                             UpdateFieldValue(20,"Field Value 20");
                           END;

                OnLookup=BEGIN
                           EXIT(LookupValue(20,Text));
                         END;

                OnAssistEdit=BEGIN
                               Assist(20);
                             END;
                              }

  }
  CODE
  {
    VAR
      Document@1000000010 : Record 6085590;
      DocCat@1160040002 : Record 6085575;
      CaptureMgt@1000000008 : Codeunit 6085576;
      WebClientMgt@6085575 : Codeunit 6085662;
      ShowMatchedQty@1000000001 : Boolean INDATASET;
      AllowEdit@1000000002 : Boolean INDATASET;
      FieldCodes@1001 : ARRAY [20] OF Code[20];
      FieldCaptions@1000 : ARRAY [20] OF Text[250];
      xRecLineNo@6085573 : Integer;
      CurrLineNo@6085574 : Integer;
      NoOfColumns@6085577 : Integer;

    PROCEDURE GetCaptions@1000000002();
    VAR
      Field@1000000003 : Record 6085580;
      Template@1000000001 : Record 6085579;
      I@1000000002 : Integer;
      AddField@1000 : Boolean;
    BEGIN
      CLEAR(FieldCodes);
      CLEAR(FieldCaptions);
      NoOfColumns := 0;

      Field.SETCURRENTKEY("Template No.",Type,"Sort Order");
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Line);
      IF Field.FINDSET THEN
        REPEAT
          AddField := TRUE;
          IF Document."File Type" = Document."File Type"::XML THEN BEGIN
            IF Field."Show Field" = Field."Show Field"::IfValue THEN
              IF NOT CaptureMgt.LineFieldHasAnyValues(Document,Field.Code) THEN
                AddField := FALSE;

            IF Field."Show Field" = Field."Show Field"::Never THEN
              AddField := FALSE;
          END;

          IF AddField THEN BEGIN
            I := I + 1;
            FieldCodes[I] := Field.Code;
            FieldCaptions[I] := Field."Field Name";
            NoOfColumns += 1;
          END;
        UNTIL (Field.NEXT = 0) OR (I = 20);

      FOR I := 1 TO 20 DO
        IF FieldCaptions[I] = '' THEN
          FieldCaptions[I] := '-';
    END;

    PROCEDURE SetDocument@1000000003(VAR NewDocument@1000000001 : Record 6085590;BuildTempLines@1000 : Boolean);
    VAR
      Value@1000000003 : Record 6085593;
      Template@1000000005 : Record 6085579;
      i@1000000000 : Integer;
      NoOfLines@1000000004 : Integer;
    BEGIN
      Document := NewDocument;

      IF NOT DocCat.GET(Document."Document Category Code") THEN
        CLEAR(DocCat);

      DELETEALL;

      GetCaptions;

      IF BuildTempLines THEN
        Document.BuildTempLinesTable(Rec);

      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE UpdatePage@1000000000();
    BEGIN
      UpdateFieldValues;
    END;

    PROCEDURE UpdateFieldValues@1000000006();
    VAR
      Template@1000000002 : Record 6085579;
      Field@1000000000 : Record 6085580;
      i@1000000001 : Integer;
      Update@6085573 : Boolean;
    BEGIN
      IF CurrLineNo > 0 THEN // We store the line number OnAfterGetCurrRecord as the Rec point might be invalid in NAV2017 at the point of invocation (UpdatePage).
        Update := NOT GET("Document No.",CurrLineNo);

      "Field Value 1" := GetValueAsText(FieldCodes[1]);
      "Field Value 2" := GetValueAsText(FieldCodes[2]);
      "Field Value 3" := GetValueAsText(FieldCodes[3]);
      "Field Value 4" := GetValueAsText(FieldCodes[4]);
      "Field Value 5" := GetValueAsText(FieldCodes[5]);
      "Field Value 6" := GetValueAsText(FieldCodes[6]);
      "Field Value 7" := GetValueAsText(FieldCodes[7]);
      "Field Value 8" := GetValueAsText(FieldCodes[8]);
      "Field Value 9" := GetValueAsText(FieldCodes[9]);
      "Field Value 10" := GetValueAsText(FieldCodes[10]);
      "Field Value 11" := GetValueAsText(FieldCodes[11]);
      "Field Value 12" := GetValueAsText(FieldCodes[12]);
      "Field Value 13" := GetValueAsText(FieldCodes[13]);
      "Field Value 14" := GetValueAsText(FieldCodes[14]);
      "Field Value 15" := GetValueAsText(FieldCodes[15]);
      "Field Value 16" := GetValueAsText(FieldCodes[16]);
      "Field Value 17" := GetValueAsText(FieldCodes[17]);
      "Field Value 18" := GetValueAsText(FieldCodes[18]);
      "Field Value 19" := GetValueAsText(FieldCodes[19]);
      "Field Value 20" := GetValueAsText(FieldCodes[20]);

      AllowEdit := Document.Status = Document.Status::Open;

      IF WebClientMgt.IsWebClient AND Update THEN BEGIN
        DELETEALL;
        Document.BuildTempLinesTable(Rec);
        CurrPage.UPDATE(FALSE);
      END ELSE
        IF LineIsInserted("Document No.",CurrLineNo) THEN
          CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE LineIsInserted@1(DocumentNo@1001 : Code[20];LineNo@1002 : Integer) : Boolean;
    VAR
      TempDocumentLine@1000 : TEMPORARY Record 6085596;
    BEGIN
      TempDocumentLine.COPY(Rec,TRUE);
      EXIT(TempDocumentLine.GET(DocumentNo,LineNo));
    END;

    PROCEDURE GetValueAsText@1000000008(FieldCode@1000000000 : Code[20]) : Text[250];
    VAR
      Field@1000000001 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Line,FieldCode) THEN
        EXIT(CaptureMgt.GetValueAsText(Document."No.","Line No.",Field));
    END;

    PROCEDURE UpdateFieldValue@1000000007(ActiveFieldIndex@1000000003 : Integer;VAR NewValue@1000000000 : Text[250]);
    VAR
      Field@1000000004 : Record 6085580;
      Value@1000000002 : Record 6085593;
    BEGIN
      IF xRecLineNo <> 0 THEN BEGIN
        ManuallyInsertLine(xRecLineNo);
        xRecLineNo := 0;
      END;

      Field.GET(Document."Template No.",Field.Type::Line,FieldCodes[ActiveFieldIndex]);
      CaptureMgt.UpdateFieldValue(Document."No.","Page No.","Line No.",Field,NewValue,TRUE,TRUE);
      NewValue := GetValueAsText(FieldCodes[ActiveFieldIndex]);

      ValidateLine;
      IF MODIFY THEN;

      UpdatePage;
    END;

    PROCEDURE Assist@1000000011(ActiveFieldIndex@1000000001 : Integer);
    VAR
      TemplateFieldCard@6085573 : Page 6085586;
      Field@1000000000 : Record 6085580;
    BEGIN
      Field.GET(Document."Template No.",Field.Type::Line,FieldCodes[ActiveFieldIndex]);
      Field.SETRECFILTER;
      TemplateFieldCard.SetDocumentNo(Document."No.");
      TemplateFieldCard.SETTABLEVIEW(Field);
      TemplateFieldCard.RUN;
    END;

    PROCEDURE LookupValue@1000000004(ActiveFieldIndex@1000000001 : Integer;VAR Text@1000000002 : Text[1024]) : Boolean;
    VAR
      Field@1000000000 : Record 6085580;
      NewText@1000000003 : Text[1024];
    BEGIN
      Field.GET(Document."Template No.",Field.Type::Line,FieldCodes[ActiveFieldIndex]);
      NewText := CaptureMgt.LookupValue("Document No.",Field,"Line No.",Text);
      IF NewText <> '' THEN BEGIN
        Text := NewText;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetMatchedQty@1000000005() : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.SETRANGE("Document Line No.","Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    PROCEDURE SetShowMatchedQty@1000000001(NewShowMatchedQty@1000000000 : Boolean);
    BEGIN
      ShowMatchedQty := NewShowMatchedQty;
    END;

    PROCEDURE ValidateLine@1160040000();
    VAR
      Template@1160040000 : Record 6085579;
    BEGIN
      IF Template.GET(Document."Template No.") AND (Template."Codeunit ID: Line Validation" <> 0) THEN
        CODEUNIT.RUN(Template."Codeunit ID: Line Validation",Rec)
      ELSE
        OK := TRUE;
    END;

    PROCEDURE HasLines@6085573() : Boolean;
    BEGIN
      IF COUNT = 0 THEN
        EXIT(FALSE)
      ELSE
        IF COUNT = 1 THEN BEGIN
          IF ("Field Value 1" = '') AND
            ("Field Value 2" = '') AND
            ("Field Value 3" = '') AND
            ("Field Value 4" = '') AND
            ("Field Value 5" = '') AND
            ("Field Value 6" = '') AND
            ("Field Value 7" = '') AND
            ("Field Value 8" = '') AND
            ("Field Value 9" = '') AND
            ("Field Value 10" = '') AND
            ("Field Value 11" = '') AND
            ("Field Value 12" = '') AND
            ("Field Value 13" = '') AND
            ("Field Value 14" = '') AND
            ("Field Value 15" = '') AND
            ("Field Value 16" = '') AND
            ("Field Value 17" = '') AND
            ("Field Value 18" = '') AND
            ("Field Value 19" = '') AND
            ("Field Value 20" = '')
          THEN
            EXIT(FALSE);
        END;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

